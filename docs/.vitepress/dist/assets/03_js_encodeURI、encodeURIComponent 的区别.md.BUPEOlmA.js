import{_ as s,c as a,o as i,ae as n}from"./chunks/framework.Cthp9TdA.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"03_js/encodeURI、encodeURIComponent 的区别.md","filePath":"03_js/encodeURI、encodeURIComponent 的区别.md"}'),o={name:"03_js/encodeURI、encodeURIComponent 的区别.md"};function d(t,e,c,l,p,h){return i(),a("div",null,e[0]||(e[0]=[n(`<blockquote><p>在 JavaScript 中，<code>encodeURI</code> 和 <code>encodeURIComponent</code> 都是用于编码 URI (Uniform Resource Identifier) 的函数，但它们之间存在重要的区别，尤其是在编码范围和使用场景上。理解这些区别对于编写安全可靠的 Web 应用程序至关重要。</p></blockquote><h4 id="_1-encodeuri" tabindex="-1">1. encodeURI() <a class="header-anchor" href="#_1-encodeuri" aria-label="Permalink to &quot;1. encodeURI()&quot;">​</a></h4><ul><li>用于编码整个 URI： <code>encodeURI()</code> 用于编码整个 URI，它会将 URI 中除了以下字符之外的所有字符都进行编码：</li><li>ASCII 字母和数字</li><li><code>-</code>、<code>_</code>、<code>.</code>、<code>!</code>、<code>~</code>、<code>*</code>、<code>&#39;</code>、<code>(</code>、<code>)</code></li><li><code>;</code>、<code>/</code>、<code>?</code>、<code>:</code>、<code>@</code>、<code>&amp;</code>、<code>=</code>、<code>+</code>、<code>$</code>、<code>,</code></li></ul><ul><li>不会编码 URI 的保留字符： 重要的是，<code>encodeURI()</code> 不会对 URI 的保留字符（例如 <code>/</code>、<code>?</code>、<code>:</code>、<code>#</code>）进行编码，这些字符在 URI 中具有特殊含义。</li><li>适用场景： 当你需要编码整个 URI，并且希望保留 URI 的结构（例如 URL 中的路径和查询参数）时，应使用 <code>encodeURI()</code>。</li></ul><h4 id="_2-encodeuricomponent" tabindex="-1">2. encodeURIComponent() <a class="header-anchor" href="#_2-encodeuricomponent" aria-label="Permalink to &quot;2. encodeURIComponent()&quot;">​</a></h4><ul><li>用于编码 URI 的组成部分： <code>encodeURIComponent()</code> 用于编码 URI 的组成部分，例如查询参数的值。它比 <code>encodeURI()</code> 更加严格，会将除了以下字符之外的所有字符都进行编码：</li></ul><ul><li><p>ASCII 字母和数字</p></li><li><p><code>-</code>、<code>_</code>、<code>.</code>、<code>!</code>、<code>~</code>、<code>*</code>、<code>&#39;</code>、<code>(</code>、<code>)</code></p></li><li><p>会编码 URI 的保留字符： <code>encodeURIComponent()</code> 会编码所有 URI 的保留字符，包括 <code>/</code>、<code>?</code>、<code>:</code>、<code>#</code> 等。</p></li></ul><p>适用场景： 当你需要编码 URI 中的某个部分，例如查询参数的值，并且需要确保该部分不包含任何可能干扰 URI 解析的字符时，应使用 <code>encodeURIComponent()</code>。</p><h4 id="总结和选择" tabindex="-1">总结和选择 <a class="header-anchor" href="#总结和选择" aria-label="Permalink to &quot;总结和选择&quot;">​</a></h4><table tabindex="0"><thead><tr><th>函数</th><th>编码范围</th><th>是否编码 URI 保留字符</th><th>适用场景</th></tr></thead><tbody><tr><td><code>encodeURI()</code></td><td>除了 URI 保留字符和一些常用符号之外的字符</td><td>否</td><td>编码整个 URI，保留 URI 结构</td></tr><tr><td><code>encodeURIComponent()</code></td><td>除了少数常用符号之外的所有字符</td><td>是</td><td>编码 URI 的组成部分，例如查询参数的值</td></tr></tbody></table><h4 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h4><ul><li>根据需要选择 <code>encodeURI()</code> 或 <code>encodeURIComponent()</code>： 如果需要编码整个 URI，使用 <code>encodeURI()</code>。如果需要编码 URI 的某个部分（例如查询参数），使用 <code>encodeURIComponent()</code>。</li></ul><ul><li>编码查询参数的值： 当构建包含查询参数的 URL 时，始终使用 <code>encodeURIComponent()</code> 编码参数的值，以避免特殊字符干扰 URL 解析。</li></ul><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> uri</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;https://www.example.com/path?param1=value with spaces&amp;param2=other value/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> encodedURI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encodeURI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uri);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encoded URI:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, encodedURI);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: Encoded URI: https://www.example.com/path?param1=value%20with%20spaces&amp;param2=other%20value/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> encodedURIComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encodeURIComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uri);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encoded URI Component:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, encodedURIComponent);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: Encoded URI Component: https%3A%2F%2Fwww.example.com%2Fpath%3Fparam1%3Dvalue%20with%20spaces%26param2%3Dother%20value%2F</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> paramValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;value with / and ?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> encodedParamValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encodeURIComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(paramValue);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encoded Parameter Value:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, encodedParamValue);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: Encoded Parameter Value: value%20with%20%2F%20and%20%3F</span></span></code></pre></div>`,15)]))}const u=s(o,[["render",d]]);export{r as __pageData,u as default};
