import{_ as o,c as d,o as a,ae as c}from"./chunks/framework.Cthp9TdA.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"04_vue/vue 建议在哪个生命周期内调用异步请求？.md","filePath":"04_vue/vue 建议在哪个生命周期内调用异步请求？.md"}'),t={name:"04_vue/vue 建议在哪个生命周期内调用异步请求？.md"};function r(_,e,i,l,u,n){return a(),d("div",null,e[0]||(e[0]=[c('<h4 id="最佳实践-created-钩子函数" tabindex="-1">最佳实践：<code>created</code> 钩子函数 <a class="header-anchor" href="#最佳实践-created-钩子函数" aria-label="Permalink to &quot;最佳实践：`created` 钩子函数&quot;">​</a></h4><p>通常建议在 <code>created</code> 生命周期钩子函数中调用异步请求。原因如下：</p><ul><li>更早地获取数据： <code>created</code> 在组件实例创建完成后立即执行，此时可以尽早地获取数据，减少用户等待时间，提高用户体验。</li><li>数据初始化： 在 <code>created</code> 中，<code>data</code> 属性已经被初始化，可以安全地将请求到的数据赋值给 <code>data</code>，确保数据在组件内部的正确流动。</li></ul><h4 id="其他生命周期钩子函数的说明" tabindex="-1">其他生命周期钩子函数的说明： <a class="header-anchor" href="#其他生命周期钩子函数的说明" aria-label="Permalink to &quot;其他生命周期钩子函数的说明：&quot;">​</a></h4><ul><li><code>beforeMount</code>： 在 <code>beforeMount</code> 阶段，模板已经编译完成，但尚未挂载到 DOM。虽然也可以在此阶段发送请求，但不如 <code>created</code> 更早。</li><li><code>mounted</code>： 在 <code>mounted</code> 阶段，组件已经挂载到 DOM。如果在此阶段发送请求，可能会导致页面出现短暂的内容闪烁，因为需要等待数据返回后才能渲染。</li><li>其他钩子函数： 其他钩子函数如 <code>beforeUpdate</code>、<code>updated</code>、<code>beforeDestroy</code> 和 <code>destroyed</code> 等通常不用于发送初始数据请求。</li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>虽然在 Vue 的任何生命周期阶段都可以调用异步请求，但从用户体验和数据初始化的角度来看，created 是最佳选择。它允许你尽早地获取数据，并在组件渲染之前完成数据的初始化，从而提供更流畅的用户体验。</p><h4 id="vue3-中" tabindex="-1">vue3 中 <a class="header-anchor" href="#vue3-中" aria-label="Permalink to &quot;vue3 中&quot;">​</a></h4><p>在 vue3 中，<code>Composition API</code> 已经没有 <code>beforeCreated</code> 和 <code>created</code> 生命周期了，在整个 <code>setup</code> 中就表示了这 2 个生命周期，因此直接可以请求异步函数，如果需要操作 dom，还是在 <code>onMounted</code> 中</p>',9)]))}const p=o(t,[["render",r]]);export{h as __pageData,p as default};
