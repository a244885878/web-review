import{_ as l,c as i,o as a,ae as e}from"./chunks/framework.Cthp9TdA.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"08_工程化/webpack和vite的区别.md","filePath":"08_工程化/webpack和vite的区别.md"}'),d={name:"08_工程化/webpack和vite的区别.md"};function r(o,t,u,h,n,c){return a(),i("div",null,t[0]||(t[0]=[e('<blockquote><p>Webpack 和 Vite 都是现代前端构建工具，但它们在设计理念、构建机制和开发体验上有显著差异。以下是两者的核心区别：</p></blockquote><h4 id="_1-底层原理" tabindex="-1">1. 底层原理 <a class="header-anchor" href="#_1-底层原理" aria-label="Permalink to &quot;1. 底层原理&quot;">​</a></h4><ul><li>Webpack <ul><li>基于打包（Bundle）：将所有模块（JS、CSS、图片等）打包成一个或多个静态资源文件（Bundle）。</li><li>开发环境：启动时需要先构建完整的依赖图并打包，导致项目越大启动越慢。</li><li>生产环境：通过 Tree Shaking、Code Splitting 等优化代码。</li></ul></li><li>Vite <ul><li>基于原生 ES 模块（Native ESM）：利用浏览器原生支持的 ES 模块加载能力，开发时无需打包代码。</li><li>开发环境：按需编译和加载文件（仅编译当前页面所需模块），启动极快。</li><li>生产环境：使用 Rollup 打包，优化静态资源。</li></ul></li></ul><h4 id="_2-开发体验" tabindex="-1">2. 开发体验 <a class="header-anchor" href="#_2-开发体验" aria-label="Permalink to &quot;2. 开发体验&quot;">​</a></h4><ul><li>Webpack <ul><li>冷启动慢：项目越大，初始构建时间越长。</li><li>HMR（热更新）：修改文件后需重新构建部分模块，更新速度随项目规模增加而变慢。</li></ul></li><li>Vite <ul><li>冷启动极快：直接启动开发服务器，按需编译。</li><li>HMR 超快：基于原生 ESM 实现，仅更新修改的模块，与项目规模无关。</li></ul></li></ul><h4 id="_3-构建流程" tabindex="-1">3. 构建流程 <a class="header-anchor" href="#_3-构建流程" aria-label="Permalink to &quot;3. 构建流程&quot;">​</a></h4><ul><li>Webpack <ul><li>全量打包：无论是开发还是生产环境，都需要先打包所有文件。</li><li>插件系统：依赖复杂的 Loader 和 Plugin 处理文件（如 Babel、Sass 等）。</li></ul></li><li>Vite <ul><li>按需编译：开发时仅编译当前请求的文件，生产环境使用 Rollup 打包。</li><li>内置优化：对 TypeScript、CSS、静态资源等提供开箱即用的支持，减少配置。</li></ul></li></ul><h4 id="_4-性能对比" tabindex="-1">4. 性能对比 <a class="header-anchor" href="#_4-性能对比" aria-label="Permalink to &quot;4. 性能对比&quot;">​</a></h4><table tabindex="0"><thead><tr><th>场景</th><th>Webpack</th><th>Vite</th></tr></thead><tbody><tr><td>冷启动</td><td>慢（全量打包）</td><td>极快（按需编译）</td></tr><tr><td>HMR</td><td>较慢（依赖打包）</td><td>极快（原生 ESM 更新）</td></tr><tr><td>生产构建</td><td>较慢（需手动优化）</td><td>快（Rollup 高效打包）</td></tr></tbody></table><h4 id="_5-配置复杂度" tabindex="-1">5. 配置复杂度 <a class="header-anchor" href="#_5-配置复杂度" aria-label="Permalink to &quot;5. 配置复杂度&quot;">​</a></h4><ul><li>Webpack <ul><li>配置复杂，需要手动设置 Loader、Plugin、Code Splitting 等。</li><li>适合深度定制化场景，但学习成本高。</li></ul></li><li>Vite <ul><li>配置简单，预设了现代前端开发的最佳实践（如 TypeScript、CSS Modules）。</li><li>支持扩展 Rollup 插件，适合快速上手。</li></ul></li></ul><h4 id="_6-生态与适用场景" tabindex="-1">6. 生态与适用场景 <a class="header-anchor" href="#_6-生态与适用场景" aria-label="Permalink to &quot;6. 生态与适用场景&quot;">​</a></h4><ul><li>Webpack <ul><li>成熟生态：丰富的插件和社区支持，适合复杂项目（如 SSR、微前端）。</li><li>兼容性：通过 Polyfill 支持旧浏览器。</li></ul></li><li>Vite <ul><li>现代浏览器优先：依赖原生 ESM，默认面向现代浏览器（可通过插件兼容旧浏览器）。</li><li>轻量高效：适合新项目、单页应用（SPA）、Vue/React 项目。</li></ul></li></ul><h4 id="_7-核心差异总结" tabindex="-1">7. 核心差异总结 <a class="header-anchor" href="#_7-核心差异总结" aria-label="Permalink to &quot;7. 核心差异总结&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th>Webpack</th><th>Vite</th></tr></thead><tbody><tr><td>构建方式</td><td>全量打包</td><td>按需编译 + 生产打包</td></tr><tr><td>开发速度</td><td>慢（尤其大型项目）</td><td>极快</td></tr><tr><td>生产打包工具</td><td>Webpack 自身</td><td>Rollup</td></tr><tr><td>HMR 机制</td><td>基于打包的 HMR</td><td>原生 ESM 的 HMR</td></tr><tr><td>配置复杂度</td><td>高</td><td>低</td></tr><tr><td>适用场景</td><td>复杂、兼容性要求高的项目</td><td>现代浏览器优先、追求开发效率的项目</td></tr><tr><td></td><td></td><td></td></tr></tbody></table>',15)]))}const p=l(d,[["render",r]]);export{b as __pageData,p as default};
