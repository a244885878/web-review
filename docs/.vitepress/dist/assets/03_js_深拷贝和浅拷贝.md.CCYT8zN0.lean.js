import{_ as l,c as n,o as t,ae as h,j as s,a as i}from"./chunks/framework.Cthp9TdA.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"03_js/深拷贝和浅拷贝.md","filePath":"03_js/深拷贝和浅拷贝.md"}'),e={name:"03_js/深拷贝和浅拷贝.md"};function p(k,a,d,o,r,E){return t(),n("div",null,a[0]||(a[0]=[h("",27),s("table",{tabindex:"0"},[s("thead",null,[s("tr",null,[s("th"),s("th",null,"浅拷贝"),s("th",null,"深拷贝")])]),s("tbody",null,[s("tr",null,[s("td",null,"拷贝方式"),s("td",null,"复制第一层，引用类型属性仍然共享"),s("td",null,"递归复制所有层级，创建完全独立的对象")]),s("tr",null,[s("td",null,"影响原对象"),s("td",null,"可能会影响"),s("td",null,"不会影响")]),s("tr",null,[s("td",null,"性能"),s("td",null,"较快"),s("td",null,"较慢（递归拷贝消耗更大）")]),s("tr",null,[s("td",null,"常见方法"),s("td",{"css-module":".obj"},"Object.assign()、"),s("td",null,"SON.parse(JSON.stringify(obj))、递归函数、lodash.cloneDeep")])])],-1),s("p",null,"如果对象层级较浅，用浅拷贝即可；如果对象层级较深，建议用深拷贝，避免数据污染。",-1),s("p",null,"🚀 最佳实践",-1),s("ul",null,[s("li",null,[i("简单对象 → "),s("code",null,"JSON.parse(JSON.stringify(obj))")]),s("li",null,[i("复杂对象 → "),s("code",null,"lodash.cloneDeep(obj)")]),s("li",null,[i("性能优化 → 考虑是否真的需要深拷贝，有时可以用 "),s("code",null,"WeakMap"),i(" 缓存数据避免重复拷贝。")])],-1)]))}const y=l(e,[["render",p]]);export{c as __pageData,y as default};
