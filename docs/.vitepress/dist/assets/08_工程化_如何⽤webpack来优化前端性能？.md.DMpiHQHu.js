import{_ as a,c as l,o as i,ae as r}from"./chunks/framework.Cthp9TdA.js";const s=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"08_工程化/如何⽤webpack来优化前端性能？.md","filePath":"08_工程化/如何⽤webpack来优化前端性能？.md"}'),o={name:"08_工程化/如何⽤webpack来优化前端性能？.md"};function t(c,e,d,n,h,u){return i(),l("div",null,e[0]||(e[0]=[r('<h4 id="_1-代码压缩" tabindex="-1">1. 代码压缩 <a class="header-anchor" href="#_1-代码压缩" aria-label="Permalink to &quot;1. 代码压缩&quot;">​</a></h4><ul><li>使用 <code>TerserWebpackPlugin</code> 或 <code>UglifyJsPlugin</code> 压缩 JavaScript 代码。</li><li>使用 <code>CSSMinimizerWebpackPlugin</code> 压缩 CSS 代码。</li><li>对于图片资源，可以使用 <code>ImageMinimizerWebpackPlugin</code> 进行压缩。</li></ul><h4 id="_2-代码分割" tabindex="-1">2. 代码分割 <a class="header-anchor" href="#_2-代码分割" aria-label="Permalink to &quot;2. 代码分割&quot;">​</a></h4><ul><li>将代码分割成多个 chunk，按需加载，减少首屏加载时间。</li><li>使用动态导入（<code>import()</code> 语法）实现懒加载。</li><li>配置多个入口，为不同页面或功能生成不同 bundle。</li></ul><h4 id="_3-tree-shaking" tabindex="-1">3. Tree Shaking <a class="header-anchor" href="#_3-tree-shaking" aria-label="Permalink to &quot;3. Tree Shaking&quot;">​</a></h4><ul><li>启用 Tree Shaking 功能，去除未使用的代码，减小 bundle 体积。</li><li>确保代码符合 ES6 模块规范，以便 Webpack 正确识别未使用的代码。</li></ul><h4 id="_4-资源优化" tabindex="-1">4. 资源优化 <a class="header-anchor" href="#_4-资源优化" aria-label="Permalink to &quot;4. 资源优化&quot;">​</a></h4><ul><li>使用 url-loader 或 file-loader 处理图片、字体等资源。</li><li>对小图片进行 base64 编码，减少 HTTP 请求。</li><li>使用 CDN 加速静态资源加载。</li></ul><h4 id="_5-缓存" tabindex="-1">5. 缓存 <a class="header-anchor" href="#_5-缓存" aria-label="Permalink to &quot;5. 缓存&quot;">​</a></h4><ul><li>配置 Webpack 输出文件名，利用浏览器缓存。</li><li>使用 <code>cache-loader</code> 或 <code>hard-source-webpack-plugin</code> 缓存构建结果，提高构建速度。</li></ul><h4 id="_6-减少-http-请求" tabindex="-1">6. 减少 HTTP 请求 <a class="header-anchor" href="#_6-减少-http-请求" aria-label="Permalink to &quot;6. 减少 HTTP 请求&quot;">​</a></h4><ul><li>合并 CSS、JavaScript 文件，减少 HTTP 请求次数。</li><li>使用雪碧图（CSS Sprites）合并多个小图标。</li></ul><h4 id="_7-优化构建速度" tabindex="-1">7. 优化构建速度 <a class="header-anchor" href="#_7-优化构建速度" aria-label="Permalink to &quot;7. 优化构建速度&quot;">​</a></h4><ul><li>使用 <code>HappyPack</code> 或 <code>thread-loader</code> 多线程构建，提高构建速度。</li><li>减少 loader 和 plugin 的使用，避免不必要的计算。</li><li>使用 DllPlugin 和 DllReferencePlugin 提前打包第三方库，避免重复打包。</li></ul><h4 id="_8-其他优化" tabindex="-1">8. 其他优化 <a class="header-anchor" href="#_8-其他优化" aria-label="Permalink to &quot;8. 其他优化&quot;">​</a></h4><ul><li>使用 Preload 和 Prefetch 预加载资源。</li><li>使用 Gzip 压缩传输资源。</li><li>使用 Webpack Bundle Analyzer 分析 bundle 体积，找出优化点。</li></ul><h4 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h4><ul><li>优化是一个持续的过程，需要根据实际情况进行调整。</li><li>不要过度优化，避免引入新的问题。</li><li>使用 Chrome DevTools 等工具分析性能瓶颈，有针对性地进行优化。</li></ul>',18)]))}const b=a(o,[["render",t]]);export{s as __pageData,b as default};
