import{_ as e,c as d,o as c,ae as o}from"./chunks/framework.Cthp9TdA.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"04_vue/vue 工程项目中 assets和static的区别.md","filePath":"04_vue/vue 工程项目中 assets和static的区别.md"}'),a={name:"04_vue/vue 工程项目中 assets和static的区别.md"};function i(s,t,l,r,_,u){return c(),d("div",null,t[0]||(t[0]=[o('<blockquote><p>在 Vue 项目中，<code>assets</code> 和 <code>static</code> 都是用来存放静态资源的目录，但它们在使用方式和最终处理上有一些重要的区别。理解这些区别有助于你更有效地管理项目中的静态资源。</p></blockquote><h4 id="主要区别概览" tabindex="-1">主要区别概览： <a class="header-anchor" href="#主要区别概览" aria-label="Permalink to &quot;主要区别概览：&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th><code>assets</code></th><th><code>static</code></th></tr></thead><tbody><tr><td>处理方式</td><td>经过 Webpack 处理（打包、压缩、优化等）</td><td>不经过 Webpack 处理，直接复制到打包目录</td></tr><tr><td>引用方式</td><td>支持相对路径</td><td>必须使用绝对路径（通常以 /static/ 开头）</td></tr><tr><td>适用场景</td><td>项目中使用的图片、CSS、JS 等资源，需要优化</td><td>第三方库、不需要处理的静态文件（如音频、视频）</td></tr><tr><td>打包后位置</td><td>通常在 <code>dist/assets</code> 目录下</td><td>通常在 <code>dist/static</code> 目录下</td></tr><tr><td>是否影响构建速度</td><td>会略微影响，因为需要处理</td><td>不影响，速度更快</td></tr><tr><td>文件体积</td><td>经过压缩通常较小</td><td>未经压缩通常较大</td></tr></tbody></table><h4 id="详细解释" tabindex="-1">详细解释： <a class="header-anchor" href="#详细解释" aria-label="Permalink to &quot;详细解释：&quot;">​</a></h4><ul><li><code>assets</code> 目录： <ul><li><code>assets</code> 目录下的资源会被 Webpack 当作模块进行处理。这意味着 Webpack 会对这些资源进行一系列优化操作，例如：</li><li>压缩： 减小文件体积，加快加载速度。</li><li>打包： 将多个小文件合并成一个或少数几个大文件，减少 HTTP 请求数。</li><li>添加哈希值： 在文件名后添加哈希值，解决缓存问题。</li><li>转换： 例如将图片转换为 <code>base64</code> 编码，减少 <code>HTTP</code> 请求。</li><li>在代码中引用 <code>assets</code> 目录下的资源时，可以使用相对路径，例如：i<code>mport logo from &#39;./assets/logo.png&#39;</code>。<code>Webpack</code> 会自动处理路径。</li><li>通常用于存放项目中使用的图片、样式、脚本等资源，这些资源需要进行优化以提高性能。</li></ul></li><li><code>static</code> 目录： <ul><li><code>static</code> 目录下的资源不会经过 <code>Webpack</code> 的处理，而是直接复制到最终的打包目录（通常是 <code>dist</code> 目录）中。</li><li>在代码中引用 <code>static</code> 目录下的资源时，必须使用绝对路径，通常以 <code>/static/</code> 开头。例如：<code>&lt;img src=&quot;/static/images/background.jpg&quot;&gt;</code>。</li><li>通常用于存放不需要进行任何处理的静态文件，例如： <ul><li>已经压缩或优化的第三方库。</li><li>音频文件、视频文件等大型媒体文件。</li><li><code>robots.txt</code>、<code>favicon.ico</code> 等网站根目录下的文件。</li></ul></li></ul></li><li>使用建议： <ul><li>将项目中使用的图片、CSS、JS 等资源放在 <code>assets</code> 目录下，让 Webpack 进行优化。</li><li>将第三方库、音频、视频等不需要处理的静态文件放在 <code>static</code> 目录下。</li><li>如果你的项目对构建速度要求较高，且静态资源体积较大，可以考虑将部分不需要处理的资源放在 <code>static</code> 目录下。</li></ul></li></ul><h4 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h4><p><code>assets</code> 和 <code>static</code> 目录的主要区别在于是否经过 Webpack 处理。选择哪个目录取决于你的具体需求。合理使用这两个目录可以帮助你更好地管理项目中的静态资源，提高项目性能和开发效率。</p>',7)]))}const h=e(a,[["render",i]]);export{p as __pageData,h as default};
