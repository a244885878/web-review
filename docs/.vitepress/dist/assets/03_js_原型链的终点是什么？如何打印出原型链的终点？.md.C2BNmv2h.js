import{_ as i,c as a,o as t,ae as l}from"./chunks/framework.Cthp9TdA.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"03_js/原型链的终点是什么？如何打印出原型链的终点？.md","filePath":"03_js/原型链的终点是什么？如何打印出原型链的终点？.md"}'),e={name:"03_js/原型链的终点是什么？如何打印出原型链的终点？.md"};function p(n,s,h,k,o,r){return t(),a("div",null,s[0]||(s[0]=[l(`<blockquote><p>原型链的终点是 <code>null</code></p></blockquote><h4 id="解释" tabindex="-1">解释： <a class="header-anchor" href="#解释" aria-label="Permalink to &quot;解释：&quot;">​</a></h4><p>在 JavaScript 中，每个对象都有一个原型（prototype），它指向另一个对象。当试图访问一个对象的属性时，如果该对象自身没有这个属性，JavaScript 就会沿着原型链向上查找，直到找到该属性或者到达原型链的末端。</p><p>原型链的顶端是 <code>Object.prototype</code>，所有其他对象都直接或间接地继承自它。<code>Object.prototype</code> 也有一个原型，但它的原型是 <code>null</code>。这就是原型链的终点。</p><h4 id="如何-打印-原型链的终点" tabindex="-1">如何“打印”原型链的终点： <a class="header-anchor" href="#如何-打印-原型链的终点" aria-label="Permalink to &quot;如何“打印”原型链的终点：&quot;">​</a></h4><p>实际上，你无法直接“打印” <code>null</code> 本身来表示原型链的终点。但是，你可以通过以下方式来验证原型链的终点：</p><ol><li>使用 <code>__proto__</code> 属性（不推荐）：</li></ol><p>虽然 <code>__proto__</code> 属性在一些浏览器中可用，但它不是一个标准属性，不建议在生产环境中使用。你可以使用它来遍历原型链，直到遇到 <code>null</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一个普通对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (prototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prototype);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  prototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prototype.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prototype); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 null</span></span></code></pre></div><ol start="2"><li>使用 <code>Object.getPrototypeOf()</code> 方法（推荐）：</li></ol><p><code>Object.getPrototypeOf()</code> 是一个标准方法，用于获取一个对象的原型。你可以使用它来更安全地遍历原型链：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一个普通对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (prototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prototype);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  prototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prototype);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prototype); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 null</span></span></code></pre></div><h4 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h4><p>原型链的终点是 <code>null</code>，它表示原型链的末端。虽然你不能直接“打印” <code>null</code> 来表示终点，但你可以使用 <code>Object.getPrototypeOf()</code> 方法遍历原型链，并在遇到 <code>null</code> 时知道已经到达了终点。</p><h4 id="补充说明" tabindex="-1">补充说明： <a class="header-anchor" href="#补充说明" aria-label="Permalink to &quot;补充说明：&quot;">​</a></h4><ul><li><code>Object.prototype</code> 是所有对象的最终原型，它自身也有一个原型，即 <code>Object.prototype.__proto__</code>，其值为 <code>null</code>。</li></ul><ul><li>理解原型链对于理解 JavaScript 的继承机制至关重要。</li></ul>`,17)]))}const c=i(e,[["render",p]]);export{E as __pageData,c as default};
