import{_ as o,c as l,o as t,ae as c}from"./chunks/framework.Cthp9TdA.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"04_vue/常见的事件修饰符及其作用.md","filePath":"04_vue/常见的事件修饰符及其作用.md"}'),d={name:"04_vue/常见的事件修饰符及其作用.md"};function i(a,e,u,r,n,s){return t(),l("div",null,e[0]||(e[0]=[c('<p>在 Vue 中，事件修饰符是以 <code>.</code> 开头的指令后缀，用于增强事件处理的灵活性和便捷性。它们允许你在绑定事件的同时，以简洁的方式添加额外的行为，例如阻止事件冒泡、阻止默认行为等。以下是 Vue 中常见的事件修饰符及其作用：</p><h4 id="_1-stop" tabindex="-1">1. <code>.stop</code> <a class="header-anchor" href="#_1-stop" aria-label="Permalink to &quot;1. `.stop`&quot;">​</a></h4><ul><li>作用： 阻止事件冒泡。相当于调用了 <code>event.stopPropagation()</code>。</li><li>示例： <code>&lt;button @click.stop=&quot;handleClick&quot;&gt;点击&lt;/button&gt;</code></li><li>解释： 当点击按钮时，<code>handleClick</code> 方法会被调用，同时该点击事件不会继续向父元素冒泡。</li></ul><h4 id="_2-prevent" tabindex="-1">2. <code>.prevent</code> <a class="header-anchor" href="#_2-prevent" aria-label="Permalink to &quot;2. `.prevent`&quot;">​</a></h4><ul><li>作用： 阻止事件的默认行为。相当于调用了 <code>event.preventDefault()</code>。</li><li>示例： <code>&lt;form @submit.prevent=&quot;handleSubmit&quot;&gt;...&lt;/form&gt;</code></li><li>解释： 阻止表单的默认提交行为，<code>handleSubmit</code> 方法会被调用，但页面不会刷新。</li></ul><h4 id="_3-capture" tabindex="-1">3. <code>.capture</code> <a class="header-anchor" href="#_3-capture" aria-label="Permalink to &quot;3. `.capture`&quot;">​</a></h4><ul><li>作用： 使用“捕获模式”添加事件监听器。</li><li>解释： 正常情况下，事件传播的顺序是“冒泡模式”，即从最内层元素开始，逐级向外层元素传递。使用 <code>.capture</code> 修饰符后，事件传播的顺序变为“捕获模式”，即从最外层元素开始，逐级向内层元素传递。</li><li>示例： <code>&lt;div @click.capture=&quot;handleCapture&quot;&gt;...&lt;button @click=&quot;handleClick&quot;&gt;点击&lt;/button&gt;...&lt;/div&gt;</code></li></ul><ul><li>解释： 在上述示例中，即使点击的是按钮，<code>handleCapture</code> 方法也会先于 <code>handleClick</code> 方法执行。</li></ul><h4 id="_4-self" tabindex="-1">4. <code>.self</code> <a class="header-anchor" href="#_4-self" aria-label="Permalink to &quot;4. `.self`&quot;">​</a></h4><ul><li>作用： 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li><li>解释： 如果事件是从该元素的子元素触发的，则不会触发回调。</li><li>示例： <code>&lt;div @click.self=&quot;handleSelf&quot;&gt;...&lt;button&gt;点击&lt;/button&gt;...&lt;/div&gt;</code></li><li>解释： 只有直接点击 <code>div</code> 元素时，<code>handleSelf</code> 方法才会被调用；点击 <code>div</code> 内部的按钮则不会触发。</li></ul><h4 id="_5-once" tabindex="-1">5. .once <a class="header-anchor" href="#_5-once" aria-label="Permalink to &quot;5. .once&quot;">​</a></h4><ul><li>作用： 事件只会触发一次。</li><li>示例： <code>&lt;button @click.once=&quot;handleClick&quot;&gt;点击&lt;/button&gt;</code></li><li>解释： 按钮的点击事件只会触发 <code>handleClick</code> 方法一次，之后再点击不会有任何反应。</li></ul><h4 id="_6-passive" tabindex="-1">6. .passive <a class="header-anchor" href="#_6-passive" aria-label="Permalink to &quot;6. .passive&quot;">​</a></h4><ul><li>作用： 以被动模式添加事件监听器。</li><li>解释： 这个修饰符主要用于优化移动端性能，尤其是在处理 <code>touchstart</code> 和 <code>touchmove</code> 事件时。使用 <code>.passive</code> 可以告诉浏览器该事件监听器不会调用 <code>preventDefault()</code>，从而允许浏览器更快地处理滚动等操作。</li><li>示例： <code>&lt;div @touchstart.passive=&quot;handleTouchStart&quot;&gt;...&lt;/div&gt;</code></li><li>注意： 使用 <code>.passive</code> 后，在事件处理函数中调用 <code>preventDefault()</code> 将不会生效，浏览器会忽略这个调用并在控制台发出警告。</li></ul><h4 id="使用修饰符的顺序" tabindex="-1">使用修饰符的顺序 <a class="header-anchor" href="#使用修饰符的顺序" aria-label="Permalink to &quot;使用修饰符的顺序&quot;">​</a></h4><p>使用多个修饰符时，顺序很重要。相应的代码会以相同的顺序产生。例如：</p><ul><li><code>v-on:click.prevent.self</code> 会阻止所有的点击，因为 <code>.prevent</code> 会先执行，阻止默认行为，导致 <code>.self</code> 无法判断事件是否来自元素自身。</li></ul><ul><li><code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击的默认行为。</li></ul><h4 id="键盘事件修饰符" tabindex="-1">键盘事件修饰符 <a class="header-anchor" href="#键盘事件修饰符" aria-label="Permalink to &quot;键盘事件修饰符&quot;">​</a></h4><p>Vue 还提供了一些键盘事件修饰符，用于监听特定的按键：</p><ul><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code> (捕获 “删除” 和 “退格” 键)</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul><p>例如：<code>&lt;input @keyup.enter=&quot;submitForm&quot;&gt;</code>，只有在按下回车键时才会调用 <code>submitForm</code> 方法。</p>',22)]))}const _=o(d,[["render",i]]);export{p as __pageData,_ as default};
