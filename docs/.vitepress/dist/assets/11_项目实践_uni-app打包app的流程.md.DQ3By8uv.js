import{_ as s,c as a,o as l,ae as n}from"./chunks/framework.Cthp9TdA.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"11_项目实践/uni-app打包app的流程.md","filePath":"11_项目实践/uni-app打包app的流程.md"}'),e={name:"11_项目实践/uni-app打包app的流程.md"};function h(t,i,p,k,d,r){return l(),a("div",null,i[0]||(i[0]=[n(`<h4 id="一、打包-android-应用" tabindex="-1">一、打包 Android 应用 <a class="header-anchor" href="#一、打包-android-应用" aria-label="Permalink to &quot;一、打包 Android 应用&quot;">​</a></h4><h5 id="_1-开发环境准备" tabindex="-1">1. 开发环境准备 <a class="header-anchor" href="#_1-开发环境准备" aria-label="Permalink to &quot;1. 开发环境准备&quot;">​</a></h5><ul><li>安装 HBuilderX（官方推荐的开发工具）。</li><li>确保项目在 HBuilderX 中能正常运行（调试模式）。</li></ul><h5 id="_2-配置-android-打包信息" tabindex="-1">2. 配置 Android 打包信息 <a class="header-anchor" href="#_2-配置-android-打包信息" aria-label="Permalink to &quot;2. 配置 Android 打包信息&quot;">​</a></h5><ul><li>应用名称：在 <code>manifest.json</code> → 基础配置 → 应用名称。</li><li>应用标识（包名）：在 <code>manifest.json</code> → 基础配置 → 应用标识（如 <code>com.example.app</code>）。</li><li>版本号：在 <code>manifest.json</code> → 基础配置 → 版本名称和版本号。</li></ul><h5 id="_3-生成签名证书-可选但推荐" tabindex="-1">3. 生成签名证书（可选但推荐） <a class="header-anchor" href="#_3-生成签名证书-可选但推荐" aria-label="Permalink to &quot;3. 生成签名证书（可选但推荐）&quot;">​</a></h5><ul><li>Android 要求应用必须签名。可以使用以下方法生成：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keytool</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -genkey</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -alias</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testalias</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keyalg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RSA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keysize</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2048</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -validity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 36500</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keystore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.keystore</span></span></code></pre></div><ul><li>保存 <code>.keystore</code> 文件并记录密码（丢失后无法更新应用）。</li></ul><h5 id="_4-云端打包-推荐" tabindex="-1">4. 云端打包（推荐） <a class="header-anchor" href="#_4-云端打包-推荐" aria-label="Permalink to &quot;4. 云端打包（推荐）&quot;">​</a></h5><ul><li>步骤： <ul><li>在 HBuilderX 中右键项目 → 发行 → 原生 App-云端打包。</li><li>选择 Android 平台，勾选「使用自有证书」并填写 <code>.keystore</code> 文件路径和密码。</li><li>点击打包，等待完成（需登录 DCloud 账号，免费用户每日有限额）。</li></ul></li><li>输出：生成 <code>.apk</code> 文件（下载到本地）。</li></ul><h5 id="_5-本地打包-可选" tabindex="-1">5. 本地打包（可选） <a class="header-anchor" href="#_5-本地打包-可选" aria-label="Permalink to &quot;5. 本地打包（可选）&quot;">​</a></h5><ul><li>需要配置 Android Studio 和 SDK 环境。</li><li>导出 uni-app 代码到 Android 项目，手动编译（复杂，建议参考官方文档）。</li></ul><h5 id="_6-安装测试" tabindex="-1">6. 安装测试 <a class="header-anchor" href="#_6-安装测试" aria-label="Permalink to &quot;6. 安装测试&quot;">​</a></h5><p>将 <code>.apk</code> 文件传输到 Android 设备，安装并测试。</p><h4 id="二、打包-ios-应用" tabindex="-1">二、打包 iOS 应用 <a class="header-anchor" href="#二、打包-ios-应用" aria-label="Permalink to &quot;二、打包 iOS 应用&quot;">​</a></h4><h5 id="_1-开发环境准备-1" tabindex="-1">1. 开发环境准备 <a class="header-anchor" href="#_1-开发环境准备-1" aria-label="Permalink to &quot;1. 开发环境准备&quot;">​</a></h5><ul><li>必须使用 <code>macOS</code> 系统（Xcode 仅支持 macOS）。</li><li>安装 <code>Xcode</code> 和 <code>iOS</code> 模拟器。</li><li>注册 <code>Apple 开发者账号</code>（个人/公司账号，需付费）。</li></ul><h5 id="_2-配置-ios-打包信息" tabindex="-1">2. 配置 iOS 打包信息 <a class="header-anchor" href="#_2-配置-ios-打包信息" aria-label="Permalink to &quot;2. 配置 iOS 打包信息&quot;">​</a></h5><ul><li>Bundle Identifier：在 <code>manifest.json</code> → 基础配置 → 应用标识（如 <code>com.example.app</code>）。</li><li>版本号：在 <code>manifest.json</code> → 基础配置 → 版本名称和版本号。</li></ul><h5 id="_3-生成-ios-证书和描述文件" tabindex="-1">3. 生成 iOS 证书和描述文件 <a class="header-anchor" href="#_3-生成-ios-证书和描述文件" aria-label="Permalink to &quot;3. 生成 iOS 证书和描述文件&quot;">​</a></h5><ul><li>步骤： <ul><li>登录 <code>Apple Developer</code> 后台，创建 App ID。</li><li>生成 开发/发布证书（<code>.p12</code> 文件）和 描述文件（Provisioning Profile）。</li><li>下载证书和描述文件到本地。</li></ul></li></ul><h5 id="_4-云端打包-推荐-1" tabindex="-1">4. 云端打包（推荐） <a class="header-anchor" href="#_4-云端打包-推荐-1" aria-label="Permalink to &quot;4. 云端打包（推荐）&quot;">​</a></h5><ul><li>步骤： <ul><li>在 HBuilderX 中右键项目 → 发行 → 原生 App-云端打包。</li><li>选择 iOS 平台，上传 <code>.p12</code> 证书和描述文件。</li><li>点击打包，等待完成（需 DCloud 账号）。</li></ul></li><li>输出：生成 <code>.ipa</code> 文件（仅限越狱设备直接安装）。</li></ul><h5 id="_5-本地打包-上架必备" tabindex="-1">5. 本地打包（上架必备） <a class="header-anchor" href="#_5-本地打包-上架必备" aria-label="Permalink to &quot;5. 本地打包（上架必备）&quot;">​</a></h5><ul><li>步骤： <ul><li>在 HBuilderX 中生成 iOS 资源：发行 → 原生 App 本地打包 → 生成原生 App 资源。</li><li>使用 Xcode 打开生成的 <code>iOS</code> 目录下的工程文件（如 <code>xxx.xcodeproj</code>）。</li><li>配置签名：在 Xcode 的 <code>Signing &amp; Capabilities</code> 中选择团队和描述文件。</li><li>连接真机或选择模拟器，点击 Build 生成 <code>.ipa</code>。</li></ul></li></ul><h5 id="_6-上架-app-store" tabindex="-1">6. 上架 App Store <a class="header-anchor" href="#_6-上架-app-store" aria-label="Permalink to &quot;6. 上架 App Store&quot;">​</a></h5><ul><li>通过 <code>App Store Connect</code> 提交应用： <ul><li>创建新应用，填写元数据（名称、截图、描述等）。</li><li>使用 Xcode 或 Transporter 上传 <code>.ipa</code> 文件。</li><li>提交审核（需 1-7 天）。</li></ul></li></ul><h4 id="三、注意事项" tabindex="-1">三、注意事项 <a class="header-anchor" href="#三、注意事项" aria-label="Permalink to &quot;三、注意事项&quot;">​</a></h4><h5 id="_1-android" tabindex="-1">1. Android： <a class="header-anchor" href="#_1-android" aria-label="Permalink to &quot;1. Android：&quot;">​</a></h5><ul><li>若使用第三方 SDK（如地图、支付），需在 <code>manifest.json</code> 配置权限。</li><li>签名文件务必备份！丢失后无法更新同一包名的应用。</li></ul><h5 id="_2-ios" tabindex="-1">2. iOS： <a class="header-anchor" href="#_2-ios" aria-label="Permalink to &quot;2. iOS：&quot;">​</a></h5><ul><li>测试阶段可使用 TestFlight 分发给测试用户。</li><li>上架需遵守 Apple 审核规则（如隐私政策、支付方式等）。</li></ul><h5 id="_3-跨平台兼容性" tabindex="-1">3. 跨平台兼容性： <a class="header-anchor" href="#_3-跨平台兼容性" aria-label="Permalink to &quot;3. 跨平台兼容性：&quot;">​</a></h5><p>部分 API 和组件在 iOS/Android 表现不同，需真机测试。</p><h4 id="四、常见问题" tabindex="-1">四、常见问题 <a class="header-anchor" href="#四、常见问题" aria-label="Permalink to &quot;四、常见问题&quot;">​</a></h4><ul><li>Q：云打包失败怎么办？ <ul><li>检查证书格式、包名是否冲突，或查看 HBuilderX 控制台报错信息。</li></ul></li><li>OS 打包后无法安装？ <ul><li>未签名或描述文件未包含设备 UDID（测试时需添加设备到开发者账号）。</li></ul></li><li>Q：如何调试原生功能？ <ul><li>使用 HBuilderX 的「自定义调试基座」功能（需本地安装 Android Studio/Xcode）。</li></ul></li></ul><h4 id="五、如何热更新" tabindex="-1">五、如何热更新 <a class="header-anchor" href="#五、如何热更新" aria-label="Permalink to &quot;五、如何热更新&quot;">​</a></h4><p>在 uni-app 中，实现应用的热更新主要有两种方式：<strong>资源热更新</strong>和<strong>整包更新</strong>。</p><h5 id="资源热更新" tabindex="-1">资源热更新 <a class="header-anchor" href="#资源热更新" aria-label="Permalink to &quot;资源热更新&quot;">​</a></h5><h5 id="_1-生成资源包-wgt-文件" tabindex="-1">1. 生成资源包（.wgt 文件）： <a class="header-anchor" href="#_1-生成资源包-wgt-文件" aria-label="Permalink to &quot;1. 生成资源包（.wgt 文件）：&quot;">​</a></h5><ul><li>在 HBuilderX 中，选择“发行” &gt; “原生 App” &gt; “资源升级包”，生成 .wgt 文件。</li></ul><h5 id="_2-上传资源包" tabindex="-1">2. 上传资源包： <a class="header-anchor" href="#_2-上传资源包" aria-label="Permalink to &quot;2. 上传资源包：&quot;">​</a></h5><ul><li>将生成的 <code>.wgt</code> 文件上传到服务器或云存储，以便客户端下载。</li></ul><h5 id="_3-客户端检测更新" tabindex="-1">3. 客户端检测更新： <a class="header-anchor" href="#_3-客户端检测更新" aria-label="Permalink to &quot;3. 客户端检测更新：&quot;">​</a></h5><ul><li>在应用启动时，向服务器请求最新版本信息，判断是否需要更新。</li></ul><h5 id="_4-下载并安装更新" tabindex="-1">4. 下载并安装更新： <a class="header-anchor" href="#_4-下载并安装更新" aria-label="Permalink to &quot;4. 下载并安装更新：&quot;">​</a></h5><ul><li>如果需要更新，下载 <code>.wgt</code> 文件，并使用 <code>plus.runtime.install</code> 方法安装。</li></ul><h5 id="示例代码" tabindex="-1">示例代码： <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码：&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #ifdef APP-PLUS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/check-update&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (res.data.updateAvailable) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">downloadFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        url: res.data.wgtUrl,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">downloadResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (downloadResult.statusCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            plus.runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              downloadResult.tempFilePath,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              { force: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                plus.runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;安装失败：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #endif</span></span></code></pre></div><h4 id="注意事项" tabindex="-1">注意事项： <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项：&quot;">​</a></h4><ul><li>版本号管理： 确保客户端和服务器端的版本号一致，以避免不必要的更新。</li><li>兼容性： 更新的资源应与当前应用版本兼容，避免因 API 变化导致崩溃。</li></ul><h5 id="整包更新" tabindex="-1">整包更新 <a class="header-anchor" href="#整包更新" aria-label="Permalink to &quot;整包更新&quot;">​</a></h5><p>整包更新需要重新安装应用，适用于需要修改原生代码或大幅度改动的情况。</p><h5 id="_1-生成新版本的安装包-apk-或-ipa" tabindex="-1">1. 生成新版本的安装包（.apk 或 .ipa）： <a class="header-anchor" href="#_1-生成新版本的安装包-apk-或-ipa" aria-label="Permalink to &quot;1. 生成新版本的安装包（.apk 或 .ipa）：&quot;">​</a></h5><ul><li>在 HBuilderX 中，选择“发行” &gt; “原生 App” &gt; “云打包”，生成新的安装包。</li></ul><h5 id="_2-上传安装包" tabindex="-1">2. 上传安装包： <a class="header-anchor" href="#_2-上传安装包" aria-label="Permalink to &quot;2. 上传安装包：&quot;">​</a></h5><ul><li>将新的安装包上传到服务器或应用市场。</li></ul><h5 id="_3-客户端检测更新-1" tabindex="-1">3. 客户端检测更新： <a class="header-anchor" href="#_3-客户端检测更新-1" aria-label="Permalink to &quot;3. 客户端检测更新：&quot;">​</a></h5><ul><li>在应用启动时，向服务器请求最新版本信息，判断是否需要更新。</li></ul><h5 id="_4-提示用户更新" tabindex="-1">4. 提示用户更新： <a class="header-anchor" href="#_4-提示用户更新" aria-label="Permalink to &quot;4. 提示用户更新：&quot;">​</a></h5><ul><li>如果需要更新，提示用户下载并安装新版本。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #ifdef APP-PLUS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/check-update&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (res.data.updateAvailable) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      uni.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showModal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;更新提示&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        content: res.data.updateDescription,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (response.confirm) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            plus.runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.data.apkUrl);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #endif</span></span></code></pre></div><h4 id="注意事项-1" tabindex="-1">注意事项： <a class="header-anchor" href="#注意事项-1" aria-label="Permalink to &quot;注意事项：&quot;">​</a></h4><ul><li>用户体验： 提示用户更新时，提供详细的更新说明，增强用户的更新意愿。</li><li>应用市场审核： 整包更新需要重新提交应用市场审核，可能导致审核延迟。</li></ul>`,65)]))}const c=s(e,[["render",h]]);export{E as __pageData,c as default};
