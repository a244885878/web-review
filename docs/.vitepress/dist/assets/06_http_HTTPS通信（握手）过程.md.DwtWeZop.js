import{_ as a,c as i,o as l,ae as t}from"./chunks/framework.Cthp9TdA.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"06_http/HTTPS通信（握手）过程.md","filePath":"06_http/HTTPS通信（握手）过程.md"}'),r={name:"06_http/HTTPS通信（握手）过程.md"};function o(h,e,n,s,d,u){return l(),i("div",null,e[0]||(e[0]=[t('<h4 id="https-握手过程概述" tabindex="-1">HTTPS 握手过程概述 <a class="header-anchor" href="#https-握手过程概述" aria-label="Permalink to &quot;HTTPS 握手过程概述&quot;">​</a></h4><blockquote><p>HTTPS（Hypertext Transfer Protocol Secure）是一种安全通信协议，在 HTTP 的基础上增加了 SSL/TLS 协议，为数据传输提供了安全保障。握手过程是 HTTPS 建立连接前双方进行的一系列交互，目的是为了建立一个安全、可靠的通信通道。</p></blockquote><h4 id="握手过程详解" tabindex="-1">握手过程详解 <a class="header-anchor" href="#握手过程详解" aria-label="Permalink to &quot;握手过程详解&quot;">​</a></h4><h5 id="_1-客户端发起连接请求" tabindex="-1">1. 客户端发起连接请求： <a class="header-anchor" href="#_1-客户端发起连接请求" aria-label="Permalink to &quot;1. 客户端发起连接请求：&quot;">​</a></h5><ul><li>客户端向服务器发起一个普通的 TCP 连接请求，建立 TCP 连接。</li><li>客户端向服务器发送一个 ClientHello 消息，包含： <ul><li>支持的协议版本（TLS1.2、TLS1.3 等）</li><li>支持的加密套件（Cipher Suites）</li><li>随机数（Client Random）</li></ul></li></ul><h5 id="_2-服务器响应" tabindex="-1">2. 服务器响应： <a class="header-anchor" href="#_2-服务器响应" aria-label="Permalink to &quot;2. 服务器响应：&quot;">​</a></h5><ul><li>服务器收到 ClientHello 消息后，会返回一个 ServerHello 消息，包含： <ul><li>选择的协议版本</li><li>选择的加密套件</li><li>随机数（Server Random）</li><li>服务器证书（Certificate）</li></ul></li><li>服务器证书包含了服务器的身份信息、公钥等。</li></ul><h5 id="_3-客户端验证证书" tabindex="-1">3. 客户端验证证书： <a class="header-anchor" href="#_3-客户端验证证书" aria-label="Permalink to &quot;3. 客户端验证证书：&quot;">​</a></h5><ul><li>客户端收到服务器证书后，会验证证书的有效性。 <ul><li>验证证书的颁发机构是否受信任</li><li>验证证书是否在有效期内</li><li>验证证书中的域名是否与服务器域名匹配</li></ul></li><li>如果验证通过，客户端会生成一个 Premaster Secret。</li></ul><h5 id="_4-客户端发送加密信息" tabindex="-1">4. 客户端发送加密信息： <a class="header-anchor" href="#_4-客户端发送加密信息" aria-label="Permalink to &quot;4. 客户端发送加密信息：&quot;">​</a></h5><ul><li>客户端使用服务器证书中的公钥加密 Premaster Secret，并将其发送给服务器。</li></ul><h5 id="_5-双方生成会话密钥" tabindex="-1">5. 双方生成会话密钥： <a class="header-anchor" href="#_5-双方生成会话密钥" aria-label="Permalink to &quot;5. 双方生成会话密钥：&quot;">​</a></h5><ul><li>服务器使用自己的私钥解密 Premaster Secret，并结合双方生成的随机数，计算出 Session Key。</li><li>客户端也根据 Premaster Secret 和随机数计算出 Session Key。</li><li>Session Key 将用于后续通信数据的加密和解密。</li></ul><h5 id="_6-客户端发送-finished-消息" tabindex="-1">6. 客户端发送 Finished 消息： <a class="header-anchor" href="#_6-客户端发送-finished-消息" aria-label="Permalink to &quot;6. 客户端发送 Finished 消息：&quot;">​</a></h5><ul><li>客户端使用 Session Key 对之前所有握手消息的摘要进行加密，生成 Finished 消息发送给服务器。</li></ul><h5 id="_7-服务器发送-finished-消息" tabindex="-1">7. 服务器发送 Finished 消息： <a class="header-anchor" href="#_7-服务器发送-finished-消息" aria-label="Permalink to &quot;7. 服务器发送 Finished 消息：&quot;">​</a></h5><ul><li>服务器也使用 Session Key 对之前所有握手消息的摘要进行加密，生成 Finished 消息发送给客户端。</li></ul><h5 id="_8-握手完成" tabindex="-1">8. 握手完成： <a class="header-anchor" href="#_8-握手完成" aria-label="Permalink to &quot;8. 握手完成：&quot;">​</a></h5><ul><li>双方收到对方的 Finished 消息后，表示握手过程完成，可以开始使用 Session Key 进行加密通信了。</li></ul><h4 id="握手过程示意图" tabindex="-1">握手过程示意图 <a class="header-anchor" href="#握手过程示意图" aria-label="Permalink to &quot;握手过程示意图&quot;">​</a></h4><p><img src="https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcQnaegY31GM1NoyoGVFKEaZcf5z8WM6upEiCt5TNjBI_t3jaPQ77c-pbqxG9iSl" alt=""></p><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>HTTPS 握手过程是一个复杂的过程，涉及到多个步骤和加密算法。通过握手过程，双方建立了一个安全的通信通道，确保数据在传输过程中不被窃听、篡改。</p>',23)]))}const P=a(r,[["render",o]]);export{_ as __pageData,P as default};
