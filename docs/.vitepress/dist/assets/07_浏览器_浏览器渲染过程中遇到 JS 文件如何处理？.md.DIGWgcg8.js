import{_ as i,c as t,o as e,ae as c}from"./chunks/framework.Cthp9TdA.js";const n=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"07_浏览器/浏览器渲染过程中遇到 JS 文件如何处理？.md","filePath":"07_浏览器/浏览器渲染过程中遇到 JS 文件如何处理？.md"}'),l={name:"07_浏览器/浏览器渲染过程中遇到 JS 文件如何处理？.md"};function r(o,a,d,S,p,_){return e(),t("div",null,a[0]||(a[0]=[c('<blockquote><p>在浏览器渲染一个网页的过程中，HTML、CSS 和 JavaScript 这三种语言共同作用。当浏览器遇到一个 HTML 文件时，它会按照以下大致步骤进行处理：</p></blockquote><ol><li>构建 DOM 树： 浏览器会解析 HTML 文件，将标签转换为 DOM 节点，形成一个树状结构，称为 DOM 树。DOM 树表示了页面的结构。</li><li>构建 CSSOM 树： 浏览器会解析 CSS 文件，将样式规则转换为 CSSOM（CSS Object Model），形成一个样式树。CSSOM 描述了页面元素的样式。</li><li>结合 DOM 树和 CSSOM 树，生成渲染树： 浏览器将 DOM 树和 CSSOM 树结合起来，生成渲染树。渲染树只包含可见的节点。</li><li>布局： 浏览器计算渲染树中每个节点的几何位置，确定它们在页面中的具体位置。</li><li>绘制： 浏览器将渲染树中的每个节点绘制到屏幕上。</li></ol><h4 id="遇到-js-文件时的处理" tabindex="-1">遇到 JS 文件时的处理 <a class="header-anchor" href="#遇到-js-文件时的处理" aria-label="Permalink to &quot;遇到 JS 文件时的处理&quot;">​</a></h4><p>当浏览器在解析 HTML 文件的过程中遇到 <code>&lt;script&gt;</code> 标签时，会发生以下情况：</p><ul><li>暂停 DOM 构建： 浏览器会暂停构建 DOM 树，转而去下载并执行 JavaScript 代码。</li><li>执行 JavaScript 代码： JavaScript 代码可以操作 DOM，修改样式，发起网络请求等。这些操作会影响页面的最终呈现效果。</li><li>恢复 DOM 构建： JavaScript 代码执行完成后，浏览器会继续构建 DOM 树。</li></ul><h4 id="为什么-javascript-会阻塞-dom-构建" tabindex="-1">为什么 JavaScript 会阻塞 DOM 构建？ <a class="header-anchor" href="#为什么-javascript-会阻塞-dom-构建" aria-label="Permalink to &quot;为什么 JavaScript 会阻塞 DOM 构建？&quot;">​</a></h4><ul><li>JavaScript 可以修改 DOM： 如果在 JavaScript 代码执行过程中修改了 DOM 结构，而浏览器又继续构建 DOM 树，可能会导致不一致。</li><li>保证 JavaScript 执行顺序： JavaScript 代码的执行顺序是确定的，如果在 JavaScript 执行过程中继续构建 DOM 树，可能会导致 JavaScript 代码无法获取到最新的 DOM 状态。</li></ul><h4 id="如何优化-javascript-的加载和执行" tabindex="-1">如何优化 JavaScript 的加载和执行？ <a class="header-anchor" href="#如何优化-javascript-的加载和执行" aria-label="Permalink to &quot;如何优化 JavaScript 的加载和执行？&quot;">​</a></h4><ul><li>将 <code>&lt;script&gt;</code> 标签放在底部： 这样可以尽量减少 JavaScript 对 DOM 构建的阻塞。</li><li>使用 <code>defer</code> 或 <code>async</code> 属性： <ul><li><code>defer</code> 属性：脚本会在 DOMContentLoaded 事件触发前执行，但不会阻塞 DOM 构建。</li><li><code>async</code> 属性：脚本会异步加载并执行，一旦下载完成就会执行，可能在 DOMContentLoaded 事件触发前或后执行。</li></ul></li><li>模块化 JavaScript： 将 JavaScript 代码拆分成多个模块，按需加载，可以减少初始加载时间。</li><li>压缩和合并 JavaScript 文件： 减小文件大小，减少网络请求。</li><li>利用浏览器缓存： 减少重复下载。</li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>浏览器在渲染过程中遇到 JavaScript 文件时，会暂停 DOM 构建，执行 JavaScript 代码，然后再继续构建 DOM 树。JavaScript 的执行会对页面的最终呈现效果产生影响。为了优化页面性能，我们可以采取一些措施，如将 <code>&lt;script&gt;</code> 标签放在底部、使用 <code>defer</code> 或 <code>async</code> 属性等。</p><p>注意： 浏览器渲染是一个复杂的过程，以上只是简化的描述。实际情况可能更为复杂，受到浏览器版本、JavaScript 引擎、网络状况等因素的影响。</p>',12)]))}const M=i(l,[["render",r]]);export{n as __pageData,M as default};
