import{_ as i,c as a,o as e,ae as l}from"./chunks/framework.Cthp9TdA.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"04_vue/对 keep-alive 的理解？.md","filePath":"04_vue/对 keep-alive 的理解？.md"}'),t={name:"04_vue/对 keep-alive 的理解？.md"};function n(h,s,p,k,E,d){return e(),a("div",null,s[0]||(s[0]=[l(`<blockquote><p><code>keep-alive</code> 是 Vue 内置的一个组件，用于缓存不活动的组件实例，而不是销毁它们。这在需要频繁切换组件，但又不希望每次都重新渲染组件的情况下非常有用，可以提升性能和用户体验。</p></blockquote><h4 id="核心作用" tabindex="-1">核心作用： <a class="header-anchor" href="#核心作用" aria-label="Permalink to &quot;核心作用：&quot;">​</a></h4><ul><li><strong>缓存组件实例</strong>： 当组件被 <code>keep-alive</code> 包裹时，组件的状态会被保存在内存中，而不是被销毁。当再次切换到该组件时，会直接从缓存中取出，避免了重新创建和渲染的过程。</li><li><strong>避免重复渲染</strong>： 减少了不必要的 DOM 操作和组件生命周期钩子的执行，从而提高了性能。</li><li><strong>保留组件状态</strong>： 组件的状态（例如输入框的内容、滚动位置等）会被完整地保留下来，用户体验更佳。</li></ul><h4 id="基本用法" tabindex="-1">基本用法： <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法：&quot;">​</a></h4><p>使用 <code>keep-alive</code> 非常简单，只需要将其包裹在需要缓存的组件外面即可。通常与 <code>&lt;router-view&gt;</code> 结合使用，缓存路由组件。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="include-和-exclude-属性" tabindex="-1"><code>include</code> 和 <code>exclude</code> 属性： <a class="header-anchor" href="#include-和-exclude-属性" aria-label="Permalink to &quot;\`include\` 和 \`exclude\` 属性：&quot;">​</a></h4><p><code>keep-alive</code> 提供了 <code>include</code> 和 <code>exclude</code> 属性，用于指定需要缓存或不需要缓存的组件，匹配的是组件的<code>name</code></p><ul><li><code>include</code>：字符串或正则表达式，只有匹配的组件会被缓存。</li><li><code>exclude</code>：字符串或正则表达式，任何匹配的组件都不会被缓存。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ComponentA,ComponentB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>或使用动态绑定：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;includedComponents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">keep-alive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        includedComponents: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ComponentA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ComponentB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="生命周期钩子" tabindex="-1">生命周期钩子： <a class="header-anchor" href="#生命周期钩子" aria-label="Permalink to &quot;生命周期钩子：&quot;">​</a></h4><p>被 <code>keep-alive</code> 缓存的组件会新增两个生命周期钩子：</p><ul><li><code>activated</code>：组件被激活时调用。</li><li><code>deactivated</code>：组件被停用时调用。</li></ul><p>当组件在 <code>keep-alive</code> 中切换时，<code>activated</code> 和 <code>deactivated</code> 会代替 <code>mounted</code> 和 <code>unmounted</code> 执行。</p><h4 id="使用场景" tabindex="-1">使用场景： <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景：&quot;">​</a></h4><ul><li><strong>频繁切换的标签页</strong>： 例如电商网站的商品分类、后台管理系统的菜单等。</li><li><strong>需要保留状态的表单</strong>： 例如分步填写的表单，用户在填写过程中切换到其他页面，返回时可以继续填写。</li><li><strong>需要缓存数据的列表</strong>： 例如新闻列表、商品列表等，避免重复加载数据。</li></ul><h4 id="注意事项" tabindex="-1">注意事项： <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项：&quot;">​</a></h4><ul><li><code>keep-alive</code> 只能用于直接子组件使用了条件渲染的场景。如果组件是通过 <code>v-for</code> 渲染的，<code>keep-alive</code> 无法正常工作。</li><li>过度使用 <code>keep-alive</code> 可能会导致内存占用过高，需要根据实际情况进行权衡。</li></ul>`,20)]))}const c=i(t,[["render",n]]);export{o as __pageData,c as default};
