import{_ as t,c as n,o as p,j as i,ae as h,a,t as e}from"./chunks/framework.Cthp9TdA.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"04_vue/Vue是如何收集依赖的？.md","filePath":"04_vue/Vue是如何收集依赖的？.md"}'),k={name:"04_vue/Vue是如何收集依赖的？.md"};function r(l,s,E,d,o,g){return p(),n("div",null,[s[7]||(s[7]=i("h4",{id:"什么是依赖收集",tabindex:"-1"},[a("什么是依赖收集？ "),i("a",{class:"header-anchor",href:"#什么是依赖收集","aria-label":'Permalink to "什么是依赖收集？"'},"​")],-1)),i("p",null,[s[0]||(s[0]=a("在 Vue 中，当我们使用模板语法（如 ")),i("code",null,e(l.message),1),s[1]||(s[1]=a("）或者计算属性时，Vue 会自动追踪哪些模板或计算属性依赖了哪些数据。这个追踪的过程就是依赖收集。一旦被依赖的数据发生变化，Vue 就能精准地找到并更新相关的视图。"))]),s[8]||(s[8]=h(`<h4 id="依赖收集的过程" tabindex="-1">依赖收集的过程 <a class="header-anchor" href="#依赖收集的过程" aria-label="Permalink to &quot;依赖收集的过程&quot;">​</a></h4><ol><li>数据劫持： <ol><li>Vue 在初始化数据时，会对数据的每个属性使用 <code>Object.defineProperty</code> 进行劫持，为每个属性添加 getter 和 setter。</li><li>当我们访问一个属性时，触发 getter，此时会创建一个 Dep 实例（依赖收集器），并把当前执行的 Watcher（观察者）添加到 Dep 的订阅者列表中。</li><li>当我们修改一个属性时，触发 setter，Dep 会通知所有订阅者，触发视图更新。</li></ol></li><li>Watcher： <ol><li>Watcher 是一个观察者，它会订阅一个或多个属性。</li><li>当订阅的属性发生变化时，Watcher 会收到通知，并执行相应的回调函数，从而触发视图更新。</li><li>Vue 中有三种类型的 Watcher： <ol><li>渲染 Watcher：用于跟踪模板中的数据变化，触发组件的重新渲染。</li><li>计算属性 Watcher：用于计算属性的依赖收集和更新。</li><li>侦听器 Watcher：用于监听某个事件，触发回调函数。</li></ol></li></ol></li><li>Dep： <ol><li>Dep 是一个依赖收集器，它负责收集依赖这个属性的所有 Watcher。</li><li>当属性的值发生变化时，Dep 会通知所有订阅者。</li></ol></li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Vue!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>当组件初始化时，Vue 会：</p>`,4)),i("ol",null,[s[4]||(s[4]=i("li",null,[a("劫持 "),i("code",null,"message"),a(" 属性。")],-1)),i("li",null,[s[2]||(s[2]=a("创建一个渲染 Watcher，用于跟踪模板中 ")),i("code",null,e(l.message),1),s[3]||(s[3]=a(" 的变化。"))]),s[5]||(s[5]=i("li",null,[a("当渲染 Watcher 访问 "),i("code",null,"message"),a(" 时，会触发 getter，将自己添加到 "),i("code",null,"message"),a(" 属性对应的 Dep 的订阅者列表中。")],-1)),s[6]||(s[6]=i("li",null,[a("当 "),i("code",null,"message"),a(" 的值发生变化时，Dep 会通知渲染 Watcher，触发组件的重新渲染。")],-1))]),s[9]||(s[9]=i("h4",{id:"总结",tabindex:"-1"},[a("总结 "),i("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1)),s[10]||(s[10]=i("p",null,"Vue 的依赖收集机制，通过数据劫持、Watcher 和 Dep 的协作，实现了高效的响应式系统。当数据发生变化时，Vue 能精准地定位到需要更新的视图，从而保证数据和视图的一致性。",-1))])}const m=t(k,[["render",r]]);export{y as __pageData,m as default};
