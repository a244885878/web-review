import{_ as e,c as o,o as a,ae as i}from"./chunks/framework.Cthp9TdA.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"07_浏览器/Cookie、LocalStorage、SessionStorage区别.md","filePath":"07_浏览器/Cookie、LocalStorage、SessionStorage区别.md"}'),d={name:"07_浏览器/Cookie、LocalStorage、SessionStorage区别.md"};function l(r,t,s,c,n,S){return a(),o("div",null,t[0]||(t[0]=[i('<blockquote><p>Cookie、LocalStorage 和 SessionStorage 都是 Web 存储技术，用于在用户的浏览器中存储数据。它们之间有一些关键的区别，主要体现在存储位置、生命周期、作用域和容量等方面。下面我将详细地对比它们：</p></blockquote><h4 id="_1-存储位置" tabindex="-1">1. 存储位置： <a class="header-anchor" href="#_1-存储位置" aria-label="Permalink to &quot;1. 存储位置：&quot;">​</a></h4><ul><li>Cookie： 存储在客户端（用户的浏览器）和服务器端。每次 HTTP 请求，Cookie 都会在浏览器和服务器之间来回传递。</li><li>LocalStorage： 仅存储在客户端（用户的浏览器）。数据不会自动发送到服务器。</li><li>SessionStorage： 也仅存储在客户端（用户的浏览器）。数据同样不会自动发送到服务器。</li></ul><h4 id="_2-生命周期" tabindex="-1">2. 生命周期： <a class="header-anchor" href="#_2-生命周期" aria-label="Permalink to &quot;2. 生命周期：&quot;">​</a></h4><ul><li>Cookie： 生命周期由服务器在设置 Cookie 时决定。可以设置为在浏览器关闭后过期，也可以设置为在未来的某个时间过期。</li><li>LocalStorage： 数据会永久存储在用户的浏览器中，直到用户手动清除，或者通过 JavaScript 代码清除。即使浏览器关闭、重新打开，数据仍然存在。</li><li>SessionStorage： 数据的生命周期与浏览器会话（Session）相关联。当用户关闭浏览器窗口或标签页时，SessionStorage 中存储的数据会被清除。</li></ul><h4 id="_3-作用域" tabindex="-1">3. 作用域： <a class="header-anchor" href="#_3-作用域" aria-label="Permalink to &quot;3. 作用域：&quot;">​</a></h4><ul><li>Cookie： 作用域受域名、路径和安全标志的影响。同源的窗口可以共享 Cookie。</li><li>LocalStorage： 同源的窗口可以共享 LocalStorage 中的数据。</li><li>SessionStorage： 仅在创建它的窗口或标签页中有效。即使是同一个页面在不同的标签页中打开，它们之间的 SessionStorage 也是相互独立的。</li></ul><h4 id="_4-容量" tabindex="-1">4. 容量： <a class="header-anchor" href="#_4-容量" aria-label="Permalink to &quot;4. 容量：&quot;">​</a></h4><ul><li>Cookie： 容量较小，通常为 4KB 左右。</li><li>LocalStorage： 容量较大，通常为 5MB 左右。</li><li>SessionStorage： 容量也较大，通常为 5MB 左右。</li></ul><h4 id="_5-其他区别" tabindex="-1">5. 其他区别： <a class="header-anchor" href="#_5-其他区别" aria-label="Permalink to &quot;5. 其他区别：&quot;">​</a></h4><ul><li>API 接口： <code>LocalStorage</code> 和 <code>SessionStorage</code> 提供了更简洁易用的 API 接口（例如 <code>setItem()</code>、<code>getItem()</code> 等）。</li><li>安全性： 由于 Cookie 会在 HTTP 请求中传输，因此存在一定的安全风险。而 <code>LocalStorage</code> 和 <code>SessionStorage</code> 不会自动发送到服务器，相对更安全一些。</li></ul><h4 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th>Cookie</th><th>LocalStorage</th><th>SessionStorage</th></tr></thead><tbody><tr><td>存储位置</td><td>客户端和服务器端</td><td>客户端</td><td>客户端</td></tr><tr><td>生命周期</td><td>可配置，可持久或会话级别</td><td>永久，除非手动清除</td><td>仅在当前会话有效，关闭窗口即清除</td></tr><tr><td>作用域</td><td>同源窗口共享</td><td>同源窗口共享</td><td>仅在当前窗口/标签页有效</td></tr><tr><td>容量</td><td>小（约 4KB）</td><td>大（约 5MB）</td><td>大（约 5MB）</td></tr><tr><td>数据传输</td><td>每次 HTTP 请求都会携带</td><td>不会自动发送到服务器</td><td>不会自动发送到服务器</td></tr><tr><td>安全性</td><td>存在安全风险</td><td>相对安全</td><td>相对安全</td></tr><tr><td>API 接口</td><td>相对复杂</td><td>简洁易用</td><td>简洁易用</td></tr></tbody></table><h4 id="应用场景" tabindex="-1">应用场景： <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景：&quot;">​</a></h4><ul><li>Cookie： 常用于存储用户登录状态（例如 Session ID 或 Token）、跟踪用户行为等。</li><li>LocalStorage： 适用于存储一些不需要频繁变动的数据，例如用户偏好设置、离线数据缓存等，可以减轻服务器的压力。</li><li>SessionStorage： 适用于存储一些临时性的数据，例如表单填写过程中的数据、页面间的临时数据传递等。</li></ul>',15)]))}const u=e(d,[["render",l]]);export{_ as __pageData,u as default};
