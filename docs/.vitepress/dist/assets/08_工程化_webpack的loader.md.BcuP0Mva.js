import{_ as s,c as i,o as l,ae as e}from"./chunks/framework.Cthp9TdA.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"08_工程化/webpack的loader.md","filePath":"08_工程化/webpack的loader.md"}'),n={name:"08_工程化/webpack的loader.md"};function t(h,a,p,r,k,d){return l(),i("div",null,a[0]||(a[0]=[e(`<h4 id="什么是-webpack-loader" tabindex="-1">什么是 webpack loader？ <a class="header-anchor" href="#什么是-webpack-loader" aria-label="Permalink to &quot;什么是 webpack loader？&quot;">​</a></h4><blockquote><p>loader 本质上是导出一个函数的 JavaScript 模块。loader 用于转换某些类型的模块，并且在打包构建过程可以链式调用。</p></blockquote><h4 id="loader-的作用" tabindex="-1">loader 的作用 <a class="header-anchor" href="#loader-的作用" aria-label="Permalink to &quot;loader 的作用&quot;">​</a></h4><p>在 webpack 中，所有的文件都可以被当做模块来处理，但是 webpack 自身只理解 <code>JavaScript</code> 模块，对于其他类型的文件（例如 CSS、图片、字体等），webpack 并不知道如何处理，这时就需要 loader 来将这些文件转换成 webpack 可以理解的模块。</p><h4 id="loader-的特点" tabindex="-1">loader 的特点 <a class="header-anchor" href="#loader-的特点" aria-label="Permalink to &quot;loader 的特点&quot;">​</a></h4><ul><li>转换模块：loader 可以将各种类型的文件转换为 webpack 可以处理的模块。</li><li>链式调用：多个 loader 可以串联在一起使用，一个 loader 的输出可以作为下一个 loader 的输入。</li><li>模块化：loader 本身也是一个模块，可以方便地复用和共享。</li></ul><h4 id="在-webpack-配置文件中配置-loader" tabindex="-1">在 webpack 配置文件中配置 loader <a class="header-anchor" href="#在-webpack-配置文件中配置-loader" aria-label="Permalink to &quot;在 webpack 配置文件中配置 loader&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 匹配以 .css 结尾的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;style-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 CSS 插入到 HTML 中</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;css-loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析 CSS 文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="loader-的类型" tabindex="-1">loader 的类型 <a class="header-anchor" href="#loader-的类型" aria-label="Permalink to &quot;loader 的类型&quot;">​</a></h4><p>loader 可以分为以下几种类型：</p><ul><li>编译 loader：将源文件编译成 JavaScript 代码，例如 babel-loader、ts-loader 等。</li><li>转换 loader：将源文件转换成另一种格式的文件，例如 css-loader、less-loader 等。</li><li>文件 loader：将文件复制到输出目录，并返回文件的 URL，例如 file-loader、url-loader 等。</li></ul><h4 id="loader-的本质" tabindex="-1">loader 的本质 <a class="header-anchor" href="#loader-的本质" aria-label="Permalink to &quot;loader 的本质&quot;">​</a></h4><p>loader 本质上是一个 Node.js 模块，它导出一个函数，该函数接收源文件的内容作为参数，并返回转换后的内容。</p><p>一个简单的 loader 可以这样编写:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // source: 源文件的内容，类型为字符串或 Buffer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... 对源文件内容进行处理 ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例：将 &quot;hello&quot; 替换为 &quot;world&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回处理后的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="常见的-loader" tabindex="-1">常见的 loader <a class="header-anchor" href="#常见的-loader" aria-label="Permalink to &quot;常见的 loader&quot;">​</a></h4><ul><li>babel-loader：使用 Babel 转译 JavaScript。</li><li>css-loader：加载 CSS 文件，将 CSS 转换为 JavaScript 模块，从而通过 JavaScript 来控制样式的加载。</li><li>style-loader：将 CSS 模块的导出内容插入到 HTML 页面中的 <code>&lt;style&gt;</code> 标签中，从而使样式生效。</li><li>less-loader：加载 LESS 文件，将其编译为 CSS。</li><li>sass-loader：加载 Sass 文件，将其编译为 CSS。</li><li>url-loader：加载文件，如果文件体积小于指定限制，则将文件转换为 base64 编码的 Data URL，否则使用 file-loader 将文件复制到输出目录。</li><li>file-loader：加载文件，将其复制到输出目录，并返回文件的 URL。</li><li>ts-loader：使用 TypeScript 编译器编译 TypeScript 文件。</li><li>eslint-loader：使用 ESLint 检查 JavaScript 代码风格和语法错误。</li><li>image-webpack-loader：压缩图片文件。</li><li>html-loader：加载 HTML 文件。</li><li>raw-loader：加载文件，并将其内容作为字符串返回。</li><li>markdown-loader：加载 Markdown 文件，将其转换为 HTML。</li></ul>`,17)]))}const c=s(n,[["render",t]]);export{E as __pageData,c as default};
