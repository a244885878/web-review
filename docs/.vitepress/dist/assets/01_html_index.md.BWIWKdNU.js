import{_ as i,c as e,o as s,ae as a}from"./chunks/framework.Cthp9TdA.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"01_html/index.md","filePath":"01_html/index.md"}'),o={name:"01_html/index.md"};function l(n,t,h,r,p,c){return s(),e("div",null,t[0]||(t[0]=[a(`<h4 id="doctype-声明和严格模式" tabindex="-1">&lt;!DOCTYPE&gt;声明和严格模式 <a class="header-anchor" href="#doctype-声明和严格模式" aria-label="Permalink to &quot;&lt;!DOCTYPE&gt;声明和严格模式&quot;">​</a></h4><blockquote><p><code>&lt;!DOCTYPE&gt;</code>声明必须是 HTML 文档的第一行，位于<code>&lt;html&gt;</code>标签之前。它不是 HTML 标签；他的作用是告诉浏览器的解析器用什么文档类型规范来解析这个文档。</p></blockquote><blockquote><p>严格模式是浏览器根据 web 标准去解析页面，是一种要求严格的 DTD，不允许使用任何表现层的语法；在混杂模式中，页面以宽松的向后兼容的方式展示。模拟老式浏览器的行为以防止站点无法工作。</p></blockquote><h4 id="src-和-href-的区别" tabindex="-1">src 和 href 的区别 <a class="header-anchor" href="#src-和-href-的区别" aria-label="Permalink to &quot;src 和 href 的区别&quot;">​</a></h4><ol><li><strong>href：</strong><blockquote><p>Hypertext Reference 的缩写，中文是超文本引用。指向一些网络资源，用来建立和当前文档或 者元素的链接关系。在加载该资源时，不会阻塞当前文档的处理。在 a,link 标签常用。当浏览器加载到 link 标签时，会识别这是 CSS 文档，并行下载该 CSS 文档，但并不会停止对当前页面后续内容的加载。这也是不建议使用@import 加载 CSS 的原因。</p></blockquote></li><li><strong>src：</strong><blockquote><p>source 的缩写。表示对资源的引用，指向的内容会用来嵌入到其所在的标签，也就是替换元素。由于 src 的内容是页面必不可少的一部分，因此浏览器在解析 src 时会停下来对后续文档的处理，直到 src 的内容加载完毕。常用在 script、img、iframe 标签中，我们建议 js 文件放在 HTML 文档的最后面。如果 js 文件放在了 head 标签中，可以使用 window.onload 实现 js 的最后加载。</p></blockquote></li></ol><p>总结：href 用于建立当前页面与引用资源之间的关系（链接），而 src 则会替换当前标签。遇到 href，页面会并行加载后续内容；而 src 则不同，浏览器需要加载完毕 src 的内容才会继续往下走。</p><h4 id="script-标签的-defer-和-async-的区别" tabindex="-1">script 标签的 defer 和 async 的区别 <a class="header-anchor" href="#script-标签的-defer-和-async-的区别" aria-label="Permalink to &quot;script 标签的 defer 和 async 的区别&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../js/let var const的区别.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;               </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 会阻断html加载，所以一般要放在最底部，否则资源过大的话会造成页面白屏 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../js/let var const的区别.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;         </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 异步的加载html，可能会阻断html加载，取决于加载资源的速度 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../js/let var const的区别.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;         </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 完全不会阻断加载html，html加载完成后才会加载script </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span></code></pre></div><blockquote><p>defer 和 async 的共同点是都是可以并行加载 JS 文件，不会阻塞页面的加载，不同点是 defer 的加载完成之后，JS 会等待整个页面全部加载完成了再执行，而 async 是加载完成之后，会马上执行 JS，所以假如对 JS 的执行有严格顺序的话，那么建议用 defer 加载。</p></blockquote><h4 id="iframe-的优缺点" tabindex="-1">iframe 的优缺点 <a class="header-anchor" href="#iframe-的优缺点" aria-label="Permalink to &quot;iframe 的优缺点&quot;">​</a></h4><p><strong>iframe 的优点：</strong></p><ol><li>iframe 能够原封不动的把嵌入的网页展现出来。</li><li>如果有多个网页引用 iframe，那么你只需要修改 iframe 的内容，就可以实现调用的每一个页面内容的更改，方便快捷。</li><li>网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用 iframe 来嵌套，可以增加代码的可重用。</li><li>如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由 iframe 来解决。</li></ol><p><strong>iframe 的缺点：</strong></p><ol><li>会产生很多页面，不容易管理。</li><li>iframe 框架结构有时会让人感到迷惑，如果框架个数多的话，可能会出现上下、左右滚动条，会分散访问者的注意力，用户体验度差。</li><li>代码复杂，无法被一些搜索引擎索引到，这一点很关键，现在的搜索引擎爬虫还不能很好的处理 iframe 中的内容，所以使用 iframe 会不利于搜索引擎优化。</li><li>很多的移动设备（PDA 手机）无法完全显示框架，设备兼容性差。</li><li>iframe 框架页面会增加服务器的 http 请求，对于大型网站是不可取的。</li></ol><h4 id="如何理解-html-语义化标签" tabindex="-1">如何理解 html 语义化标签 <a class="header-anchor" href="#如何理解-html-语义化标签" aria-label="Permalink to &quot;如何理解 html 语义化标签&quot;">​</a></h4><blockquote><p>让人更容易读懂，让搜索引擎更容易读懂，有助于爬虫更好的抓取关键信息，爬虫依赖于标签来确定上下文和各个关键字的权重(SEO)，在没有 CSS 的情况下，页面也能更好的内容结构，代码结构</p></blockquote><h4 id="html-中-meta-标签的理解" tabindex="-1">HTML 中 meta 标签的理解 <a class="header-anchor" href="#html-中-meta-标签的理解" aria-label="Permalink to &quot;HTML 中 meta 标签的理解&quot;">​</a></h4><p>中文名叫元数据，是用于描述数据的数据。它不会显示在页面上，但是机器却可以识别。这么一来 meta 标签的作用方式就很好理解了。</p><p>meta 常用于定义页面的说明，关键字，最后修改日期，和其它的元数据。这些元数据将服务于浏览器（如何布局或重载页面），搜索引擎和其它网络服务。</p><ol><li><p><strong>name 属性</strong></p><blockquote><p>name 属性主要用于描述网页，比如网页的关键词，叙述等。与之对应的属性值为 content，content 中的内容是对 name 填入类型的具体描述，便于搜索引擎抓取。 meta 标签中 name 属性语法格式是：<code>&lt;meta name=&quot;参数&quot; content=&quot;具体的描述&quot;&gt;。</code>其中 name 属性共有以下几种参数。</p></blockquote><ol><li>keywords(关键字)，用于告诉搜索引擎，你网页的关键字。<code>&lt;meta name=&quot;keywords&quot; content=&quot;Lxxyx,博客，文科生，前端&quot;&gt;</code></li><li>description(网站内容的描述)，用于告诉搜索引擎，你网站的主要内容。 <code>&lt;meta name=&quot;description&quot; content=&quot;文科生，热爱前端与编程。目前大二，这是我的前端博客&quot;&gt;</code></li><li>viewport(移动端的窗口)，这个属性常用于设计移动端网页。在用 bootstrap,AmazeUI 等框架时候都有用过 viewport。<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</code></li><li>robots(定义搜索引擎爬虫的索引方式)，说明：robots 用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content 的参数有 all,none,index,noindex,follow,nofollow。默认是 all。<code>&lt;meta name=&quot;robots&quot; content=&quot;none&quot;&gt;</code>，具体参数如下： <ol><li>none : 搜索引擎将忽略此网页，等价于 noindex，nofollow。</li><li>noindex : 搜索引擎不索引此网页。</li><li>nofollow: 搜索引擎不继续通过此网页的链接索引搜索其它的网页。</li><li>all : 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于 index，follow。</li><li>index : 搜索引擎索引此网页。</li><li>follow : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</li></ol></li><li>author(作者)，用于标注网页作者，<code>&lt;meta name=&quot;author&quot; content=&quot;Lxxyx,841380530@qq.com&quot;&gt;</code></li><li>copyright(版权)，用于标注版权信息，<code>&lt;meta name=&quot;copyright&quot; content=&quot;Lxxyx&quot;&gt;</code>代表该网站为 Lxxyx 个人版权所有。</li></ol></li><li><p><strong>http-equiv 属性</strong></p><blockquote><p>http-equiv 顾名思义，相当于 http 的文件头作用。这个我所认为的 http-equiv 意思的简介：相当于 HTTP 的作用，比如说定义些 HTTP 参数啥的。meta 标签中 http-equiv 属性语法格式是：<code>&lt;meta http-equiv=&quot;参数&quot; content=&quot;具体的描述&quot;</code>其中 http-equiv 属性主要有以下几种参数：</p></blockquote><ol><li>content-Type(设定网页字符集)(推荐使用 HTML5 的方式),<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>，HTML5 设定网页字符集的方式，推荐使用 UTF-8</li><li>X-UA-Compatible(浏览器采取何种版本渲染当前页面)， <code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;/&gt;</code> ，指定 IE 和 Chrome 使用最新版本渲染当前</li><li>cache-control(指定请求和响应遵循的缓存机制)，<code>&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;</code>共有以下几种用法： <ol><li>no-cache: 先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。</li><li>no-store: 不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施）</li><li>public : 缓存所有响应，但并非必须。因为 max-age 也可以做到相同效果</li><li>private : 只为单个用户缓存，因此不允许任何中继进行缓存。（比如说 CDN 就不允许缓存 private 的响应）</li><li>maxage : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。例如：max-age=60 表示响应可以再缓存和重用 60 秒。</li></ol></li><li>expires(网页到期时间)，用于设定网页的到期时间，过期后网页必须到服务器上重新传输。<code>&lt;meta http-equiv=&quot;expires&quot; content=&quot;Sunday 26 October 2016 01:00 GMT&quot; /&gt;</code></li><li>refresh(自动刷新并指向某页面)，网页将在设定的时间内，自动刷新并调向设定的网址。<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;2;URL=http://www.lxxyx.win/&quot;&gt;</code>意思是 2 秒后跳转向这个 url 页面</li><li>Set-Cookie(cookie 设定)，如果网页过期。那么这个网页存在本地的 cookies 也会被自动删除。<code>&lt;meta http-equiv=&quot;Set-Cookie&quot; content=&quot;name, date&quot;&gt;</code>，<code>&lt;meta http-equiv=&quot;Set-Cookie&quot; content=&quot;User=Lxxyx; path=/; expires=Sunday, 10-Jan-16 10:00:00 GMT&quot;&gt; </code></li></ol></li></ol>`,20)]))}const u=i(o,[["render",l]]);export{k as __pageData,u as default};
