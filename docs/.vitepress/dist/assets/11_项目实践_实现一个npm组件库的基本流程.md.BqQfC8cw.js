import{_ as i,c as a,o as e,ae as l}from"./chunks/framework.Cthp9TdA.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"11_项目实践/实现一个npm组件库的基本流程.md","filePath":"11_项目实践/实现一个npm组件库的基本流程.md"}'),t={name:"11_项目实践/实现一个npm组件库的基本流程.md"};function n(h,s,p,d,o,c){return e(),a("div",null,s[0]||(s[0]=[l(`<h4 id="项目内" tabindex="-1">项目内 <a class="header-anchor" href="#项目内" aria-label="Permalink to &quot;项目内&quot;">​</a></h4><ol><li>公共的组件放在 <code>/src/components</code>下</li><li>公共的方法可以放在 <code>/src/utils</code>下</li><li>在<code>/src</code>目录创建一个 <code>index.js</code> 文件用来暴露公共的方法和组件</li></ol><h4 id="打包配置" tabindex="-1">打包配置 <a class="header-anchor" href="#打包配置" aria-label="Permalink to &quot;打包配置&quot;">​</a></h4><p>在<code>package.json</code>文件中配置打包成<code>lib</code>的命令，目录指向统一暴露的文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;build-lib&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue-cli-service build --target lib --dest lib src/index.js&quot;,</span></span></code></pre></div><p>指定当前库的版本号</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;version&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0.1.0&quot;</span></span></code></pre></div><p>执行<code>build-lib</code>命令后会生成一个<code>lib</code>文件夹，配置该项目的入口</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;main&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lib/star-common.umd.min.js&quot;</span></span></code></pre></div><p>指定 npm 包能拉取的文件配置(如果需要暴露整个项目可以不配置)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;files&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;lib/&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  &quot;README.md&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span></code></pre></div><h4 id="发布-npm" tabindex="-1">发布 npm <a class="header-anchor" href="#发布-npm" aria-label="Permalink to &quot;发布 npm&quot;">​</a></h4><ol><li>注册 npm 账号</li><li>配置 npm 源 为避免使用淘宝镜像（通常不支持发包），建议将 registry 设置为官方地址：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://registry.npmjs.org</span></span></code></pre></div><ol start="3"><li>登录 npm</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div><p>或者</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> adduser</span></span></code></pre></div><p>根据提示输入用户名、密码和邮箱即可。</p><ol start="4"><li>发布包 发布前请再次确认 package.json 中的各项配置无误，然后执行：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span></span></code></pre></div><ol start="5"><li>更新包 每次修改代码后，如果需要更新发布的版本，必须修改 package.json 中的 version 字段。建议遵循语义化版本管理规则：</li></ol><ul><li>patch：修复小 bug（最后一位数字递增）</li><li>minor：新增向下兼容的功能（中间位递增）</li><li>major：大改动，不向下兼容（首位数字递增） 可通过命令更新版本，例如：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch</span></span></code></pre></div><p>更新版本后，再执行 <code>npm publish</code> 即可。</p><h5 id="配置私有仓库地址" tabindex="-1">配置私有仓库地址 <a class="header-anchor" href="#配置私有仓库地址" aria-label="Permalink to &quot;配置私有仓库地址&quot;">​</a></h5><ul><li>全局设置 如果你希望所有 npm 操作（安装、发布等）都使用你的私有仓库，可以在终端中执行：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://your-private-registry-address</span></span></code></pre></div><ul><li>项目级配置 如果只想针对某个项目使用私有仓库，可以在项目根目录下创建（或编辑）一个 <code>.npmrc</code> 文件，内容写入：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">registry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://your-private-registry-address</span></span></code></pre></div><ul><li>登录私有仓库 在配置好私有仓库地址后，需要登录才能进行发布。执行下面的命令并输入你的用户名、密码和邮箱：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --registry=http://your-private-registry-address</span></span></code></pre></div><p>最后还是<code>npm publish</code>发布即可</p><h4 id="其他项目使用该-npm-包" tabindex="-1">其他项目使用该 npm 包 <a class="header-anchor" href="#其他项目使用该-npm-包" aria-label="Permalink to &quot;其他项目使用该 npm 包&quot;">​</a></h4><h5 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h5 id="引入" tabindex="-1">引入 <a class="header-anchor" href="#引入" aria-label="Permalink to &quot;引入&quot;">​</a></h5><p>在<code>main.js</code>引入打包后的 css 文件</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;star-common/lib/star-common.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>在需要引入组件或方法的地方引入</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { commonMixins, NewMultipleSelect, CascaderCheckAll } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="如何调试未发布的-npm-包" tabindex="-1">如何调试未发布的 npm 包 <a class="header-anchor" href="#如何调试未发布的-npm-包" aria-label="Permalink to &quot;如何调试未发布的 npm 包&quot;">​</a></h4><p>在开发过程中，调试尚未发布的 npm 包是常见需求。以下是两种常用的方法：</p><h5 id="_1-使用-npm-link" tabindex="-1">1. 使用 npm link： <a class="header-anchor" href="#_1-使用-npm-link" aria-label="Permalink to &quot;1. 使用 npm link：&quot;">​</a></h5><p><code>npm link</code> 允许你在本地开发的 npm 包与其他项目之间建立符号链接，方便调试。</p><h5 id="步骤" tabindex="-1">步骤： <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤：&quot;">​</a></h5><ol><li>在 npm 包项目中： <ol><li>进入包的根目录。</li><li>执行 <code>npm link</code>，将包链接到全局 <code>node_modules</code>。</li></ol></li><li>在目标项目中： <ol><li>进入项目根目录。</li><li>执行 <code>npm link &lt;包名&gt;</code>，将全局链接的包链接到项目的 <code>node_modules</code>。</li></ol></li><li>在项目中使用该包： <ol><li>正常引入并使用该包。</li></ol></li></ol><h5 id="注意事项" tabindex="-1">注意事项： <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项：&quot;">​</a></h5><ul><li>使用 <code>npm link</code> 时，确保全局和项目的 <code>node_modules</code> 中没有同名的包，以避免冲突。</li><li>在调试完成后，使用 <code>npm unlink</code> 解除链接。</li></ul><h4 id="_2-使用-yalc" tabindex="-1">2. 使用 yalc： <a class="header-anchor" href="#_2-使用-yalc" aria-label="Permalink to &quot;2. 使用 yalc：&quot;">​</a></h4><p><code>yalc</code> 是一个本地包管理工具，允许你在本地发布和管理 npm 包，避免了 <code>npm link</code> 的一些潜在问题。</p><h5 id="全局安装-yalc" tabindex="-1">全局安装 yalc： <a class="header-anchor" href="#全局安装-yalc" aria-label="Permalink to &quot;全局安装 yalc：&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yalc</span></span></code></pre></div><h5 id="在-npm-包项目中" tabindex="-1">在 npm 包项目中： <a class="header-anchor" href="#在-npm-包项目中" aria-label="Permalink to &quot;在 npm 包项目中：&quot;">​</a></h5><ul><li>进入包的根目录。</li><li>执行 <code>yalc publish</code>，将包发布到本地存储库。</li></ul><h5 id="在目标项目中" tabindex="-1">在目标项目中： <a class="header-anchor" href="#在目标项目中" aria-label="Permalink to &quot;在目标项目中：&quot;">​</a></h5><ul><li>进入项目根目录。</li><li>执行 <code>yalc add &lt;包名&gt;</code>，将本地包添加到项目的 <code>node_modules</code>。</li></ul><h5 id="在项目中使用该包" tabindex="-1">在项目中使用该包： <a class="header-anchor" href="#在项目中使用该包" aria-label="Permalink to &quot;在项目中使用该包：&quot;">​</a></h5><p>正常引入并使用该包。</p><h5 id="注意事项-1" tabindex="-1">注意事项： <a class="header-anchor" href="#注意事项-1" aria-label="Permalink to &quot;注意事项：&quot;">​</a></h5><ul><li>使用 <code>yalc</code> 时，包的版本号应与目标项目的依赖版本一致。</li><li>在调试完成后，使用 <code>yalc remove &lt;包名&gt;</code> 解除依赖。</li></ul>`,61)]))}const g=i(t,[["render",n]]);export{k as __pageData,g as default};
