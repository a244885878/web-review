import{_ as i,c as a,o as t,ae as l}from"./chunks/framework.Cthp9TdA.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"03_js/require和import的区别.md","filePath":"03_js/require和import的区别.md"}'),n={name:"03_js/require和import的区别.md"};function e(h,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[l(`<blockquote><p>在 JavaScript 中，require 和 import 都用于模块导入，但二者有本质区别，主要体现在以下几个方面：</p></blockquote><h4 id="_1-规范来源不同" tabindex="-1">1. 规范来源不同 <a class="header-anchor" href="#_1-规范来源不同" aria-label="Permalink to &quot;1. 规范来源不同&quot;">​</a></h4><ul><li>require 属于 CommonJS 规范，是 Node.js 默认的模块系统（非浏览器环境）。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CommonJS</span></span></code></pre></div><ul><li>import</li></ul><p>属于 ES Modules (ESM) 规范，是 ECMAScript 2015 (ES6) 的标准模块系统，适用于现代浏览器和 Node.js（需配置支持）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ES Modules</span></span></code></pre></div><h4 id="_2-加载方式" tabindex="-1">2. 加载方式 <a class="header-anchor" href="#_2-加载方式" aria-label="Permalink to &quot;2. 加载方式&quot;">​</a></h4><ul><li>require <ul><li>动态加载：在代码运行时按需加载模块。</li><li>可以写在代码块中（如条件语句、函数内）。</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>import <ul><li>静态加载：在代码编译阶段解析依赖，提升到模块顶部（类似 <code>const</code>）。</li><li>必须写在模块顶层，不能动态使用（但可通过 <code>import()</code> 动态导入）。</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 静态导入（必须顶层）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 动态导入（返回 Promise）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (condition) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_3-导出与导入语法" tabindex="-1">3. 导出与导入语法 <a class="header-anchor" href="#_3-导出与导入语法" aria-label="Permalink to &quot;3. 导出与导入语法&quot;">​</a></h4><ul><li>require <ul><li>导出：<code>module.exports</code> 或 <code>exports</code>。</li><li>导入：直接获取导出对象。</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;foo&#39;</span></span></code></pre></div><ul><li>import <ul><li>导出：<code>export</code> 或 <code>export default</code>。</li><li>导入：支持按需导入、别名、全量导入等灵活语法。</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认导出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./module&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 全量导入</span></span></code></pre></div><h4 id="_4-模块导出值的本质" tabindex="-1">4. 模块导出值的本质 <a class="header-anchor" href="#_4-模块导出值的本质" aria-label="Permalink to &quot;4. 模块导出值的本质&quot;">​</a></h4><ul><li>require <ul><li>导出的是值的浅拷贝（对于引用类型是共享的）。</li><li>允许在导入后修改模块内部状态（不推荐）。</li></ul></li></ul><ul><li>import <ul><li>导出的是值的只读引用（类似 <code>const</code> 声明）。</li><li>严格模式下修改导入值会报错。</li></ul></li></ul><h4 id="_5-循环依赖处理" tabindex="-1">5. 循环依赖处理 <a class="header-anchor" href="#_5-循环依赖处理" aria-label="Permalink to &quot;5. 循环依赖处理&quot;">​</a></h4><ul><li>require 动态加载可能导致循环依赖处理不够直观，未完成的模块可能被提前引用。</li></ul><ul><li>import 静态分析使得循环依赖更容易被检测和处理，但需谨慎设计代码结构。</li></ul><h4 id="_6-环境支持" tabindex="-1">6. 环境支持 <a class="header-anchor" href="#_6-环境支持" aria-label="Permalink to &quot;6. 环境支持&quot;">​</a></h4><ul><li>require Node.js 原生支持，浏览器需通过工具（如 Webpack、Browserify）转换。</li></ul><ul><li>import 现代浏览器原生支持，Node.js 需在 <code>package.json</code> 中设置 <code>&quot;type&quot;: &quot;module&quot;</code> 或使用 .mjs 扩展名。</li></ul><h4 id="_7-性能优化" tabindex="-1">7. 性能优化 <a class="header-anchor" href="#_7-性能优化" aria-label="Permalink to &quot;7. 性能优化&quot;">​</a></h4><ul><li>require 动态加载不利于静态分析和 Tree Shaking（删除未使用代码）。</li></ul><ul><li>import 静态特性使得打包工具（如 Webpack）能进行 Tree Shaking，优化代码体积。</li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th><code>require</code> (CommonJS)</th><th><code>import</code> (ES Modules)</th></tr></thead><tbody><tr><td>规范</td><td>Node.js / CommonJS</td><td>ES6 (ECMAScript Modules)</td></tr><tr><td>加载时机</td><td>运行时动态加载</td><td>编译时静态解析</td></tr><tr><td>动态导入</td><td>支持</td><td>需用 import() 函数</td></tr><tr><td>导出值类型</td><td>值的浅拷贝（可修改）</td><td>值的只读引用（不可修改）</td></tr><tr><td>语法灵活性</td><td>简单，但功能较少</td><td>灵活（按需导入、别名等）</td></tr><tr><td>循环依赖处理</td><td>可能存在问题</td><td>更安全（依赖预解析）</td></tr><tr><td>Tree Shaking</td><td>不支持</td><td>支持</td></tr><tr><td>浏览器支持</td><td>需打包工具转换</td><td>现代浏览器原生支持</td></tr><tr><td>Node.js 支持</td><td>原生支持</td><td>需配置 type: &quot;module&quot;</td></tr></tbody></table>`,31)]))}const u=i(n,[["render",e]]);export{E as __pageData,u as default};
