import{_ as i,c as a,o as t,ae as n}from"./chunks/framework.Cthp9TdA.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"03_js/节流和防抖.md","filePath":"03_js/节流和防抖.md"}'),l={name:"03_js/节流和防抖.md"};function h(e,s,k,p,r,E){return t(),a("div",null,s[0]||(s[0]=[n(`<h3 id="javascript-防抖和节流-深度解析" tabindex="-1">JavaScript 防抖和节流：深度解析 <a class="header-anchor" href="#javascript-防抖和节流-深度解析" aria-label="Permalink to &quot;JavaScript 防抖和节流：深度解析&quot;">​</a></h3><h4 id="什么是防抖和节流" tabindex="-1">什么是防抖和节流？ <a class="header-anchor" href="#什么是防抖和节流" aria-label="Permalink to &quot;什么是防抖和节流？&quot;">​</a></h4><p>防抖（Debounce） 和 节流（Throttle） 都是函数调用的优化技术，主要用于处理高频事件，例如：</p><ul><li>输入框输入时触发搜索</li><li>窗口滚动加载更多内容</li><li>鼠标移动触发动画</li></ul><p><strong>防抖</strong>：在规定时间内，函数只会执行一次，并且是在事件触发后的一段时间内。如果在这段时间内事件再次触发，则会重新计算时间。</p><p><strong>节流</strong>：在规定时间内，函数只能执行一次。如果这个时间段内事件触发多次，只有第一次会执行函数，其他的都会被忽略。</p><h4 id="为什么需要防抖和节流" tabindex="-1">为什么需要防抖和节流？ <a class="header-anchor" href="#为什么需要防抖和节流" aria-label="Permalink to &quot;为什么需要防抖和节流？&quot;">​</a></h4><ul><li>提高性能：减少不必要的函数调用，降低浏览器负载。</li><li>优化用户体验：防止频繁触发导致界面卡顿或响应延迟。</li></ul><h4 id="防抖和节流的区别" tabindex="-1">防抖和节流的区别 <a class="header-anchor" href="#防抖和节流的区别" aria-label="Permalink to &quot;防抖和节流的区别&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特点</th><th>防抖</th><th>节流</th></tr></thead><tbody><tr><td>执行时机</td><td>事件结束后的一段时间内执行一次</td><td>在规定时间内，无论事件触发多少次，都只执行一次</td></tr><tr><td>使用场景</td><td>输入框搜索、窗口 resize、按钮连续点击</td><td>滚动加载、动画、游戏中的帧率控制</td></tr></tbody></table><h4 id="实现方式" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式" aria-label="Permalink to &quot;实现方式&quot;">​</a></h4><h5 id="防抖" tabindex="-1">防抖 <a class="header-anchor" href="#防抖" aria-label="Permalink to &quot;防抖&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> debounce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeout;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    clearTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timeout);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      func.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, wait);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="节流" tabindex="-1">节流 <a class="header-anchor" href="#节流" aria-label="Permalink to &quot;节流&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> throttle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> previous </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> previous </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wait) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      previous </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      func.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h5><ul><li>防抖： <ul><li>输入框实时搜索：防止用户快速输入时频繁请求服务器。</li><li>窗口 resize 调整布局：避免频繁计算和重绘。</li><li>按钮点击提交表单：防止用户多次点击。</li></ul></li><li>节流： <ul><li>滚动加载：避免频繁发送请求。</li><li>鼠标移动触发动画：控制动画帧率。</li><li>游戏中的帧率控制：防止游戏画面卡顿。</li></ul></li></ul><h5 id="何时使用防抖" tabindex="-1">何时使用防抖？ <a class="header-anchor" href="#何时使用防抖" aria-label="Permalink to &quot;何时使用防抖？&quot;">​</a></h5><ul><li>当你希望在用户停止操作后执行一次函数时。</li></ul><h5 id="何时使用节流" tabindex="-1">何时使用节流？ <a class="header-anchor" href="#何时使用节流" aria-label="Permalink to &quot;何时使用节流？&quot;">​</a></h5><ul><li>当你希望在一定时间内限制函数的执行次数时。</li></ul>`,21)]))}const g=i(l,[["render",h]]);export{o as __pageData,g as default};
