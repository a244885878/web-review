import{_ as a,c as e,o as l,ae as r}from"./chunks/framework.Cthp9TdA.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"06_http/HTTP 3.0 .md","filePath":"06_http/HTTP 3.0 .md"}'),i={name:"06_http/HTTP 3.0 .md"};function o(d,t,T,h,n,P){return l(),e("div",null,t[0]||(t[0]=[r('<blockquote><p>HTTP/3 是最新的 HTTP 协议版本，继承了 HTTP/2，并且使用了一些新的技术来提高性能和可靠性。与 HTTP/2 相比，HTTP/3 的最大变化是它基于 QUIC（Quick UDP Internet Connections）协议，而 HTTP/1 和 HTTP/2 则基于 TCP（Transmission Control Protocol）。QUIC 是一种基于 UDP（User Datagram Protocol）设计的传输协议，具有更低的延迟、更快的连接建立速度和更好的流量控制。</p></blockquote><h3 id="http-3-的核心特性" tabindex="-1">HTTP/3 的核心特性： <a class="header-anchor" href="#http-3-的核心特性" aria-label="Permalink to &quot;HTTP/3 的核心特性：&quot;">​</a></h3><h4 id="_1-基于-quic-协议" tabindex="-1">1. 基于 QUIC 协议： <a class="header-anchor" href="#_1-基于-quic-协议" aria-label="Permalink to &quot;1. 基于 QUIC 协议：&quot;">​</a></h4><ul><li>UDP 替代 TCP：HTTP/3 的底层传输使用 QUIC（Quick UDP Internet Connections）协议，QUIC 通过 UDP 提供更加高效的连接管理。相比于传统的 TCP，QUIC 能够减少连接建立和数据传输的延迟。</li><li>加密默认启用：QUIC 默认启用了加密，相比于 TCP+TLS 的组合，它的握手过程更高效。因为 QUIC 集成了加密和传输的功能，不再需要两个独立的协议栈（TLS 和 TCP）。</li></ul><h4 id="_2-减少延迟" tabindex="-1">2. 减少延迟： <a class="header-anchor" href="#_2-减少延迟" aria-label="Permalink to &quot;2. 减少延迟：&quot;">​</a></h4><ul><li>0-RTT 连接恢复：QUIC 支持 0-RTT（零往返时间）连接恢复，当客户端重新连接到服务器时，可以在第一次握手时就开始数据传输，而无需等待完整的握手过程完成，从而减少了连接的延迟。</li><li>更快的握手：在 QUIC 中，连接建立过程减少了延迟。TCP 的连接需要 3 次握手，而 QUIC 可以通过更少的步骤完成建立。</li></ul><h4 id="_3-多路复用和流量控制" tabindex="-1">3. 多路复用和流量控制： <a class="header-anchor" href="#_3-多路复用和流量控制" aria-label="Permalink to &quot;3. 多路复用和流量控制：&quot;">​</a></h4><ul><li>改进的多路复用：HTTP/2 允许在单个连接上并行传输多个请求和响应，HTTP/3 继承并进一步优化了这一特性。QUIC 提供了更好的流量控制和数据流的分离，使得即使某个请求发生丢包，也不会影响其他请求的数据传输。</li><li>独立流处理：QUIC 中的流是独立的，数据包的丢失不会影响其他流的传输，因此可以提高吞吐量和减少延迟。</li></ul><h4 id="_4-更好的抗丢包能力" tabindex="-1">4. 更好的抗丢包能力： <a class="header-anchor" href="#_4-更好的抗丢包能力" aria-label="Permalink to &quot;4. 更好的抗丢包能力：&quot;">​</a></h4><ul><li>在 TCP 中，如果一个数据包丢失，整个连接都会受到影响，直到丢失的数据包被重新发送。而 QUIC 允许流内的独立数据包丢失不影响其他流，这使得它在丢包环境下表现得更好。</li></ul><h4 id="_5-拥塞控制和公平性" tabindex="-1">5. 拥塞控制和公平性： <a class="header-anchor" href="#_5-拥塞控制和公平性" aria-label="Permalink to &quot;5. 拥塞控制和公平性：&quot;">​</a></h4><ul><li>QUIC 提供了比 TCP 更细粒度的拥塞控制，它更适应不同网络环境下的传输需求，有助于提高数据传输的效率。</li></ul><h4 id="_6-更高的网络适应性" tabindex="-1">6. 更高的网络适应性： <a class="header-anchor" href="#_6-更高的网络适应性" aria-label="Permalink to &quot;6. 更高的网络适应性：&quot;">​</a></h4><ul><li>快速切换网络：QUIC 的设计使得它在网络环境发生变化时（如 Wi-Fi 和移动网络切换时），可以更加平滑地进行切换，而无需重新建立连接。</li></ul><h4 id="http-3-与-http-2-的比较" tabindex="-1">HTTP/3 与 HTTP/2 的比较： <a class="header-anchor" href="#http-3-与-http-2-的比较" aria-label="Permalink to &quot;HTTP/3 与 HTTP/2 的比较：&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th>HTTP/2</th><th>HTTP/3</th></tr></thead><tbody><tr><td>传输协议</td><td>TCP+TLS</td><td>QUIC (基于 UDP)</td></tr><tr><td>连接建立延迟</td><td>需要 1 RTT</td><td>0-RTT 支持，减少握手延迟</td></tr><tr><td>加密</td><td>必须使用 TLS</td><td>默认启用加密</td></tr><tr><td>多路复用</td><td>支持</td><td>支持，性能更优</td></tr><tr><td>抗丢包能力</td><td>较差</td><td>更强，独立流处理</td></tr><tr><td>网络切换支持</td><td>不够流畅</td><td>更流畅，支持快速切换</td></tr></tbody></table><h4 id="适用场景" tabindex="-1">适用场景： <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景：&quot;">​</a></h4><ul><li>高延迟网络环境：HTTP/3 的低延迟特点特别适用于移动网络和高延迟环境，能显著提高页面加载速度和用户体验。</li><li>视频流和实时应用：由于 QUIC 对抗丢包的能力很强，因此它特别适合用于视频流传输和实时通信应用。</li><li>连接频繁切换：在客户端需要频繁切换网络（如 Wi-Fi 和移动数据之间）时，HTTP/3 可以提供更好的支持。</li></ul><h4 id="支持情况" tabindex="-1">支持情况： <a class="header-anchor" href="#支持情况" aria-label="Permalink to &quot;支持情况：&quot;">​</a></h4><p>截至目前，主要的浏览器（如 Google Chrome、Mozilla Firefox、Microsoft Edge）和一些网站（如 Google 和 Cloudflare）已经开始支持 HTTP/3。对于服务器端，Nginx、LiteSpeed、Apache 等 Web 服务器也已开始逐步支持 HTTP/3。</p><h4 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h4><p>HTTP/3 在性能上相较于 HTTP/2 提供了显著的改进，特别是在减少延迟、提高连接稳定性和抗丢包能力方面。虽然它在实施上需要更多的基础设施支持（如 QUIC 协议的支持），但随着它的普及，预计会在未来几年成为互联网通信的主流协议。</p>',22)]))}const s=a(i,[["render",o]]);export{c as __pageData,s as default};
