import{_ as t,c as e,o as c,ae as l}from"./chunks/framework.Cthp9TdA.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"07_浏览器/浏览器什么情况会阻塞渲染？.md","filePath":"07_浏览器/浏览器什么情况会阻塞渲染？.md"}'),i={name:"07_浏览器/浏览器什么情况会阻塞渲染？.md"};function o(r,a,d,S,s,_){return c(),e("div",null,a[0]||(a[0]=[l('<blockquote><p>渲染阻塞是指在网页加载过程中，浏览器需要等待某些资源加载或执行完毕后才能继续渲染页面，导致用户看到页面内容延迟或出现“白屏”现象。以下是一些会导致渲染阻塞的情况：</p></blockquote><h4 id="_1-html-和-css-的解析" tabindex="-1">1. HTML 和 CSS 的解析： <a class="header-anchor" href="#_1-html-和-css-的解析" aria-label="Permalink to &quot;1. HTML 和 CSS 的解析：&quot;">​</a></h4><ul><li>浏览器需要解析 HTML 构建 DOM 树（文档对象模型），解析 CSS 构建 CSSOM 树（CSS 对象模型）。这两个过程是渲染的前提，因此 HTML 和 CSS 的加载和解析一定会阻塞渲染。</li><li>为了加快渲染速度，应该尽量减小 HTML 和 CSS 文件的大小，优化 CSS 选择器，减少层级嵌套。</li></ul><h4 id="_2-javascript-的执行" tabindex="-1">2. JavaScript 的执行： <a class="header-anchor" href="#_2-javascript-的执行" aria-label="Permalink to &quot;2. JavaScript 的执行：&quot;">​</a></h4><ul><li>默认情况下，<code>&lt;script&gt;</code> 标签会阻塞 HTML 的解析。当浏览器解析到 <code>&lt;script&gt;</code> 标签时，会暂停 DOM 的构建，先加载并执行 JavaScript 代码，完成后再继续解析 HTML。</li><li>这是因为 JavaScript 可能会修改 DOM 结构，如果先渲染了部分页面，然后 JavaScript 又修改了 DOM，会导致页面重绘甚至回流，影响性能。</li></ul><ul><li>如何优化 JavaScript 造成的阻塞： <ul><li>将 <code>&lt;script&gt;</code> 标签放在 <code>&lt;body&gt;</code> 标签的底部，这样可以确保 HTML 解析完成后再执行 JavaScript，避免阻塞首屏渲染。</li><li>使用 <code>defer</code> 属性：<code>&lt;script defer src=&quot;script.js&quot;&gt;&lt;/script&gt;</code>。<code>defer</code> 属性会让脚本延迟到 DOM 解析完成后、<code>DOMContentLoaded</code> 事件触发前执行，不会阻塞渲染。</li><li>使用 <code>async</code> 属性：<code>&lt;script async src=&quot;script.js&quot;&gt;&lt;/script&gt;</code>。<code>async</code> 属性会让脚本异步加载，加载完成后立即执行，执行过程中会阻塞 HTML 解析。适用于与其他脚本没有依赖关系的独立脚本。</li></ul></li></ul><h4 id="_3-css-的加载" tabindex="-1">3. CSS 的加载： <a class="header-anchor" href="#_3-css-的加载" aria-label="Permalink to &quot;3. CSS 的加载：&quot;">​</a></h4><ul><li>CSS 的加载和解析不会阻塞 HTML 的解析，但 会阻塞渲染。这是因为浏览器需要 CSSOM 来构建渲染树，如果没有 CSSOM，就无法进行渲染。</li><li>CSS 还会阻塞 JavaScript 的执行。因为 JavaScript 可能会查询或修改 CSS 样式，所以浏览器需要确保 CSSOM 构建完成后才能执行 JavaScript。</li></ul><h4 id="_4-其他资源" tabindex="-1">4. 其他资源： <a class="header-anchor" href="#_4-其他资源" aria-label="Permalink to &quot;4. 其他资源：&quot;">​</a></h4><ul><li>当浏览器解析到 <code>&lt;img&gt;</code>、<code>&lt;link&gt;</code> 等标签时，会向服务器发送请求资源。这些资源的加载也可能会影响渲染，但通常不会像 <code>JavaScript</code> 那样造成明显的阻塞。</li></ul><h4 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h4><ul><li>HTML 和 CSS 的解析是渲染的前提，一定会阻塞渲染。</li><li>JavaScript 的执行默认会阻塞 HTML 的解析和渲染。</li><li>CSS 的加载会阻塞渲染和 JavaScript 的执行。</li></ul>',12)]))}const u=t(i,[["render",o]]);export{p as __pageData,u as default};
