import{_ as l,c as n,o as t,ae as h,j as s,a as i}from"./chunks/framework.Cthp9TdA.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"03_js/深拷贝和浅拷贝.md","filePath":"03_js/深拷贝和浅拷贝.md"}'),e={name:"03_js/深拷贝和浅拷贝.md"};function p(k,a,d,o,r,E){return t(),n("div",null,a[0]||(a[0]=[h(`<h3 id="深拷贝与浅拷贝的区别" tabindex="-1">深拷贝与浅拷贝的区别 <a class="header-anchor" href="#深拷贝与浅拷贝的区别" aria-label="Permalink to &quot;深拷贝与浅拷贝的区别&quot;">​</a></h3><blockquote><p>在 JavaScript（及 TypeScript）中，拷贝（复制）对象的方式主要分为 浅拷贝（Shallow Copy）和 深拷贝（Deep Copy）。两者的区别主要体现在是否复制对象的引用。</p></blockquote><h4 id="_1-浅拷贝-shallow-copy" tabindex="-1">1. 浅拷贝（Shallow Copy） <a class="header-anchor" href="#_1-浅拷贝-shallow-copy" aria-label="Permalink to &quot;1. 浅拷贝（Shallow Copy）&quot;">​</a></h4><p>浅拷贝只复制对象的第一层属性，如果属性是基本类型（如 <code>number</code>、<code>string</code>），它会复制值；如果属性是引用类型（如 <code>Array</code>、<code>Object</code>），它复制的是引用地址，而不是实际的数据。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, info: { age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj1 }; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用展开运算符进行浅拷贝</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj2.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Tom&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj2.info.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1.info.age); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 30 （obj1 和 obj2 共享同一个 info 对象）</span></span></code></pre></div><p>🔹 结果分析：</p><ul><li>obj2 复制了 obj1 的 info 属性，但 info 是一个对象（引用类型）。</li><li>obj2.info 仍然指向 obj1.info 的引用，所以修改 obj2.info.age 也会影响 obj1.info.age。</li></ul><h5 id="常见的浅拷贝方法" tabindex="-1">常见的浅拷贝方法 <a class="header-anchor" href="#常见的浅拷贝方法" aria-label="Permalink to &quot;常见的浅拷贝方法&quot;">​</a></h5><ol><li><code>Object.assign()</code></li><li>展开运算符 <code>{ ...obj }</code></li><li><code>Array.prototype.slice()</code></li><li><code>Array.prototype.concat()</code></li></ol><h4 id="_2-深拷贝-deep-copy" tabindex="-1">2. 深拷贝（Deep Copy） <a class="header-anchor" href="#_2-深拷贝-deep-copy" aria-label="Permalink to &quot;2. 深拷贝（Deep Copy）&quot;">​</a></h4><p>深拷贝会递归地复制所有的属性，包括嵌套的引用类型，确保新对象与原对象完全独立。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, info: { age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 JSON 方法进行深拷贝</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj2.info.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1.info.age); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 20（obj1 没有被影响）</span></span></code></pre></div><p>🔹 结果分析：</p><ul><li><code>JSON.parse(JSON.stringify(obj1))</code> 创建了一个新的 <code>info</code> 对象。</li><li>修改 <code>obj2.info.age</code> 不会影响 <code>obj1.info.age</code>。</li></ul><h5 id="深拷贝的方法" tabindex="-1">深拷贝的方法 <a class="header-anchor" href="#深拷贝的方法" aria-label="Permalink to &quot;深拷贝的方法&quot;">​</a></h5><ol><li>JSON 方法（适用于简单对象）</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deepCopy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj));</span></span></code></pre></div><p>⚠️ 局限性：</p><ul><li>无法拷贝 <code>function</code>、<code>undefined</code>、<code>symbol</code>、<code>RegExp</code>、<code>Date</code>、<code>Set</code>、<code>Map</code> 等。</li><li>可能会丢失 <code>prototype</code> 相关的属性。</li></ul><ol start="2"><li>递归拷贝（适用于复杂对象）</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deepClone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasOwnProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      copy[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deepClone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj[key]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 递归拷贝</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>函数概述 该 deepClone 函数是一个递归的深拷贝实现，它会： 判断 obj 是否是 null 或基本数据类型（非对象），如果是，则直接返回。 创建一个新的对象或数组 copy。 遍历 obj 的所有自身属性（不包含原型链上的属性）。 对于每个属性： 如果是基本类型，直接赋值到 copy 中。 如果是对象或数组，递归调用 deepClone，直到拷贝完成。 返回 copy，即深拷贝后的新对象。</p></blockquote><ol start="3"><li>使用 lodash 的 cloneDeep</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cloneDeep </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lodash/cloneDeep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cloneDeep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj1);</span></span></code></pre></div><h4 id="_3-深拷贝和浅拷贝的适用场景" tabindex="-1">3. 深拷贝和浅拷贝的适用场景 <a class="header-anchor" href="#_3-深拷贝和浅拷贝的适用场景" aria-label="Permalink to &quot;3. 深拷贝和浅拷贝的适用场景&quot;">​</a></h4><table tabindex="0"><thead><tr><th>方式</th><th>适用场景</th></tr></thead><tbody><tr><td>浅拷贝</td><td>适用于对象结构简单、不包含嵌套引用类型的数据，如 Object.assign()、{ ...obj }。</td></tr><tr><td>深拷贝</td><td>适用于对象结构复杂，包含嵌套引用类型的数据，如 JSON 方法、递归拷贝、lodash.cloneDeep。</td></tr></tbody></table><h4 id="_4-总结" tabindex="-1">4. 总结 <a class="header-anchor" href="#_4-总结" aria-label="Permalink to &quot;4. 总结&quot;">​</a></h4>`,27),s("table",{tabindex:"0"},[s("thead",null,[s("tr",null,[s("th"),s("th",null,"浅拷贝"),s("th",null,"深拷贝")])]),s("tbody",null,[s("tr",null,[s("td",null,"拷贝方式"),s("td",null,"复制第一层，引用类型属性仍然共享"),s("td",null,"递归复制所有层级，创建完全独立的对象")]),s("tr",null,[s("td",null,"影响原对象"),s("td",null,"可能会影响"),s("td",null,"不会影响")]),s("tr",null,[s("td",null,"性能"),s("td",null,"较快"),s("td",null,"较慢（递归拷贝消耗更大）")]),s("tr",null,[s("td",null,"常见方法"),s("td",{"css-module":".obj"},"Object.assign()、"),s("td",null,"SON.parse(JSON.stringify(obj))、递归函数、lodash.cloneDeep")])])],-1),s("p",null,"如果对象层级较浅，用浅拷贝即可；如果对象层级较深，建议用深拷贝，避免数据污染。",-1),s("p",null,"🚀 最佳实践",-1),s("ul",null,[s("li",null,[i("简单对象 → "),s("code",null,"JSON.parse(JSON.stringify(obj))")]),s("li",null,[i("复杂对象 → "),s("code",null,"lodash.cloneDeep(obj)")]),s("li",null,[i("性能优化 → 考虑是否真的需要深拷贝，有时可以用 "),s("code",null,"WeakMap"),i(" 缓存数据避免重复拷贝。")])],-1)]))}const y=l(e,[["render",p]]);export{c as __pageData,y as default};
