import{_ as d,c as e,o,ae as c}from"./chunks/framework.Cthp9TdA.js";const n=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"06_http/常见的HTTP请求方法.md","filePath":"06_http/常见的HTTP请求方法.md"}'),T={name:"06_http/常见的HTTP请求方法.md"};function a(r,t,l,i,_,h){return o(),e("div",null,t[0]||(t[0]=[c('<blockquote><p>HTTP 定义了一组请求方法，以表明针对给定资源执行的期望动作。虽然它们通常被称为 HTTP“方法”，但有时也称为 HTTP“动词”。每种方法都定义了对给定资源的不同操作。本文档概述了 HTTP/1.1 中定义的方法。</p></blockquote><p>HTTP/1.1 协议中共定义了 8 种方法（也叫“动作”），来以不同的方式操作指定的资源：</p><ul><li><code>GET</code>：向指定的资源发出请求。使用 <code>GET</code> 方法应该只用于读取数据，而不应该用于发送修改数据的请求。<code>GET</code> 可用于获取服务器上的任何内容。</li><li><code>POST</code>：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。<code>POST</code> 请求可能会导致新的资源的建立和/或已有资源的修改。</li><li><code>PUT</code>：从客户端向服务器传送的数据取代指定的文档的内容。</li><li><code>DELETE</code>：请求服务器删除指定的页面。</li><li><code>HEAD</code>：与 <code>GET</code> 方法类似，但服务器只返回标头，不返回实际的文档内容。常用于在下载较大的文件前先获取其大小等元信息，以避免不必要的传输。</li><li><code>OPTIONS</code>：返回服务器支持的 <code>HTTP</code> 方法。可用于检查服务器支持哪些方法。</li><li><code>TRACE</code>：回显服务器收到的请求，主要用于测试或诊断。</li><li><code>CONNECT</code>：HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</li></ul><p>最常用的 HTTP 方法是 <code>GET</code> 和 <code>POST</code>。</p><h4 id="方法的可选性" tabindex="-1">方法的可选性 <a class="header-anchor" href="#方法的可选性" aria-label="Permalink to &quot;方法的可选性&quot;">​</a></h4><p>所有这些方法都是可选的；服务器不一定要全部实现，实现的方法也不必按照本文档的语义实现。例如，服务器完全可以实现一个始终返回“200 OK”而不执行任何操作的 <code>GET</code> 方法。在这样的情况下，就不能相信服务器方法的真正用途了。只有当方法按照规范正确实现后，客户端才能“依赖”这些方法的预期行为。</p><h4 id="安全方法" tabindex="-1">安全方法 <a class="header-anchor" href="#安全方法" aria-label="Permalink to &quot;安全方法&quot;">​</a></h4><p>有些方法（<code>GET</code>、<code>HEAD</code>、<code>OPTIONS</code> 和 <code>TRACE</code>）被定义为安全方法，这意味着使用这些方法进行请求时，不应产生副作用。换句话说，它们不应该导致服务器上的任何修改。不过，这并不意味着服务器不能有任何副作用，只是不建议这样做。例如，服务器可能会在其日志中记录此类请求。</p><h4 id="常用方法比较" tabindex="-1">常用方法比较 <a class="header-anchor" href="#常用方法比较" aria-label="Permalink to &quot;常用方法比较&quot;">​</a></h4><table tabindex="0"><thead><tr><th>方法</th><th>描述</th><th>服务器安全</th><th>幂等</th></tr></thead><tbody><tr><td>GET</td><td>请求指定的资源。</td><td>是</td><td>是</td></tr><tr><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。</td><td>否</td><td>否</td></tr><tr><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容。</td><td>否</td><td>是</td></tr><tr><td>DELETE</td><td>请求服务器删除指定的页面。</td><td>否</td><td>是</td></tr><tr><td>OPTIONS</td><td>返回服务器支持的 HTTP 方法。</td><td>是</td><td>是</td></tr><tr><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断。</td><td>是</td><td>是</td></tr><tr><td>CONNECT</td><td>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td><td>否</td><td>否</td></tr></tbody></table>',10)]))}const p=d(T,[["render",a]]);export{n as __pageData,p as default};
