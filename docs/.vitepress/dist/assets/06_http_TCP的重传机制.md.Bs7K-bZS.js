import{_ as a,c as i,o as e,ae as t}from"./chunks/framework.Cthp9TdA.js";const s=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"06_http/TCP的重传机制.md","filePath":"06_http/TCP的重传机制.md"}'),o={name:"06_http/TCP的重传机制.md"};function r(n,l,h,_,c,u){return e(),i("div",null,l[0]||(l[0]=[t('<p>TCP 重传机制是 TCP 协议实现可靠传输的关键部分，用于在网络发生丢包时重新发送丢失的数据包。</p><h4 id="核心机制" tabindex="-1">核心机制 <a class="header-anchor" href="#核心机制" aria-label="Permalink to &quot;核心机制&quot;">​</a></h4><blockquote><p>TCP 使用确认应答（ACK）和序列号来保证数据的有序、可靠传输。发送方发送数据包后，接收方会回复一个确认应答，其中包含期望下一个接收的包的序列号。</p></blockquote><p>如果发送方在一定时间内没有收到某个数据包的 ACK，就认为该包丢失，会重新发送该包。</p><p>重传触发条件</p><ol><li>超时重传： <ol><li>发送方发送数据包后，启动一个定时器。</li><li>如果定时器超时后仍未收到相应的 ACK，则认为数据包丢失，触发重传。</li><li>超时时间（RTO）的计算和调整是 TCP 重传机制的重要组成部分，需要根据网络状况动态调整。</li></ol></li><li>快速重传： <ol><li>接收方如果收到乱序的数据包，会立即发送重复的 ACK，告知发送方期望收到的下一个包的序列号。</li><li>发送方如果收到 3 个或 3 个以上重复的 ACK，就认为对应的包丢失，触发快速重传，立即重发该包，而无需等待超时。</li></ol></li></ol><h4 id="其他机制" tabindex="-1">其他机制 <a class="header-anchor" href="#其他机制" aria-label="Permalink to &quot;其他机制&quot;">​</a></h4><ul><li>SACK（Selective Acknowledgment）： <ul><li>SACK 允许接收方在 ACK 中携带额外信息，告知发送方哪些数据段已经成功接收，哪些数据段丢失。</li><li>这样可以帮助发送方更精确地重传丢失的数据，提高效率。</li></ul></li><li>D-SACK（Duplicate SACK）： <ul><li>D-SACK 可以帮助发送方区分是数据包丢失还是 ACK 丢失。</li><li>如果发送方收到重复的 SACK，表明是 ACK 丢失，只需重传 ACK，无需重传数据包。</li></ul></li></ul><h4 id="重传机制的优点" tabindex="-1">重传机制的优点 <a class="header-anchor" href="#重传机制的优点" aria-label="Permalink to &quot;重传机制的优点&quot;">​</a></h4><ul><li>保证数据的可靠传输，即使网络发生丢包，也能通过重传机制恢复丢失的数据。</li><li>提高网络的鲁棒性，使网络能够适应各种复杂的网络环境。</li></ul><h4 id="重传机制的缺点" tabindex="-1">重传机制的缺点 <a class="header-anchor" href="#重传机制的缺点" aria-label="Permalink to &quot;重传机制的缺点&quot;">​</a></h4><ul><li>增加了网络的负担，重传数据包会占用额外的带宽。</li><li>可能导致网络拥塞，过多的重传会加剧网络拥塞。</li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>TCP 重传机制是 TCP 协议实现可靠传输的重要保障，通过超时重传和快速重传等机制，可以有效地恢复丢失的数据包，保证数据的可靠传输。同时，也需要注意重传机制可能带来的网络负担和拥塞问题，需要进行合理的控制和优化。</p>',14)]))}const C=a(o,[["render",r]]);export{s as __pageData,C as default};
