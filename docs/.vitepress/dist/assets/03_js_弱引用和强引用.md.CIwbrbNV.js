import{_ as a,c as i,o as e,ae as t}from"./chunks/framework.Cthp9TdA.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"03_js/弱引用和强引用.md","filePath":"03_js/弱引用和强引用.md"}'),n={name:"03_js/弱引用和强引用.md"};function l(h,s,p,k,d,r){return e(),i("div",null,s[0]||(s[0]=[t(`<blockquote><p>在 JavaScript 中，**弱引用（Weak Reference）和强引用（Strong Reference）**的区别主要体现在垃圾回收（GC，Garbage Collection）机制上：</p></blockquote><h4 id="_1-强引用-strong-reference" tabindex="-1">1. 强引用（Strong Reference） <a class="header-anchor" href="#_1-强引用-strong-reference" aria-label="Permalink to &quot;1. 强引用（Strong Reference）&quot;">​</a></h4><p>强引用是 JavaScript 默认的引用类型，即当一个对象被引用时，它不会被垃圾回收，除非手动将引用解除。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre></div><p>在上面的代码中，<code>obj</code> 变量持有 <code>{ name: &quot;Alice&quot; }</code> 的强引用，因此这个对象不会被垃圾回收，直到 <code>obj</code> 被赋值为 <code>null</code> 或 <code>undefined</code>。</p><p>解除强引用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解除对对象的引用，使其可以被垃圾回收</span></span></code></pre></div><h4 id="_2-弱引用-weak-reference" tabindex="-1">2. 弱引用（Weak Reference） <a class="header-anchor" href="#_2-弱引用-weak-reference" aria-label="Permalink to &quot;2. 弱引用（Weak Reference）&quot;">​</a></h4><p>弱引用不会阻止垃圾回收，即使还有引用存在，如果没有强引用，GC 仍然可以回收这个对象。</p><h5 id="weakmap" tabindex="-1">WeakMap <a class="header-anchor" href="#weakmap" aria-label="Permalink to &quot;WeakMap&quot;">​</a></h5><p><code>WeakMap</code> 是 JavaScript 提供的一种弱引用集合，它的键（key）必须是对象，值（value）可以是任何类型。当对象没有强引用时，<code>WeakMap</code> 允许对象被垃圾回收。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;some value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj 是 WeakMap 的 key</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;some value&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解除强引用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里 obj 原本引用的对象会被垃圾回收，WeakMap 也会自动移除这个键</span></span></code></pre></div><h5 id="weakset" tabindex="-1">WeakSet <a class="header-anchor" href="#weakset" aria-label="Permalink to &quot;WeakSet&quot;">​</a></h5><p><code>WeakSet</code> 也是一种弱引用集合，类似 <code>Set</code>，但只能存储对象，并且如果对象没有其他强引用，它们就会被垃圾回收。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ws </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ws.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解除强引用</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 之后，obj 引用的对象可能会被垃圾回收</span></span></code></pre></div><h4 id="_3-强引用-vs-弱引用" tabindex="-1">3. 强引用 vs. 弱引用 <a class="header-anchor" href="#_3-强引用-vs-弱引用" aria-label="Permalink to &quot;3. 强引用 vs. 弱引用&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th>强引用（普通对象、Map、Set）</th><th>弱引用（WeakMap、WeakSet）</th></tr></thead><tbody><tr><td>是否阻止 GC</td><td>是，直到没有引用</td><td>否，可以被 GC 回收</td></tr><tr><td>是否可枚举</td><td>是，可通过 keys() 等方法遍历</td><td>否，无法遍历</td></tr><tr><td>适用场景</td><td>常规数据存储</td><td>需要自动清理的缓存、DOM 关联数据</td></tr></tbody></table><h4 id="_4-使用场景" tabindex="-1">4. 使用场景 <a class="header-anchor" href="#_4-使用场景" aria-label="Permalink to &quot;4. 使用场景&quot;">​</a></h4><ul><li>WeakMap 适用于存储临时数据，如： <ul><li>关联 DOM 元素，防止内存泄漏</li><li>存储对象的元数据，但不影响对象的生命周期</li></ul></li><li>WeakSet 适用于防止对象重复处理，但不影响其生命周期</li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>强引用：默认情况下，JavaScript 变量持有的对象是强引用，只有手动解除引用（如 <code>null</code>）后，GC 才会回收。 弱引用：<code>WeakMap</code> 和 <code>WeakSet</code> 允许对象被垃圾回收，不会阻止回收操作，适用于存储临时数据或缓存。</p>`,21)]))}const E=a(n,[["render",l]]);export{c as __pageData,E as default};
