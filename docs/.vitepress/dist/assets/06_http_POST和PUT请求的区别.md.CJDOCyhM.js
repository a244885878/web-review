import{_ as d,c as e,o as a,ae as l}from"./chunks/framework.Cthp9TdA.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"06_http/POST和PUT请求的区别.md","filePath":"06_http/POST和PUT请求的区别.md"}'),o={name:"06_http/POST和PUT请求的区别.md"};function r(i,t,c,P,T,h){return a(),e("div",null,t[0]||(t[0]=[l('<h4 id="核心区别" tabindex="-1">核心区别： <a class="header-anchor" href="#核心区别" aria-label="Permalink to &quot;核心区别：&quot;">​</a></h4><ul><li>目的： <ul><li>POST： 主要用于创建新的资源，或向服务器提交数据进行处理（例如提交表单、上传文件等）。它表示请求服务器接受包含在请求中的数据，并将其作为指定资源的新的子资源。</li><li>PUT： 主要用于更新或替换服务器上的资源。它表示请求服务器将请求中包含的数据存储在指定的位置，替换该位置已存在的任何内容。</li></ul></li><li>幂等性： <ul><li>POST： 不是幂等的。 相同的 POST 请求多次执行可能会产生不同的结果（例如重复创建相同的资源），每次请求都会在服务器上创建一个新的资源。</li><li>PUT： 是幂等的。 相同的 PUT 请求多次执行应该产生相同的结果。如果资源不存在，PUT 会创建一个新的资源；如果资源已存在，PUT 会更新该资源。多次执行相同的 PUT 请求不会对服务器产生附加的影响。</li></ul></li><li>请求内容： <ul><li>POST： 通常只需要发送部分资源内容，服务器会根据请求内容创建新的资源。</li><li>PUT： 需要客户端发送完整的资源内容，服务器会用请求中的数据完全替换指定资源的内容。</li></ul></li><li>URI： <ul><li>POST： 请求的 URI 通常指向一个资源集合，由服务器决定新创建资源的 URI。</li><li>PUT： 请求的 URI 通常指向一个特定的资源，客户端需要指定资源的完整 URI。</li></ul></li></ul><h4 id="更详细的对比" tabindex="-1">更详细的对比： <a class="header-anchor" href="#更详细的对比" aria-label="Permalink to &quot;更详细的对比：&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th>POST</th><th>PUT</th></tr></thead><tbody><tr><td>语义</td><td>创建新资源或提交数据进行处理</td><td>更新或替换现有资源</td></tr><tr><td>幂等性</td><td>非幂等</td><td>幂等</td></tr><tr><td>安全性</td><td>不安全（可能会导致服务器状态改变）</td><td>安全（不会导致服务器状态改变，但实际应用中，更新操作也可能涉及到权限控制等安全问题）</td></tr><tr><td>可缓存性</td><td>不可缓存</td><td>可缓存</td></tr><tr><td>请求内容</td><td>通常只需要发送部分资源内容</td><td>需要发送完整的资源内容</td></tr><tr><td>URI</td><td>指向资源集合，由服务器决定新资源的 URI</td><td>指向特定资源，客户端需要指定资源的完整 URI</td></tr><tr><td>适用场景</td><td>创建新资源、提交表单、上传文件等</td><td>指更新用户信息、文章内容等，或在已知 URI 的情况下创建资源</td></tr><tr><td>TCP 数据包</td><td>通常 POST 请求浏览器会先发送 <code>header</code>，服务器响应 <code>100 continue</code>，浏览器再发送 <code>data</code>，服务器响应 <code>200 ok</code>（返回数据），所以通常需要两个 <code>TCP</code> 数据包。但是对于一些简单请求，浏览器也可能将 <code>header</code> 和 <code>data</code> 一起发送。</td><td>通常 <code>GET</code> 请求浏览器会把 <code>http header</code> 和 <code>data</code> 一并发送出去，服务器响应 <code>200</code>（返回数据），所以通常只需要一个 <code>TCP</code> 数据包。（这里把 <code>GET</code> 拿来对比，是因为很多文章会提到这个 <code>TCP</code> 数据包的区别，但实际上 <code>POST</code> 也可以只用一个包）</td></tr></tbody></table><h4 id="举例说明" tabindex="-1">举例说明： <a class="header-anchor" href="#举例说明" aria-label="Permalink to &quot;举例说明：&quot;">​</a></h4><p>假设有一个博客文章管理系统：</p><ul><li>POST /articles： 创建一篇新的文章，服务器会分配一个唯一的 ID 给这篇文章。</li><li>PUT /articles/123： 更新 ID 为 123 的文章，请求中需要包含文章的完整内容。如果 ID 为 123 的文章不存在，则会创建一个新的文章。</li></ul><h4 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h4><p>选择使用 POST 还是 PUT 取决于你的具体需求。如果你需要创建新的资源，并且不关心重复请求的影响，那么使用 POST。如果你需要更新或替换已有的资源，并且希望多次执行相同的请求不会产生副作用，那么使用 PUT。</p>',9)]))}const s=d(o,[["render",r]]);export{_ as __pageData,s as default};
