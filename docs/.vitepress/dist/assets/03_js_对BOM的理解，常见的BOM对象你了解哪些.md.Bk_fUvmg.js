import{_ as i,c as t,o as a,ae as e}from"./chunks/framework.Cthp9TdA.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"03_js/对BOM的理解，常见的BOM对象你了解哪些.md","filePath":"03_js/对BOM的理解，常见的BOM对象你了解哪些.md"}'),n={name:"03_js/对BOM的理解，常见的BOM对象你了解哪些.md"};function l(h,s,p,r,k,d){return a(),t("div",null,s[0]||(s[0]=[e(`<h2 id="说说你对bom的理解-常见的bom对象你了解哪些" tabindex="-1">说说你对BOM的理解，常见的BOM对象你了解哪些？ <a class="header-anchor" href="#说说你对bom的理解-常见的bom对象你了解哪些" aria-label="Permalink to &quot;说说你对BOM的理解，常见的BOM对象你了解哪些？&quot;">​</a></h2><p><img src="https://static.vue-js.com/3e191c40-8089-11eb-85f6-6fac77c0c9b3.png" alt=""></p><h3 id="一、是什么" tabindex="-1">一、是什么 <a class="header-anchor" href="#一、是什么" aria-label="Permalink to &quot;一、是什么&quot;">​</a></h3><p>BOM (Browser Object Model)，浏览器对象模型，提供了独立于内容与浏览器窗口进行交互的对象</p><p>其作用就是跟浏览器做一些交互效果,比如如何进行页面的后退，前进，刷新，浏览器的窗口发生变化，滚动条的滚动，以及获取客户的一些信息如：浏览器品牌版本，屏幕分辨率</p><p>浏览器的全部内容可以看成DOM，整个浏览器可以看成BOM。区别如下：</p><p><img src="https://static.vue-js.com/482f33e0-8089-11eb-85f6-6fac77c0c9b3.png" alt=""></p><h3 id="二、window" tabindex="-1">二、window <a class="header-anchor" href="#二、window" aria-label="Permalink to &quot;二、window&quot;">​</a></h3><p>Bom的核心对象是window，它表示浏览器的一个实例</p><p>在浏览器中，window对象有双重角色，即是浏览器窗口的一个接口，又是全局对象</p><p>因此所有在全局作用域中声明的变量、函数都会变成window对象的属性和方法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;js每日一题&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lookName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.name);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//js每日一题</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lookName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//js每日一题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lookName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//js每日一题</span></span></code></pre></div><p>关于窗口控制方法如下：</p><ul><li>moveBy(x,y)：从当前位置水平移动窗体x个像素，垂直移动窗体y个像素，x为负数，将向左移动窗体，y为负数，将向上移动窗体</li><li>moveTo(x,y)：移动窗体左上角到相对于屏幕左上角的(x,y)点</li><li>resizeBy(w,h)：相对窗体当前的大小，宽度调整w个像素，高度调整h个像素。如果参数为负值，将缩小窗体，反之扩大窗体</li><li>resizeTo(w,h)：把窗体宽度调整为w个像素，高度调整为h个像素</li><li>scrollTo(x,y)：如果有滚动条，将横向滚动条移动到相对于窗体宽度为x个像素的位置，将纵向滚动条移动到相对于窗体高度为y个像素的位置</li><li>scrollBy(x,y)： 如果有滚动条，将横向滚动条向左移动x个像素，将纵向滚动条向下移动y个像素 window.open() 既可以导航到一个特定的url，也可以打开一个新的浏览器窗口</li></ul><p>如果 window.open() 传递了第二个参数，且该参数是已有窗口或者框架的名称，那么就会在目标窗口加载第一个参数指定的URL</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;htttp://www.vue3js.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;topFrame&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt; </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;topFrame&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/ </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>window.open() 会返回新窗口的引用，也就是新窗口的 window 对象</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myWin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.vue3js.cn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myWin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>window.close() 仅用于通过 window.open() 打开的窗口 新创建的 window 对象有一个 opener 属性，该属性指向打开他的原始窗口对象 url地址如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//foouser:barpassword@www.wrox.com:80/WileyCDA/?q=javascript#contents</span></span></code></pre></div><p>location属性描述如下：</p><table tabindex="0"><thead><tr><th style="text-align:center;">属性名</th><th style="text-align:center;">例子</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">hash</td><td style="text-align:center;">&quot;#contents&quot;</td><td style="text-align:center;">url中#后面的字符，没有则返回空串</td></tr><tr><td style="text-align:center;">host</td><td style="text-align:center;">www.wrox.com:80</td><td style="text-align:center;">服务器名称和端口号</td></tr><tr><td style="text-align:center;">hostname</td><td style="text-align:center;">www.wrox.com</td><td style="text-align:center;">域名，不带端口号</td></tr><tr><td style="text-align:center;">href</td><td style="text-align:center;"><a href="http://www.wrox.com:80/WileyCDA/?q=javascript#contents" target="_blank" rel="noreferrer">http://www.wrox.com:80/WileyCDA/?q=javascript#contents</a></td><td style="text-align:center;">完整url</td></tr><tr><td style="text-align:center;">pathname</td><td style="text-align:center;">/WileyCDA/</td><td style="text-align:center;">服务器下面的文件路径</td></tr><tr><td style="text-align:center;">port</td><td style="text-align:center;">80</td><td style="text-align:center;">url的端口号，没有则为空</td></tr><tr><td style="text-align:center;">protocol</td><td style="text-align:center;">http:</td><td style="text-align:center;">使用的协议</td></tr><tr><td style="text-align:center;">search</td><td style="text-align:center;">?q=javascript</td><td style="text-align:center;">url的查询字符串，通常为？后面的内容</td></tr></tbody></table><p>除了 hash之外，只要修改location的一个属性，就会导致页面重新加载新URL location.reload()，此方法可以重新刷新当前页面。这个方法会根据最有效的方式刷新页面，如果页面自上一次请求以来没有改变过，页面就会从浏览器缓存中重新加载</p><p>如果要强制从服务器中重新加载，传递一个参数true即可</p><h3 id="四、navigator" tabindex="-1">四、navigator <a class="header-anchor" href="#四、navigator" aria-label="Permalink to &quot;四、navigator&quot;">​</a></h3><p>navigator 对象主要用来获取浏览器的属性，区分浏览器类型。属性较多，且兼容性比较复杂 下表列出了navigator对象接口定义的属性和方法： <img src="https://static.vue-js.com/6797ab40-8089-11eb-ab90-d9ae814b240d.png" alt=""></p><h3 id="五、screen" tabindex="-1">五、screen <a class="header-anchor" href="#五、screen" aria-label="Permalink to &quot;五、screen&quot;">​</a></h3><p><img src="https://static.vue-js.com/7d6b21e0-8089-11eb-85f6-6fac77c0c9b3.png" alt=""></p><h3 id="六、history" tabindex="-1">六、history <a class="header-anchor" href="#六、history" aria-label="Permalink to &quot;六、history&quot;">​</a></h3><p>history对象主要用来操作浏览器URL的历史记录，可以通过参数向前，向后，或者向指定URL跳转 常用的属性如下：</p><ul><li>history.go() 接收一个整数数字或者字符串参数：向最近的一个记录中包含指定字符串的页面跳转，</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;maixaofei.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>当参数为整数数字的时候，正数表示向前跳转指定的页面，负数为向后跳转指定的页面</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//向前跳转三个记录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//向后跳转一个记录</span></span></code></pre></div><ul><li>history.forward()：向前跳转一个页面</li><li>history.back()：向后跳转一个页面</li><li>history.length：获取历史记录数</li></ul>`,35)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
