import{_ as a,c as s,o as l,ae as e}from"./chunks/framework.Cthp9TdA.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"02_css/BFC.md","filePath":"02_css/BFC.md"}'),n={name:"02_css/BFC.md"};function t(h,i,p,r,o,k){return l(),s("div",null,i[0]||(i[0]=[e(`<h3 id="什么是-bfc" tabindex="-1">什么是 BFC？ <a class="header-anchor" href="#什么是-bfc" aria-label="Permalink to &quot;什么是 BFC？&quot;">​</a></h3><p>BFC（Block Formatting Context，块级格式化上下文）是 CSS 布局中的一个概念，可以将其理解为一个独立的渲染区域。在这个区域内，元素的布局不受外部元素的影响，并且有一套特定的渲染规则。</p><h4 id="形象比喻" tabindex="-1">形象比喻： <a class="header-anchor" href="#形象比喻" aria-label="Permalink to &quot;形象比喻：&quot;">​</a></h4><p>想象一个盒子，盒子内部是一个独立的空间，盒子里的物品如何摆放不会受到盒子外面物品的影响。这个盒子就是 BFC，盒子内部的元素就是在这个 BFC 中进行布局。</p><h4 id="bfc-的作用" tabindex="-1">BFC 的作用 <a class="header-anchor" href="#bfc-的作用" aria-label="Permalink to &quot;BFC 的作用&quot;">​</a></h4><ul><li>清除浮动： BFC 可以用来清除浮动元素带来的影响，防止子元素影响父元素的高度。</li><li>防止 margin 重叠： 两个相邻的块级盒子，如果垂直方向上的外边距发生重叠，则会取两者中较大的值。但是如果这两个盒子分别处于不同的 BFC 中，则不会发生重叠。</li><li>阻止元素被浮动元素覆盖： 当一个元素的子元素浮动时，可能会导致父元素的高度塌陷。通过触发 BFC，可以防止这种情况发生。</li><li>包含浮动元素： BFC 的区域会包含浮动子元素，从而避免浮动元素影响到其后的元素。</li></ul><h4 id="触发-bfc-的方法" tabindex="-1">触发 BFC 的方法 <a class="header-anchor" href="#触发-bfc-的方法" aria-label="Permalink to &quot;触发 BFC 的方法&quot;">​</a></h4><ul><li>overflow： 将元素的 overflow 属性设置为 hidden、auto 或 scroll。</li><li>float： 将元素的 float 属性设置为 left 或 right。</li><li>position： 将元素的 position 属性设置为 absolute 或 fixed。</li><li>display： 将元素的 display 属性设置为 inline-block、table-cell、flex 或 grid。</li></ul><h4 id="bfc-的工作原理" tabindex="-1">BFC 的工作原理 <a class="header-anchor" href="#bfc-的工作原理" aria-label="Permalink to &quot;BFC 的工作原理&quot;">​</a></h4><p>BFC 的工作原理比较复杂，但我们可以简单地理解为：</p><ul><li>BFC 是一个独立的容器，容器内的元素不会影响到外面的元素，反之亦然。</li><li>BFC 中的盒子会在垂直方向上一个接一个地放置。</li><li>BFC 的区域不会与浮动元素的区域重叠。</li><li>计算 BFC 的高度时，浮动子元素也参与计算。</li></ul><h4 id="bfc-的应用场景" tabindex="-1">BFC 的应用场景 <a class="header-anchor" href="#bfc-的应用场景" aria-label="Permalink to &quot;BFC 的应用场景&quot;">​</a></h4><ul><li>清除浮动</li><li>解决 margin 塌陷</li><li>实现两栏布局</li><li>创建瀑布流布局</li><li>解决某些兼容性问题</li></ul><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.clearfix:after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 触发BFC */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上面的代码中，<code>.clearfix</code> 类用于清除浮动。而<code>.parent</code> 类通过设置 <code>overflow: hidden</code> 来触发 BFC，从而包含浮动子元素。</p>`,16)]))}const C=a(n,[["render",t]]);export{c as __pageData,C as default};
