import{_ as s,c as a,o as n,ae as t}from"./chunks/framework.Cthp9TdA.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"03_js/bigInt.md","filePath":"03_js/bigInt.md"}'),l={name:"03_js/bigInt.md"};function h(e,i,k,p,d,g){return n(),a("div",null,i[0]||(i[0]=[t(`<blockquote><p>在 JavaScript 中，BigInt 是一种特殊的数据类型，用于表示任意精度的整数。这意味着 BigInt 可以安全地存储和操作超出 JavaScript Number 类型安全范围的整数。</p></blockquote><h4 id="为什么需要-bigint" tabindex="-1">为什么需要 BigInt？ <a class="header-anchor" href="#为什么需要-bigint" aria-label="Permalink to &quot;为什么需要 BigInt？&quot;">​</a></h4><p>JavaScript 的 <code>Number</code> 类型使用 IEEE 754 标准的双精度浮点数来表示数字。这导致 <code>Number</code> 只能精确表示 -(2^53 - 1) 到 2^53 - 1 范围内的整数。超出这个范围的整数进行运算可能会丢失精度，导致意料之外的结果。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Number.MAX_SAFE_INTEGER); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 9007199254740991</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Number.MAX_SAFE_INTEGER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 9007199254740992</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Number.MAX_SAFE_INTEGER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 9007199254740992  精度丢失！</span></span></code></pre></div><p>可以看到，当数字超过 <code>Number.MAX_SAFE_INTEGER</code> 时，加 2 的结果并没有如预期那样递增，而是保持不变，这就是精度丢失。</p><h4 id="bigint-的作用" tabindex="-1">BigInt 的作用 <a class="header-anchor" href="#bigint-的作用" aria-label="Permalink to &quot;BigInt 的作用&quot;">​</a></h4><p><code>BigInt</code> 的出现就是为了解决这个问题。它可以表示任意大小的整数，因此可以安全地进行大整数运算，而不会丢失精度。</p><h4 id="如何创建-bigint" tabindex="-1">如何创建 BigInt？ <a class="header-anchor" href="#如何创建-bigint" aria-label="Permalink to &quot;如何创建 BigInt？&quot;">​</a></h4><ol><li>在数字末尾添加 <code>n</code>：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bigInt1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1234567890123456789012345</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bigInt1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1234567890123456789012345n</span></span></code></pre></div><ol start="2"><li>使用 <code>BigInt()</code> 构造函数：</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bigInt2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1234567890123456789012345</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bigInt3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1234567890123456789012345&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 字符串形式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bigInt2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1234567890123456789012345n</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bigInt3); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1234567890123456789012345n</span></span></code></pre></div><h4 id="bigint-的使用注意事项" tabindex="-1">BigInt 的使用注意事项 <a class="header-anchor" href="#bigint-的使用注意事项" aria-label="Permalink to &quot;BigInt 的使用注意事项&quot;">​</a></h4><ul><li>不能与 <code>Number</code> 类型混合运算： <code>BigInt</code> 只能与 <code>BigInt</code> 进行运算。如果需要与 <code>Number</code> 运算，需要显式地进行类型转换。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bigInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// console.log(bigInt + number);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 报错：TypeError: Cannot mix BigInt and other types</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bigInt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确：15n</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bigInt) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确：15</span></span></code></pre></div><ul><li>除法运算会向下取整： <code>BigInt</code> 的除法运算结果会向下取整，类似于 <code>Math.floor()</code>。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3n</span></span></code></pre></div><ul><li>可以进行位运算： <code>BigInt</code> 支持位运算，例如 <code>|、&amp;、&lt;&lt;、&gt;&gt;、^</code> 等。</li></ul><ul><li>比较运算： <code>BigInt</code> 可以使用比较运算符（<code>==、===、!=、!==、&gt;、&lt;、&gt;=、&lt;=</code>）进行比较。</li></ul><h4 id="bigint-的应用场景" tabindex="-1">BigInt 的应用场景 <a class="header-anchor" href="#bigint-的应用场景" aria-label="Permalink to &quot;BigInt 的应用场景&quot;">​</a></h4><ul><li>处理大整数 ID： 例如数据库中的自增 ID，或者需要使用大整数的加密算法。</li><li>高精度计算： 例如金融计算、科学计算等需要高精度的场景。</li><li>处理高分辨率时间戳： 需要精确到纳秒或更高级别的时间戳。</li></ul><blockquote><p>总而言之，<code>BigInt</code> 的出现扩展了 JavaScript 处理整数的能力，使得 JavaScript 能够胜任更多需要大整数运算的场景。希望以上信息能够帮助你理解 <code>BigInt</code> 的作用。</p></blockquote>`,22)]))}const E=s(l,[["render",h]]);export{o as __pageData,E as default};
