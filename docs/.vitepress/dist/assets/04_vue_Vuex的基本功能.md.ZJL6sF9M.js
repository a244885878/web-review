import{_ as t,c as o,o as r,ae as p}from"./chunks/framework.Cthp9TdA.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"04_vue/Vuex的基本功能.md","filePath":"04_vue/Vuex的基本功能.md"}'),_={name:"04_vue/Vuex的基本功能.md"};function a(s,e,i,u,l,n){return r(),o("div",null,e[0]||(e[0]=[p("<blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p></blockquote><p>（1）Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p><p>（2）改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</p><p>主要包括以下几个模块：</p><ul><li><p>State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。</p></li><li><p>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。</p></li><li><p>Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。</p></li><li><p>Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。</p></li><li><p>Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</p></li></ul>",5)]))}const d=t(_,[["render",a]]);export{m as __pageData,d as default};
