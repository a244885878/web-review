import{_ as o,c as i,o as e,ae as a}from"./chunks/framework.Cthp9TdA.js";const n=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"06_http/当在浏览器中输入 Google.com 并且按下回车之后发生了什么？.md","filePath":"06_http/当在浏览器中输入 Google.com 并且按下回车之后发生了什么？.md"}'),t={name:"06_http/当在浏览器中输入 Google.com 并且按下回车之后发生了什么？.md"};function c(_,l,r,d,u,h){return e(),i("div",null,l[0]||(l[0]=[a('<blockquote><p>当你在浏览器中输入 <code>google.com</code> 并按下回车后，看似简单的操作背后，其实发生了一系列复杂的步骤。下面我将详细解释这个过程：</p></blockquote><h4 id="_1-url-解析" tabindex="-1">1. URL 解析: <a class="header-anchor" href="#_1-url-解析" aria-label="Permalink to &quot;1. URL 解析:&quot;">​</a></h4><ul><li>浏览器首先会解析你输入的字符串，判断它是否是一个合法的 URL。在这个例子中，<code>google.com</code> 被识别为一个域名。</li><li>浏览器还会进行一些额外的操作，比如自动补全（如果你之前访问过 <code>google.com</code>）、字符编码等。</li></ul><h4 id="_2-dns-域名解析" tabindex="-1">2. DNS 域名解析: <a class="header-anchor" href="#_2-dns-域名解析" aria-label="Permalink to &quot;2. DNS 域名解析:&quot;">​</a></h4><ul><li>由于计算机网络使用 IP 地址进行通信，浏览器需要将域名 <code>google.com</code> 转换为服务器的 IP 地址。这个过程称为 DNS 域名解析。</li><li>浏览器首先会检查本地 DNS 缓存，看是否之前已经解析过该域名。如果没有，它会向本地 DNS 服务器（通常由你的网络服务提供商提供）发送 DNS 查询请求。</li><li>本地 DNS 服务器可能会递归地向其他 DNS 服务器查询，直到找到 <code>google.com</code> 对应的 IP 地址。这个过程可能涉及根域名服务器、顶级域名服务器（.com）和权威域名服务器。</li><li>最终，本地 DNS 服务器将 <code>google.com</code> 的 IP 地址返回给浏览器。</li></ul><h4 id="_3-建立-tcp-连接" tabindex="-1">3. 建立 TCP 连接: <a class="header-anchor" href="#_3-建立-tcp-连接" aria-label="Permalink to &quot;3. 建立 TCP 连接:&quot;">​</a></h4><ul><li>浏览器获得服务器的 IP 地址后，会与服务器建立 TCP 连接。TCP 是一种可靠的传输协议，它使用三次握手来建立连接： <ul><li>浏览器向服务器发送一个 SYN 包（同步）。</li><li>服务器收到 SYN 包后，回复一个 SYN-ACK 包（同步-确认）。</li><li>浏览器收到 SYN-ACK 包后，发送一个 ACK 包（确认）。</li></ul></li><li>三次握手完成后，TCP 连接建立，浏览器和服务器可以开始进行数据传输。</li></ul><h4 id="_4-发送-http-请求" tabindex="-1">4. 发送 HTTP 请求: <a class="header-anchor" href="#_4-发送-http-请求" aria-label="Permalink to &quot;4. 发送 HTTP 请求:&quot;">​</a></h4><ul><li>浏览器使用 HTTP 协议向服务器发送请求。请求包含以下信息： <ul><li>请求方法（GET、POST 等），这里通常是 GET 请求，表示请求获取网页内容。</li><li>请求的 URL (<code>/</code>，表示根路径，即首页)。</li><li>HTTP 头部，包含一些附加信息，例如浏览器类型、接受的语言等。</li></ul></li></ul><h4 id="_5-服务器处理请求" tabindex="-1">5. 服务器处理请求: <a class="header-anchor" href="#_5-服务器处理请求" aria-label="Permalink to &quot;5. 服务器处理请求:&quot;">​</a></h4><ul><li>服务器收到 HTTP 请求后，会进行处理。这个过程可能包括： <ul><li>负载均衡：如果有很多用户同时访问 Google，请求会被分配到不同的服务器上，以实现负载均衡。</li><li>安全检查：服务器可能会检查请求是否合法，例如是否包含恶意代码。</li><li>处理请求：服务器根据请求的 URL 查找对应的网页内容。</li></ul></li><li>服务器将处理结果封装成 HTTP 响应，发送回浏览器。响应包含以下信息： <ul><li>状态码（例如 200 OK 表示成功，404 Not Found 表示未找到）。</li><li>HTTP 头部，包含一些附加信息，例如内容类型、内容长度等。</li><li>响应体，包含实际的网页内容（HTML 代码）。</li></ul></li></ul><h4 id="_6-浏览器解析渲染页面" tabindex="-1">6. 浏览器解析渲染页面: <a class="header-anchor" href="#_6-浏览器解析渲染页面" aria-label="Permalink to &quot;6. 浏览器解析渲染页面:&quot;">​</a></h4><ul><li>浏览器收到 HTTP 响应后，会解析响应体中的 HTML 代码。</li><li>浏览器会构建 DOM 树（文档对象模型），表示网页的结构。</li><li>浏览器还会解析 CSS 样式，构建 CSSOM 树（CSS 对象模型），表示网页的样式。</li><li>浏览器将 DOM 树和 CSSOM 树结合起来，生成渲染树。</li><li>浏览器根据渲染树计算每个元素在页面上的位置和大小，进行布局（layout）。</li><li>最后，浏览器将页面绘制到屏幕上（paint）。</li></ul><h4 id="_7-断开-tcp-连接" tabindex="-1">7. 断开 TCP 连接: <a class="header-anchor" href="#_7-断开-tcp-连接" aria-label="Permalink to &quot;7. 断开 TCP 连接:&quot;">​</a></h4><ul><li>数据传输完成后，浏览器和服务器可以选择关闭 TCP 连接。通常情况下，HTTP/1.1 协议会保持连接一段时间，以便进行后续的请求。HTTP/2 协议则使用多路复用，可以在一个 TCP 连接上进行多个请求和响应。</li></ul><h4 id="其他细节" tabindex="-1">其他细节: <a class="header-anchor" href="#其他细节" aria-label="Permalink to &quot;其他细节:&quot;">​</a></h4><ul><li>HTTPS: 如果你访问的是 <code>https://google.com</code>，那么在建立 TCP 连接后，还会进行 TLS/SSL 握手，建立安全的加密连接。</li><li>缓存: 浏览器和服务器都会使用缓存来提高性能。浏览器会缓存 DNS 解析结果、网页内容等。服务器也会使用 CDN（内容分发网络）将网页内容缓存在离用户更近的服务器上。</li><li>重定向: 服务器可能会返回重定向响应（例如 301 或 302），告诉浏览器访问另一个 URL。</li></ul><p>总而言之，在浏览器中输入 <code>google.com</code> 并按下回车是一个复杂的过程，涉及网络通信、DNS 解析、HTTP 协议、浏览器渲染等多个方面。希望以上解释能够帮助你更好地理解这个过程。</p>',18)]))}const P=o(t,[["render",c]]);export{n as __pageData,P as default};
