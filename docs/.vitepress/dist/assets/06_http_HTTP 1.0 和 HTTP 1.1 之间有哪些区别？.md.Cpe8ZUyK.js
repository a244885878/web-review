import{_ as a,c as o,o as l,ae as i}from"./chunks/framework.Cthp9TdA.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"06_http/HTTP 1.0 和 HTTP 1.1 之间有哪些区别？.md","filePath":"06_http/HTTP 1.0 和 HTTP 1.1 之间有哪些区别？.md"}'),T={name:"06_http/HTTP 1.0 和 HTTP 1.1 之间有哪些区别？.md"};function t(c,e,d,r,n,_){return l(),o("div",null,e[0]||(e[0]=[i('<blockquote><p>HTTP 1.0 和 HTTP 1.1 是 HTTP 协议的两个主要版本，它们之间存在一些重要的区别，这些区别主要体现在连接方式、消息结构、缓存机制等方面。以下是它们之间主要的区别：</p></blockquote><h4 id="_1-连接方式" tabindex="-1">1. 连接方式： <a class="header-anchor" href="#_1-连接方式" aria-label="Permalink to &quot;1. 连接方式：&quot;">​</a></h4><ul><li>HTTP 1.0： 使用的是短连接。每次请求都需要建立一个新的 TCP 连接，请求完成后立即断开连接。这意味着每次请求都需要进行 TCP 三次握手和四次挥手的过程，开销较大。</li><li>HTTP 1.1： 引入了长连接（也称为持久连接或 keep-alive）。在一次 TCP 连接中可以进行多次 HTTP 请求和响应，减少了连接建立和断开的开销，提高了传输效率。客户端可以通过 <code>Connection: keep-alive</code> 请求头来启用长连接，服务器可以通过 <code>Connection: keep-alive</code> 响应头来保持连接。</li></ul><h4 id="_2-消息结构" tabindex="-1">2. 消息结构： <a class="header-anchor" href="#_2-消息结构" aria-label="Permalink to &quot;2. 消息结构：&quot;">​</a></h4><ul><li>HTTP 1.0： 不支持 Host 字段，一个 IP 地址只能对应一个服务器。</li><li>HTTP 1.1： 支持 Host 字段，允许一个 IP 地址对应多个服务器（虚拟主机）。客户端在请求头中包含 Host 字段，服务器根据 Host 字段来区分不同的站点。这使得在同一个 IP 地址上托管多个网站成为可能。</li></ul><h4 id="_3-传输编码" tabindex="-1">3. 传输编码： <a class="header-anchor" href="#_3-传输编码" aria-label="Permalink to &quot;3. 传输编码：&quot;">​</a></h4><ul><li>HTTP 1.0： 不支持分块传输编码，无法有效处理大文件传输。</li><li>HTTP 1.1： 支持分块传输编码（chunked transfer encoding），允许将大文件分割成多个小块进行传输，提高了传输效率，尤其是在传输大文件或动态生成的内容时。使用 <code>Transfer-Encoding: chunked</code> 头部来表示使用分块传输。</li></ul><h4 id="_4-缓存机制" tabindex="-1">4. 缓存机制： <a class="header-anchor" href="#_4-缓存机制" aria-label="Permalink to &quot;4. 缓存机制：&quot;">​</a></h4><ul><li>HTTP 1.0： 缓存机制相对简单，主要使用 <code>If-Modified-Since</code> 头部来进行简单的过期时间判断。</li><li>HTTP 1.1： 改进了缓存机制，引入了 <code>ETag</code> 头部，使用实体标签来更精确地判断资源是否发生变化。<code>ETag</code> 是资源的唯一标识符，服务器在响应中返回 <code>ETag</code>，客户端在后续请求中使用 <code>If-None-Match</code> 头部携带 <code>ETag</code>，服务器比较 <code>ETag</code> 来判断资源是否需要更新。</li></ul><h4 id="_5-状态码" tabindex="-1">5. 状态码： <a class="header-anchor" href="#_5-状态码" aria-label="Permalink to &quot;5. 状态码：&quot;">​</a></h4><ul><li>HTTP 1.1： 相比 HTTP 1.0 增加了更多的状态码，例如 1xx（信息性状态码）、4xx（客户端错误状态码）和 5xx（服务器错误状态码）等，更详细地描述了请求和响应的状态。</li></ul><h4 id="_6-其他" tabindex="-1">6. 其他： <a class="header-anchor" href="#_6-其他" aria-label="Permalink to &quot;6. 其他：&quot;">​</a></h4><ul><li>HTTP 1.1： 还提供了与身份认证、状态管理和 Cache 缓存等机制相关的请求头和响应头。</li><li>HTTP 1.1： 引入了 <code>Accept-Encoding</code> 头部，允许客户端声明其支持的内容编码方式，服务器可以选择合适的编码方式进行响应，例如 gzip 压缩。</li><li>HTTP 1.1： 改进了对错误处理的支持。</li></ul><p>总而言之，HTTP 1.1 在连接方式、消息结构、传输编码和缓存机制等方面都比 HTTP 1.0 有了显著的改进，提高了 Web 应用程序的性能和效率。现在 HTTP 1.1 仍然是 Web 上广泛使用的协议版本。</p>',14)]))}const s=a(T,[["render",t]]);export{h as __pageData,s as default};
