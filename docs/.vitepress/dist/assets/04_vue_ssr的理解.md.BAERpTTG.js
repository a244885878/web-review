import{_ as o,c as r,o as e,ae as d}from"./chunks/framework.Cthp9TdA.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"04_vue/ssr的理解.md","filePath":"04_vue/ssr的理解.md"}'),a={name:"04_vue/ssr的理解.md"};function s(l,t,i,n,S,c){return e(),r("div",null,t[0]||(t[0]=[d('<h4 id="什么是-ssr" tabindex="-1">什么是 SSR？ <a class="header-anchor" href="#什么是-ssr" aria-label="Permalink to &quot;什么是 SSR？&quot;">​</a></h4><p><code>SSR</code>，即<strong>服务端渲染</strong>，是一种在服务器端生成完整的 <code>HTML</code> 页面，然后将页面发送给客户端的渲染方式。与传统的客户端渲染（<code>CSR</code>）相比，<code>SSR</code> 将页面的初始渲染工作移到了服务器端，从而提高了首屏加载速度，改善用户体验，同时也对 <code>SEO</code> 更加友好。</p><h4 id="ssr-的工作原理" tabindex="-1">SSR 的工作原理 <a class="header-anchor" href="#ssr-的工作原理" aria-label="Permalink to &quot;SSR 的工作原理&quot;">​</a></h4><ol><li><strong>用户请求</strong>： 用户在浏览器中输入 <code>URL</code>，向服务器发送请求。</li><li><strong>服务器处理</strong>： 服务器接收到请求后，根据路由信息和数据，动态生成完整的 <code>HTML</code> 页面。</li><li><strong>返回 HTML</strong>： 服务器将生成的 <code>HTML</code> 页面返回给浏览器。</li><li><strong>浏览器渲染</strong>： 浏览器直接解析接收到的 <code>HTML</code>，快速展示页面内容。</li></ol><h4 id="ssr-的优点" tabindex="-1">SSR 的优点 <a class="header-anchor" href="#ssr-的优点" aria-label="Permalink to &quot;SSR 的优点&quot;">​</a></h4><ul><li><strong>首屏加载速度快</strong>： 由于 <code>HTML</code> 页面已经在服务器端生成，浏览器无需等待 <code>JavaScript</code> 执行才能显示内容，从而大大提高了首屏加载速度。</li><li><strong>SEO 友好</strong>： 搜索引擎爬虫可以直接获取到渲染后的 <code>HTML</code>，有利于搜索引擎抓取和索引页面内容，提高网站的搜索排名。</li><li><strong>更好的用户体验</strong>： 用户可以更快地看到页面内容，提高用户满意度。</li><li><strong>适用于复杂交互</strong>： <code>SSR</code> 可以处理复杂的页面交互，保证用户在网络不佳的情况下也能获得良好的体验。</li></ul><h4 id="ssr-的缺点" tabindex="-1">SSR 的缺点 <a class="header-anchor" href="#ssr-的缺点" aria-label="Permalink to &quot;SSR 的缺点&quot;">​</a></h4><ul><li><strong>服务器负载增加</strong>： 服务器需要处理更多的计算任务，增加了服务器的负载。</li><li><strong>开发复杂度提高</strong>： <code>SSR</code> 的开发和调试比 <code>CSR</code> 相对复杂，需要掌握更多的知识和技术。</li><li><strong>初始页面体积增大</strong>： 服务器返回的 <code>HTML</code> 页面通常比 <code>CSR</code> 的初始页面体积更大。</li></ul><h4 id="ssr-的应用场景" tabindex="-1">SSR 的应用场景 <a class="header-anchor" href="#ssr-的应用场景" aria-label="Permalink to &quot;SSR 的应用场景&quot;">​</a></h4><ul><li><strong>电商网站</strong>： 商品详情页、首页等需要快速展示内容的页面。</li><li><strong>新闻资讯网站</strong>： 文章列表页、文章详情页等需要快速展示内容的页面。</li><li><strong>单页面应用（SPA）</strong>： 可以将 <code>SPA</code> 的首屏渲染为 <code>SSR</code>，提高首屏加载速度。</li></ul><h4 id="ssr-的实现方式" tabindex="-1">SSR 的实现方式 <a class="header-anchor" href="#ssr-的实现方式" aria-label="Permalink to &quot;SSR 的实现方式&quot;">​</a></h4><ul><li><strong>框架集成</strong>： 许多前端框架（如 Vue、React、Angular）都提供了官方或社区提供的 SSR 解决方案，可以方便地将 SSR 集成到项目中。</li><li><strong>手动实现</strong>： 对于简单的项目，也可以手动实现 SSR，但需要编写更多的代码。</li></ul><h4 id="ssr-与-csr-的区别" tabindex="-1">SSR 与 CSR 的区别 <a class="header-anchor" href="#ssr-与-csr-的区别" aria-label="Permalink to &quot;SSR 与 CSR 的区别&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特点</th><th>SSR</th><th>CSR</th></tr></thead><tbody><tr><td>渲染时机</td><td>服务器端</td><td>客户端</td></tr><tr><td>首屏加载速度</td><td>快</td><td>慢</td></tr><tr><td>SEO</td><td>友好</td><td>不友好</td></tr><tr><td>用户体验</td><td>好</td><td>一般</td></tr><tr><td>开发复杂度</td><td>高</td><td>低</td></tr><tr><td>服务器负载</td><td>高</td><td>低</td></tr></tbody></table><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p><code>SSR</code> 是一种非常有用的技术，可以显著提升 <code>Web</code> 应用的性能和用户体验。但在选择使用 <code>SSR</code> 时，需要综合考虑项目的实际需求、团队的技术水平和服务器资源等因素。</p><h4 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h4><ul><li><strong>SSR 和 SSG 有什么区别？</strong><ul><li>SSR 是服务端渲染，每次请求都生成新的 HTML。</li><li>SSG 是静态站点生成，在构建时生成静态 HTML 文件。</li></ul></li><li><strong>SSR 和 CSR 哪个更好？</strong><ul><li>没有绝对的好坏，需要根据具体场景选择。一般来说，对于对首屏加载速度和 SEO 要求较高的页面，SSR 更适合；对于交互性强的页面，CSR 更适合。</li></ul></li></ul>',18)]))}const g=o(a,[["render",s]]);export{u as __pageData,g as default};
