import{_ as a,c as e,o as l,ae as d}from"./chunks/framework.Cthp9TdA.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"07_浏览器/进程与线程.md","filePath":"07_浏览器/进程与线程.md"}'),r={name:"07_浏览器/进程与线程.md"};function i(o,t,h,s,n,c){return l(),e("div",null,t[0]||(t[0]=[d('<h4 id="进程与线程的概念" tabindex="-1">进程与线程的概念 <a class="header-anchor" href="#进程与线程的概念" aria-label="Permalink to &quot;进程与线程的概念&quot;">​</a></h4><h5 id="进程-process" tabindex="-1">进程 (Process) <a class="header-anchor" href="#进程-process" aria-label="Permalink to &quot;进程 (Process)&quot;">​</a></h5><p>进程 是操作系统进行资源分配和调度的一个独立单位。你可以将进程想象成一个正在运行的程序。每个进程都有自己独立的内存空间、打开的文件、设备等资源。</p><ul><li>特点: <ul><li>独立性: 每个进程拥有自己独立的内存空间，一个进程崩溃不会影响其他进程。</li><li>动态性: 进程具有生命周期，可以创建、撤销、阻塞和唤醒。</li><li>并发性: 多个进程可以在单处理器系统上并发执行，通过时间片轮转的方式。</li></ul></li><li>形象比喻: <ul><li>进程就像是一个工厂。每个工厂有自己的生产线、原材料和产品。不同的工厂之间相互独立。</li></ul></li></ul><p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSXvo3XSNKTdLAKbJhPrJCke2NIao56u1800PFCwZTWXUbiHw7FmlfKpwNe44d2" alt=""></p><h5 id="线程-thread" tabindex="-1">线程 (Thread) <a class="header-anchor" href="#线程-thread" aria-label="Permalink to &quot;线程 (Thread)&quot;">​</a></h5><p>线程 是进程的一个执行单元，是 CPU 调度和分派的基本单位，一个进程可以包含多个线程。线程共享进程的内存空间，但拥有自己的程序计数器、栈和局部变量。</p><ul><li>特点: <ul><li>轻量级: 线程的创建比进程要快得多，资源消耗也更少。</li><li>共享: 线程共享进程的资源，如内存、文件等。</li><li>并发性: 多个线程可以在同一个进程中并发执行，提高程序的并发性。</li></ul></li><li>形象比喻: <ul><li>线程就像是一个工厂里的工人。多个工人可以在同一个工厂里同时工作，共享工厂的资源，但每个人都有自己的工作任务。</li></ul></li></ul><p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT2ZrEbsNDsSnmGvlSwKd09z9LTVN96JQL2_01puYYf8gl00Cx-KFB8FdvJYu5y" alt=""></p><h4 id="进程与线程的区别" tabindex="-1">进程与线程的区别 <a class="header-anchor" href="#进程与线程的区别" aria-label="Permalink to &quot;进程与线程的区别&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特点</th><th>进程</th><th>线程</th></tr></thead><tbody><tr><td>定义</td><td>系统资源分配的最小单位</td><td>CPU 调度和分派的基本单位</td></tr><tr><td>内存</td><td>独立的内存空间</td><td>共享进程的内存空间</td></tr><tr><td>创建开销</td><td>大</td><td>小</td></tr><tr><td>切换开销</td><td>大</td><td>小</td></tr><tr><td>并发性</td><td>并发</td><td>并发</td></tr></tbody></table><h4 id="为什么要引入线程" tabindex="-1">为什么要引入线程？ <a class="header-anchor" href="#为什么要引入线程" aria-label="Permalink to &quot;为什么要引入线程？&quot;">​</a></h4><ul><li>提高并发性: 一个进程可以创建多个线程，同时执行多个任务，提高程序的效率。</li><li>提高响应速度: 对于 I/O 密集型任务，可以将 I/O 操作放在一个线程中，计算操作放在另一个线程中，提高程序的响应速度。</li><li>简化编程模型: 线程提供了一种更细粒度的并发控制方式，使得编程模型更加简单。</li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>进程和线程是操作系统中两个重要的概念。进程是资源分配的最小单位，线程是 CPU 调度和分派的基本单位。线程是比进程更轻量级的执行单元，可以提高程序的并发性和响应速度。</p>',15)]))}const p=a(r,[["render",i]]);export{_ as __pageData,p as default};
