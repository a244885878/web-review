import{_ as i,c as a,o as e,ae as n}from"./chunks/framework.Cthp9TdA.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"07_浏览器/Node 中的 Event Loop 和浏览器中的有什么区别？process.nextTick 执行顺序？.md","filePath":"07_浏览器/Node 中的 Event Loop 和浏览器中的有什么区别？process.nextTick 执行顺序？.md"}'),t={name:"07_浏览器/Node 中的 Event Loop 和浏览器中的有什么区别？process.nextTick 执行顺序？.md"};function l(p,s,h,k,o,d){return e(),a("div",null,s[0]||(s[0]=[n(`<blockquote><p>Node.js 和浏览器中的事件循环有一些关键区别，主要体现在它们各自的运行环境和处理任务的方式上。<code>process.nextTick</code> 的执行顺序在 Node.js 的上下文中非常重要，下面我将详细解释这些概念。</p></blockquote><h4 id="_1-事件循环的整体结构" tabindex="-1">1. 事件循环的整体结构 <a class="header-anchor" href="#_1-事件循环的整体结构" aria-label="Permalink to &quot;1. 事件循环的整体结构&quot;">​</a></h4><p>虽然 Node.js 和浏览器都使用事件循环来处理异步操作，但它们的实现细节有所不同。</p><ul><li>浏览器：浏览器的事件循环主要负责处理用户交互（如鼠标点击、键盘输入）、网络请求、定时器以及页面渲染等任务。它与浏览器的渲染引擎紧密结合，需要权衡各种任务的优先级，以保证用户界面的流畅性和响应性。</li><li>Node.js：Node.js 的事件循环则专注于处理 I/O 操作、网络请求和定时器等服务器端任务。它基于 libuv 库实现，更加侧重于高效地处理并发请求。</li></ul><h4 id="_2-任务队列" tabindex="-1">2. 任务队列 <a class="header-anchor" href="#_2-任务队列" aria-label="Permalink to &quot;2. 任务队列&quot;">​</a></h4><p>两者都使用任务队列来管理待执行的异步任务，但队列的类型和优先级有所不同。</p><ul><li>浏览器：浏览器的任务队列包括宏任务队列（macro task queue）和微任务队列（micro task queue）。常见的宏任务包括 <code>setTimeout、setInterval、setImmediate</code>（非标准）、I/O 操作、UI 渲染等；微任务包括 <code>Promise.then</code>、<code>MutationObserver</code> 等。浏览器会先执行一个宏任务，然后执行所有可用的微任务，再进行页面渲染（如果需要），然后进入下一个宏任务循环。</li><li>Node.js：Node.js 的任务队列也包含宏任务队列和微任务队列，但其宏任务队列的类型与浏览器有所不同。Node.js 中，<code>setTimeout</code>、<code>setInterval</code> 等属于定时器队列，I/O 操作的回调属于 I/O 回调队列，<code>setImmediate</code> 有其专门的检查队列。微任务队列与浏览器类似，包含 <code>process.nextTick</code> 和 <code>Promise.then</code> 等。</li></ul><h4 id="_3-process-nexttick-的执行顺序" tabindex="-1">3. process.nextTick 的执行顺序 <a class="header-anchor" href="#_3-process-nexttick-的执行顺序" aria-label="Permalink to &quot;3. process.nextTick 的执行顺序&quot;">​</a></h4><p><code>process.nextTick</code> 是 Node.js 中特有的一个方法，用于将回调函数添加到微任务队列中。它的执行优先级非常高，会在当前操作的尾部、事件循环的任何其他 I/O 事件（包括 timers）之前执行。 具体来说，当 Node.js 执行一段代码时，如果遇到 <code>process.nextTick</code>，会将回调函数放入一个特殊的队列中。当前代码执行完毕后，Node.js 会立即执行这个队列中的所有回调，然后再进入事件循环的下一个阶段（如检查定时器、I/O 回调等）。</p><h5 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setTimeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nextTick1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nextTick2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;end&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h5 id="执行结果" tabindex="-1">执行结果： <a class="header-anchor" href="#执行结果" aria-label="Permalink to &quot;执行结果：&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">start;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">end;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nextTick1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nextTick2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setTimeout;</span></span></code></pre></div><p>可以看到，<code>process.nextTick</code> 的回调在 <code>setTimeout</code> 之前执行，且按照添加的顺序依次执行。</p><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ul><li>Node.js 和浏览器都使用事件循环处理异步任务，但实现细节和任务类型有所不同。</li><li><code>process.nextTick</code> 是 Node.js 中特有的微任务，具有最高的执行优先级，会在当前操作结束后立即执行。</li><li>理解事件循环和 <code>process.nextTick</code> 的执行顺序对于编写高效的 Node.js 程序非常重要。</li></ul>`,16)]))}const r=i(t,[["render",l]]);export{c as __pageData,r as default};
