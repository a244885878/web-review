import{_ as i,c as a,o as l,ae as t}from"./chunks/framework.Cthp9TdA.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"02_css/css 伪元素和伪类的区别和作用？.md","filePath":"02_css/css 伪元素和伪类的区别和作用？.md"}'),e={name:"02_css/css 伪元素和伪类的区别和作用？.md"};function n(h,s,p,k,d,r){return l(),a("div",null,s[0]||(s[0]=[t(`<blockquote><p>CSS 伪元素和伪类都是用来向选择器添加特殊效果的，但它们之间存在重要的区别。理解这些区别以及它们各自的作用，对于编写高效和灵活的 CSS 代码至关重要。</p></blockquote><h4 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h4><ul><li>本质不同： <ul><li>伪类 (Pseudo-classes) 描述的是元素的状态。例如，<code>:hover</code> 伪类描述的是鼠标悬停在元素上的状态，<code>:active</code> 描述的是元素被激活的状态。它们本质上是选择器的扩展，允许你根据元素的状态应用样式。</li><li>伪元素 (Pseudo-elements) 创建的是文档树中不存在的虚拟元素。例如，<code>::before</code> 和 <code>::after</code> 伪元素可以在元素的内容之前或之后插入内容。它们允许你向元素添加额外的样式，而无需修改 HTML 结构。</li></ul></li><li>语法不同： <ul><li>在 CSS2 中，伪类和伪元素都使用单冒号 (<code>:</code>)。</li><li>在 CSS3 中，为了区分伪类和伪元素，建议伪元素使用双冒号 (<code>::</code>)，例如 <code>::before</code>、<code>::after</code>。虽然现在大多数浏览器仍然支持单冒号的伪元素写法，但使用双冒号是更好的实践，可以避免混淆。伪类仍然使用单冒号，例如 <code>:hover</code>、<code>:focus</code>。</li></ul></li><li>作用对象不同： <ul><li>伪类作用于已存在的元素，根据元素的状态应用样式。</li><li>伪元素创建新的虚拟元素，并可以像普通元素一样设置样式。</li></ul></li><li>数量限制： <ul><li>一个选择器可以同时使用多个伪类，例如 a:hover:focus。</li><li>一个选择器只能使用一个伪元素。</li></ul></li></ul><h4 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h4><h5 id="伪类-pseudo-classes" tabindex="-1">伪类 (Pseudo-classes) <a class="header-anchor" href="#伪类-pseudo-classes" aria-label="Permalink to &quot;伪类 (Pseudo-classes)&quot;">​</a></h5><p>伪类主要用于根据元素的状态或文档结构中的位置来应用样式。一些常见的伪类包括：</p><ul><li>:hover：鼠标悬停在元素上。</li><li>:active：元素被激活（例如，鼠标点击时）。</li><li>:focus：元素获得焦点（例如，通过键盘 Tab 键）。</li><li>:visited：链接已被访问。</li><li>:link：链接未被访问。</li><li>:first-child：元素的第一个子元素。</li><li>:last-child：元素的最后一个子元素。</li><li>:nth-child(n)：元素的第 n 个子元素。</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 鼠标悬停在链接上时，文字变为红色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:nth-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">even</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#f2f2f2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 偶数行列表项背景色为浅灰色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="伪元素-pseudo-elements" tabindex="-1">伪元素 (Pseudo-elements) <a class="header-anchor" href="#伪元素-pseudo-elements" aria-label="Permalink to &quot;伪元素 (Pseudo-elements)&quot;">​</a></h5><p>伪元素主要用于在元素的内容之前或之后插入内容，或用于设置元素的部分样式。一些常见的伪元素包括：</p><ul><li>::before：在元素内容之前插入内容。</li><li>::after：在元素内容之后插入内容。</li><li>::first-line：选择元素的第一行。</li><li>::first-letter：选择元素的第一个字母。</li><li>::selection：选择用户选中的文本。</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;»&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 在段落前插入 » 符号 */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  margin-right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.highlight::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">yellow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 在高亮文本下方添加黄色横线 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th>伪类 (Pseudo-classes)</th><th>伪元素 (Pseudo-elements)</th></tr></thead><tbody><tr><td>本质</td><td>元素的状态</td><td>虚拟的元素</td></tr><tr><td>语法</td><td>单冒号 (<code>:</code>)</td><td>双冒号 (<code>::</code>)（推荐）</td></tr><tr><td>作用对象</td><td>已存在的元素</td><td>新创建的虚拟元素</td></tr><tr><td>数量限制</td><td>可多个</td><td>只能一个</td></tr></tbody></table>`,14)]))}const E=i(e,[["render",n]]);export{c as __pageData,E as default};
