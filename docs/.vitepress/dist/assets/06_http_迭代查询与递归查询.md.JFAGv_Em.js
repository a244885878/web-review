import{_ as a,c as e,o as d,ae as r}from"./chunks/framework.Cthp9TdA.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"06_http/迭代查询与递归查询.md","filePath":"06_http/迭代查询与递归查询.md"}'),l={name:"06_http/迭代查询与递归查询.md"};function o(i,t,h,_,n,s){return d(),e("div",null,t[0]||(t[0]=[r('<h4 id="什么是迭代查询和递归查询" tabindex="-1">什么是迭代查询和递归查询？ <a class="header-anchor" href="#什么是迭代查询和递归查询" aria-label="Permalink to &quot;什么是迭代查询和递归查询？&quot;">​</a></h4><p>简单来说，这两种查询方式描述的是在进行信息查找时，查询发起方和协助查询方之间的交互方式。</p><ul><li>递归查询： 查询发起方发出一个请求后，负责处理该请求的服务器必须返回最终结果。如果服务器没有直接答案，它会代替查询方继续向其他服务器查询，直到获得最终答案并返回。就像你委托朋友办事，你只管等结果，中间过程都由朋友负责。</li><li>迭代查询： 查询发起方发出一个请求后，如果负责处理该请求的服务器没有直接答案，它会返回一个线索，告诉查询方下一步应该去哪里查询。查询方需要根据线索继续查询，直到找到最终答案。就像你自己按图索骥，每到一个地方问路，别人告诉你下一个方向，你需要自己走过去。</li></ul><h4 id="dns-查询中的应用" tabindex="-1">DNS 查询中的应用 <a class="header-anchor" href="#dns-查询中的应用" aria-label="Permalink to &quot;DNS 查询中的应用&quot;">​</a></h4><p>DNS（域名系统）查询是这两种查询方式的典型应用场景。当我们访问一个网站时，需要将域名（www.google.com）转换为 IP 地址，这个转换过程就需要用到 DNS 查询。</p><ul><li>递归查询（通常发生在客户端与本地域名服务器之间）： 你的电脑（DNS 客户端）向你所在网络设置的本地域名服务器发起 DNS 查询请求，要求解析某个域名。本地域名服务器收到请求后，如果本地缓存没有对应的 IP 地址，它会使用递归查询的方式，代替你的电脑向其他 DNS 服务器（例如根域名服务器、顶级域名服务器等）发起查询，直到获得最终的 IP 地址，然后返回给你的电脑。</li><li>迭代查询（通常发生在本地域名服务器与其他 DNS 服务器之间）： 本地域名服务器在向上级 DNS 服务器查询时，通常使用迭代查询。例如，www.google.com 的 IP 地址，根域名服务器可能不会直接返回 IP 地址，www.google.com 域的顶级域名服务器的地址。本地域名服务器再向该顶级域名服务器查询，www.google.com 域的权威域名服务器的地址。本地域名服务器最终向权威域名服务器查询，获得最终的 IP 地址。</li></ul><h4 id="举例说明" tabindex="-1">举例说明 <a class="header-anchor" href="#举例说明" aria-label="Permalink to &quot;举例说明&quot;">​</a></h4><p>假设你想知道“小明”住在哪里。</p><ul><li>递归查询： 你问你的朋友：“你知道小明住哪里吗？” 你的朋友如果不知道，他会去问他的朋友，他的朋友再问他的朋友，直到有人知道小明住在哪里，然后把地址一级一级地传回来告诉你。</li><li>迭代查询： 你问路人：“你知道小明住哪里吗？” 路人说：“你去找 XX 小区的人问问。” 你就去 XX 小区问，小区里的人说：“你去 X 栋楼问问。” 你就去 X 栋楼问，最后找到了小明家。</li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特征</th><th>递归查询</th><th>迭代查询</th></tr></thead><tbody><tr><td>查询主体</td><td>服务器代替客户端查询</td><td>客户端自己进行多次查询</td></tr><tr><td>过程</td><td>一次请求，服务器返回最终结果</td><td>多次请求，服务器只提供线索</td></tr><tr><td>适用场景</td><td>客户端与本地域名服务器之间</td><td>本地域名服务器与其他 DNS 服务器之间</td></tr><tr><td>优点</td><td>客户端简单，只需等待结果</td><td>服务器压力较小</td></tr><tr><td>缺点</td><td>服务器压力较大，需要较高的处理能力和带宽资源</td><td>客户端较为复杂，需要进行多次请求和跳转</td></tr></tbody></table>',11)]))}const u=a(l,[["render",o]]);export{p as __pageData,u as default};
