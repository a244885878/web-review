import{_ as t,c as e,o,ae as r}from"./chunks/framework.Cthp9TdA.js";const P=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"06_http/为什么udp不会粘包？.md","filePath":"06_http/为什么udp不会粘包？.md"}'),_={name:"06_http/为什么udp不会粘包？.md"};function p(d,a,n,c,i,l){return o(),e("div",null,a[0]||(a[0]=[r('<blockquote><p>在计算机网络中，粘包是指发送方发送的多个数据包在接收方被当成一个包接收的现象。这通常发生在 TCP 协议中，而 UDP 协议则不会出现粘包问题。</p></blockquote><h4 id="tcp-粘包的原因" tabindex="-1">TCP 粘包的原因 <a class="header-anchor" href="#tcp-粘包的原因" aria-label="Permalink to &quot;TCP 粘包的原因&quot;">​</a></h4><p>TCP 是一种面向流的协议，它将数据看作连续的字节流。为了提高传输效率，TCP 可能会将多个小的数据包合并成一个大的数据包进行发送。接收方在接收到数据后，可能会将多个数据包当成一个包进行处理，从而导致粘包现象的发生。</p><h4 id="udp-不会粘包的原因" tabindex="-1">UDP 不会粘包的原因 <a class="header-anchor" href="#udp-不会粘包的原因" aria-label="Permalink to &quot;UDP 不会粘包的原因&quot;">​</a></h4><p>与 TCP 不同，UDP 是一种面向数据报的协议。每个 UDP 数据包都是一个独立的单元，包含完整的数据信息。UDP 不会对数据包进行合并，每个数据包都会被单独发送和接收。因此，接收方在接收到 UDP 数据包时，总是能够将其作为一个完整的包进行处理，不会出现粘包现象。</p><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>UDP 不会粘包的原因在于其面向数据报的特性。每个 UDP 数据包都是独立的，不会与其他数据包合并，从而避免了粘包问题的发生。</p>',7)]))}const h=t(_,[["render",p]]);export{P as __pageData,h as default};
