import{_ as a,c as s,o as t,ae as e}from"./chunks/framework.Cthp9TdA.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"07_浏览器/事件触发的过程是怎样的.md","filePath":"07_浏览器/事件触发的过程是怎样的.md"}'),l={name:"07_浏览器/事件触发的过程是怎样的.md"};function n(d,i,h,o,p,r){return t(),s("div",null,i[0]||(i[0]=[e(`<p>事件触发的过程可以概括为以下几个阶段，通常被称为“事件流”：</p><h4 id="_1-捕获阶段-capturing-phase" tabindex="-1">1. 捕获阶段（Capturing Phase）： <a class="header-anchor" href="#_1-捕获阶段-capturing-phase" aria-label="Permalink to &quot;1. 捕获阶段（Capturing Phase）：&quot;">​</a></h4><ul><li>当一个事件发生时（例如用户点击了一个按钮），浏览器会首先从顶层对象（通常是 <code>window</code> 对象）开始，沿着 DOM 树向下查找，直到找到目标元素（即触发事件的那个元素）。</li><li>在这个过程中，事件会依次经过其所有父级元素。如果某个父级元素绑定了捕获型事件监听器（使用 <code>addEventListener</code> 方法，并将第三个参数设置为 <code>true</code>），那么该监听器就会被触发。</li><li>这个阶段就像“捕获”罪犯一样，从上往下查找。</li></ul><h4 id="_2-目标阶段-target-phase" tabindex="-1">2. 目标阶段（Target Phase）： <a class="header-anchor" href="#_2-目标阶段-target-phase" aria-label="Permalink to &quot;2. 目标阶段（Target Phase）：&quot;">​</a></h4><ul><li>事件到达目标元素。</li><li>如果目标元素自身绑定了相应的事件监听器，那么这些监听器会按照它们被绑定的顺序依次触发（无论是冒泡型还是捕获型）。</li></ul><h4 id="_3-冒泡阶段-bubbling-phase" tabindex="-1">3. 冒泡阶段（Bubbling Phase）： <a class="header-anchor" href="#_3-冒泡阶段-bubbling-phase" aria-label="Permalink to &quot;3. 冒泡阶段（Bubbling Phase）：&quot;">​</a></h4><ul><li>事件从目标元素开始，沿着 DOM 树向上冒泡，依次传递给其父级元素。</li><li>如果某个父级元素绑定了冒泡型事件监听器（这是默认的事件绑定方式，即 <code>addEventListener</code> 方法的第三个参数不设置或设置为 <code>false</code>），那么该监听器就会被触发。</li><li>这个阶段就像水底冒泡泡一样，从下往上冒。</li></ul><h4 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h4><p>整个事件触发的流程是：<strong>捕获阶段 → 目标阶段 → 冒泡阶段</strong>。</p><h4 id="举例说明" tabindex="-1">举例说明： <a class="header-anchor" href="#举例说明" aria-label="Permalink to &quot;举例说明：&quot;">​</a></h4><p>假设有以下 HTML 结构：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;grandparent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;parent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;child&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Click me&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果用户点击了 <code>button</code> 元素（<code>id</code> 为 <code>child</code>），事件触发的顺序如下：</p><ol><li>捕获阶段： <code>window → document → &lt;html&gt; → &lt;body&gt; → &lt;div id=&quot;grandparent&quot;&gt; → &lt;div id=&quot;parent&quot;&gt;</code></li><li>目标阶段： <code>&lt;button id=&quot;child&quot;&gt;</code></li><li>冒泡阶段： <code>&lt;div id=&quot;parent&quot;&gt; → &lt;div id=&quot;grandparent&quot;&gt; → &lt;body&gt; → &lt;html&gt; → document → window</code></li></ol><p>addEventListener 的第三个参数：</p><p><code>addEventListener</code> 方法的第三个参数用于指定事件监听器是捕获型还是冒泡型：</p><ul><li><code>true</code>：捕获型事件监听器。</li><li><code>false</code>（或不设置）：冒泡型事件监听器。</li></ul><p>阻止事件传播：</p><p>可以使用 <code>event.stopPropagation()</code> 方法来阻止事件继续传播（包括<strong>阻止冒泡和捕获</strong>）。例如，在 <code>child</code> 元素的点击事件监听器中使用 <code>event.stopPropagation()</code>，就可以阻止事件继续向上冒泡到 <code>parent</code> 和 <code>grandparent</code> 元素。</p><p>事件委托/事件代理：</p><p>利用事件冒泡的机制，可以将事件监听器绑定到父级元素上，由父级元素来代理处理子元素的事件。这样做的好处是可以减少事件监听器的数量，提高性能。</p><h4 id="特殊情况" tabindex="-1">特殊情况： <a class="header-anchor" href="#特殊情况" aria-label="Permalink to &quot;特殊情况：&quot;">​</a></h4><p>并非所有事件都支持冒泡。例如，<code>focus</code>、<code>blur</code>、<code>load</code> 等事件就不支持冒泡。</p>`,23)]))}const E=a(l,[["render",n]]);export{k as __pageData,E as default};
