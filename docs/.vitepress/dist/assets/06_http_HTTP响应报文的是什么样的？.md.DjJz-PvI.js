import{_ as a,c as t,o as n,ae as l}from"./chunks/framework.Cthp9TdA.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"06_http/HTTP响应报文的是什么样的？.md","filePath":"06_http/HTTP响应报文的是什么样的？.md"}'),s={name:"06_http/HTTP响应报文的是什么样的？.md"};function i(o,e,p,d,c,h){return n(),t("div",null,e[0]||(e[0]=[l(`<p>HTTP 响应报文通常包含以下几个部分：</p><h4 id="_1-状态行-status-line-包含了-http-协议版本、状态码和状态码对应的说明。-例如" tabindex="-1">1. 状态行 (Status Line)： 包含了 HTTP 协议版本、状态码和状态码对应的说明。 例如： <a class="header-anchor" href="#_1-状态行-status-line-包含了-http-协议版本、状态码和状态码对应的说明。-例如" aria-label="Permalink to &quot;1. 状态行 (Status Line)： 包含了 HTTP 协议版本、状态码和状态码对应的说明。 例如：&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HTTP/1.1 200 OK</span></span></code></pre></div><ul><li>HTTP/1.1：表示使用的 HTTP 版本。</li><li>200：状态码，表示请求成功。</li><li>OK：状态码的描述信息。</li></ul><h4 id="_2-响应头-response-headers-包含了一些关于服务器、响应内容等的描述信息-每个头部字段由键值对组成。例如" tabindex="-1">2. 响应头 (Response Headers)： 包含了一些关于服务器、响应内容等的描述信息，每个头部字段由键值对组成。例如： <a class="header-anchor" href="#_2-响应头-response-headers-包含了一些关于服务器、响应内容等的描述信息-每个头部字段由键值对组成。例如" aria-label="Permalink to &quot;2. 响应头 (Response Headers)： 包含了一些关于服务器、响应内容等的描述信息，每个头部字段由键值对组成。例如：&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Content-Type: text/html; charset=UTF-8</span></span>
<span class="line"><span>Content-Length: 1234</span></span>
<span class="line"><span>Server: Apache/2.4.41 (Ubuntu)</span></span></code></pre></div><ul><li>Content-Type：响应体的内容类型（如 text/html）。</li><li>Content-Length：响应体的长度，单位为字节。</li><li>Server：服务器信息。</li></ul><h4 id="_3-空行-blank-line-在响应头和响应体之间有一个空行-用来分隔响应头和响应体。" tabindex="-1">3. 空行 (Blank Line)： 在响应头和响应体之间有一个空行，用来分隔响应头和响应体。 <a class="header-anchor" href="#_3-空行-blank-line-在响应头和响应体之间有一个空行-用来分隔响应头和响应体。" aria-label="Permalink to &quot;3. 空行 (Blank Line)： 在响应头和响应体之间有一个空行，用来分隔响应头和响应体。&quot;">​</a></h4><h4 id="_4-响应体-response-body-实际返回的内容数据。例如网页的-html-内容、图片、json-数据等。如果响应没有内容-例如-204-no-content-状态码-则没有响应体。" tabindex="-1">4. 响应体 (Response Body)： 实际返回的内容数据。例如网页的 HTML 内容、图片、JSON 数据等。如果响应没有内容（例如 204 No Content 状态码），则没有响应体。 <a class="header-anchor" href="#_4-响应体-response-body-实际返回的内容数据。例如网页的-html-内容、图片、json-数据等。如果响应没有内容-例如-204-no-content-状态码-则没有响应体。" aria-label="Permalink to &quot;4. 响应体 (Response Body)： 实际返回的内容数据。例如网页的 HTML 内容、图片、JSON 数据等。如果响应没有内容（例如 204 No Content 状态码），则没有响应体。&quot;">​</a></h4><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;html&gt;</span></span>
<span class="line"><span>  &lt;head&gt;&lt;title&gt;Example&lt;/title&gt;&lt;/head&gt;</span></span>
<span class="line"><span>  &lt;body&gt;&lt;h1&gt;Hello, World!&lt;/h1&gt;&lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre></div><h4 id="例子" tabindex="-1">例子： <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子：&quot;">​</a></h4><p>完整的 HTTP 响应报文示例如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HTTP/1.1 200 OK</span></span>
<span class="line"><span>Content-Type: text/html; charset=UTF-8</span></span>
<span class="line"><span>Content-Length: 1256</span></span>
<span class="line"><span>Server: Apache/2.4.41 (Ubuntu)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;html&gt;</span></span>
<span class="line"><span>  &lt;head&gt;&lt;title&gt;Example&lt;/title&gt;&lt;/head&gt;</span></span>
<span class="line"><span>  &lt;body&gt;&lt;h1&gt;Hello, World!&lt;/h1&gt;&lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre></div><h4 id="常见的状态码分类" tabindex="-1">常见的状态码分类： <a class="header-anchor" href="#常见的状态码分类" aria-label="Permalink to &quot;常见的状态码分类：&quot;">​</a></h4><ul><li>1xx（信息性状态码）：表示请求已被接受，需要继续处理。</li><li>2xx（成功状态码）：表示请求已成功处理。 <ul><li><code>200 OK</code>：请求成功。</li><li><code>201 Created</code>：请求成功并创建了新的资源。</li><li><code>204 No Content</code>：请求成功，但没有返回任何内容。</li></ul></li><li>3xx（重定向状态码）：表示需要客户端采取进一步的操作才能完成请求。 <ul><li><code>301 Moved Permanently</code>：请求的资源已永久移动到新的位置。</li><li><code>302 Found</code>：请求的资源临时移动到新的位置。</li><li><code>304 Not Modified</code>：客户端的缓存版本是最新的，无需重新获取。</li></ul></li><li>4xx（客户端错误状态码）：表示客户端发送的请求有错误。 <ul><li><code>400 Bad Request</code>：请求无效。</li><li><code>401 Unauthorized</code>：需要身份验证。</li><li><code>403 Forbidden</code>：服务器拒绝请求。</li><li><code>404 Not Found</code>：请求的资源不存在。</li></ul></li><li>5xx（服务器错误状态码）：表示服务器在处理请求时发生了错误。 <ul><li><code>500 Internal Server Error</code>：服务器内部错误。</li><li><code>502 Bad Gateway</code>：作为网关或代理的服务器从上游服务器收到无效响应。</li><li><code>503 Service Unavailable</code>：服务器暂时无法处理请求。</li></ul></li></ul>`,16)]))}const g=a(s,[["render",i]]);export{u as __pageData,g as default};
