import{_ as i,c as a,o as l,ae as n}from"./chunks/framework.Cthp9TdA.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"03_js/js 为什么typeof null是object.md","filePath":"03_js/js 为什么typeof null是object.md"}'),e={name:"03_js/js 为什么typeof null是object.md"};function t(p,s,h,k,o,d){return l(),a("div",null,s[0]||(s[0]=[n(`<blockquote><p>在 JavaScript 中，<code>typeof null</code> 的结果是 <code>object</code> 是一个历史遗留问题，通常被认为是 JavaScript 的一个 bug。虽然现在已经广为人知并且被接受，但理解其背后的原因有助于我们更好地理解 JavaScript 的类型系统。</p></blockquote><h4 id="原因" tabindex="-1">原因： <a class="header-anchor" href="#原因" aria-label="Permalink to &quot;原因：&quot;">​</a></h4><p>简单来说，这是因为在 JavaScript 的早期版本中，类型标签是以 32 位二进制的形式存储的。其中，前几位（通常是 3 位）用于表示值的类型。</p><ul><li>对象（Object）： 如果这几位是 <code>000</code>，则会被识别为对象。</li><li>Null： <code>null</code> 值的所有位都是 <code>0</code>。</li></ul><p>因此，当使用 <code>typeof</code> 操作符检测 <code>null</code> 时，它会检查这几位，发现是 <code>000</code>，于是错误地将其识别为 <code>object</code>。</p><h4 id="更详细的解释" tabindex="-1">更详细的解释： <a class="header-anchor" href="#更详细的解释" aria-label="Permalink to &quot;更详细的解释：&quot;">​</a></h4><ol><li>二进制表示： JavaScript 在底层使用二进制来存储数据。每个值都有一个类型标签，用于区分不同的数据类型。</li><li>类型标签： 在早期的 JavaScript 实现中，类型标签存储在值的低位。对象类型的标签是 000。</li><li>Null 的特殊性： null 表示一个空指针或空对象引用。在二进制表示中，null 的所有位都是 0。</li><li><code>typeof</code> 的误判： 当 <code>typeof</code> 操作符检查 <code>null</code> 时，它会检查类型标签，发现是 <code>000</code>，因此错误地将其识别为 object。</li></ol><p>这并不是说 <code>null</code> 就是一个对象。 <code>null</code> 是一种基本数据类型，表示一个空值，而 <code>object</code> 是一种复杂数据类型，表示一个包含属性和方法的实体。</p><h4 id="现代-javascript-引擎" tabindex="-1">现代 JavaScript 引擎： <a class="header-anchor" href="#现代-javascript-引擎" aria-label="Permalink to &quot;现代 JavaScript 引擎：&quot;">​</a></h4><p>即使在现代 JavaScript 引擎中，这个行为仍然保留了下来，主要是为了向后兼容性。如果现在修改这个行为，可能会导致大量的现有代码出现问题。</p><p>如何正确判断 <code>null</code>：</p><p>要正确判断一个值是否为 <code>null</code>，应该使用严格相等运算符 <code>===</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value is null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确判断</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value is null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误判断，不会执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 不推荐，容易混淆</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value is null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h4><p><code>typeof null</code> 等于 <code>object</code> 是一个历史遗留的 bug，但它已经成为了 JavaScript 语言的一部分。理解其背后的原因可以帮助我们避免在代码中犯类似的错误，并更好地理解 JavaScript 的类型系统。在实际开发中，应该使用 <code>=== null</code> 来正确判断一个值是否为 <code>null</code>。</p>`,15)]))}const E=i(e,[["render",t]]);export{r as __pageData,E as default};
