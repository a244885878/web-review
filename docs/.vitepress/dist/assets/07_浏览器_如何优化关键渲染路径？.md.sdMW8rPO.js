import{_ as i,c as l,o as e,ae as t}from"./chunks/framework.Cthp9TdA.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"07_浏览器/如何优化关键渲染路径？.md","filePath":"07_浏览器/如何优化关键渲染路径？.md"}'),r={name:"07_浏览器/如何优化关键渲染路径？.md"};function o(c,a,_,n,d,h){return e(),l("div",null,a[0]||(a[0]=[t('<blockquote><p>关键渲染路径（Critical Rendering Path，CRP） 是指浏览器从接收 HTML、CSS、JavaScript 等资源开始，到页面首次渲染完成的过程。优化 CRP 是提升网页性能的关键。</p></blockquote><h4 id="理解关键渲染路径" tabindex="-1">理解关键渲染路径 <a class="header-anchor" href="#理解关键渲染路径" aria-label="Permalink to &quot;理解关键渲染路径&quot;">​</a></h4><ul><li>组成部分： HTML 解析、CSSOM 构建、渲染树构建、布局、绘制。</li><li>影响因素： 资源数量、大小、加载顺序、JavaScript 执行时机。</li></ul><h4 id="优化策略" tabindex="-1">优化策略 <a class="header-anchor" href="#优化策略" aria-label="Permalink to &quot;优化策略&quot;">​</a></h4><h5 id="_1-减少关键资源" tabindex="-1">1. 减少关键资源 <a class="header-anchor" href="#_1-减少关键资源" aria-label="Permalink to &quot;1. 减少关键资源&quot;">​</a></h5><ul><li>删除非关键资源： 移除不影响首屏渲染的资源。</li><li>延迟加载： 将非首屏资源延迟加载。</li><li>异步加载： 将 JavaScript 文件标记为 <code>async</code> 或 <code>defer</code>，避免阻塞渲染。</li></ul><h5 id="_2-优化资源大小" tabindex="-1">2. 优化资源大小 <a class="header-anchor" href="#_2-优化资源大小" aria-label="Permalink to &quot;2. 优化资源大小&quot;">​</a></h5><ul><li>压缩： 使用 Gzip、Brotli 等压缩算法。</li><li>图片优化： 压缩图片、使用 WebP 格式、懒加载。</li><li>代码精简： 删除冗余代码、合并文件。</li></ul><h5 id="_3-优化加载顺序" tabindex="-1">3. 优化加载顺序 <a class="header-anchor" href="#_3-优化加载顺序" aria-label="Permalink to &quot;3. 优化加载顺序&quot;">​</a></h5><ul><li>内联关键 CSS： 将影响首屏渲染的 CSS 内联到 HTML 中。</li><li>最小化 HTTP 请求： 合并文件、使用 CSS Sprites。</li><li>利用浏览器缓存： 设置缓存头。</li></ul><h5 id="_4-优化-javascript-执行" tabindex="-1">4. 优化 JavaScript 执行 <a class="header-anchor" href="#_4-优化-javascript-执行" aria-label="Permalink to &quot;4. 优化 JavaScript 执行&quot;">​</a></h5><ul><li>延迟执行： 将 JavaScript 放置在 body 底部或使用 defer 属性。</li><li>异步执行： 使用 async 属性。</li><li>最小化 JavaScript 执行时间： 优化算法、避免重绘重排。</li></ul><h5 id="_5-其他优化" tabindex="-1">5. 其他优化 <a class="header-anchor" href="#_5-其他优化" aria-label="Permalink to &quot;5. 其他优化&quot;">​</a></h5><ul><li>减少 DOM 操作： 尽量减少 DOM 操作，使用虚拟 DOM。</li><li>使用 CDN： 加速资源加载。</li><li>避免重绘重排： 使用 CSS Transform、Opacity 等属性。</li><li>利用浏览器缓存： 充分利用浏览器缓存。</li></ul>',14)]))}const p=i(r,[["render",o]]);export{u as __pageData,p as default};
