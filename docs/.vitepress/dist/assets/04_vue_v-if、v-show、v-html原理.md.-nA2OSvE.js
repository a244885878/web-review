import{_ as d,c as o,o as t,ae as c}from"./chunks/framework.Cthp9TdA.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"04_vue/v-if、v-show、v-html原理.md","filePath":"04_vue/v-if、v-show、v-html原理.md"}'),a={name:"04_vue/v-if、v-show、v-html原理.md"};function l(i,e,h,r,v,s){return t(),o("div",null,e[0]||(e[0]=[c('<blockquote><p><code>v-if</code>、<code>v-show</code> 和 <code>v-html</code> 都是 Vue.js 中用于操作 DOM 的指令，它们各自有着不同的作用和实现原理。下面我将分别介绍它们的原理以及区别：</p></blockquote><h4 id="_1-v-if" tabindex="-1">1. v-if <a class="header-anchor" href="#_1-v-if" aria-label="Permalink to &quot;1. v-if&quot;">​</a></h4><ul><li>原理： <code>v-if</code> 指令用于条件性地渲染一块内容。如果表达式的值为真，则渲染该元素；如果为假，则该元素及其包含的所有子元素都将被完全移除。它会在 DOM 树中添加或删除元素。</li><li>编译过程： <code>v-if</code> 在切换时有一个“局部编译/卸载”的过程。当条件为假时，不仅 DOM 元素会被移除，相关的组件实例也会被销毁，包括事件监听器等。当条件再次变为真时，会重新创建 DOM 元素和组件实例。</li><li>适用场景： 适用于在运行时条件很少改变的情况，因为它的切换开销较高。如果需要频繁切换元素的显示与隐藏，则不推荐使用 <code>v-if</code>。</li></ul><h4 id="_2-v-show" tabindex="-1">2. v-show <a class="header-anchor" href="#_2-v-show" aria-label="Permalink to &quot;2. v-show&quot;">​</a></h4><ul><li>原理： <code>v-show</code> 指令也用于条件性地显示元素。它通过设置元素的 <code>display</code> CSS 属性来控制元素的显示与隐藏。无论条件是真还是假，元素始终会被渲染到 DOM 中。</li><li>编译过程： <code>v-show</code> 只是简单地基于 CSS 进行切换，开销比 <code>v-if</code> 小得多。</li><li>适用场景： 适用于需要频繁切换元素显示与隐藏的情况。</li></ul><h4 id="_3-v-html" tabindex="-1">3. v-html <a class="header-anchor" href="#_3-v-html" aria-label="Permalink to &quot;3. v-html&quot;">​</a></h4><ul><li>原理： <code>v-html</code> 指令用于将 <code>HTML</code> 字符串渲染为真实的 <code>HTML</code> 内容。它会将指令所在元素的内容替换为给定的 <code>HTML</code> 字符串。</li><li>注意事项： 使用 v-html 时要特别小心，避免渲染用户提供的不可信的 <code>HTML</code> 内容，以防止 <code>XSS</code> 攻击。</li><li>实现： 底层实现是通过设置元素的 <code>innerHTML</code> 属性来实现的。</li></ul><h4 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h4><table tabindex="0"><thead><tr><th>指令</th><th>原理</th><th>编译过程</th><th>适用场景</th></tr></thead><tbody><tr><td><code>v-if</code></td><td>条件性地添加或删除 DOM 元素</td><td>有“局部编译/卸载”过程，开销较高</td><td>运行时条件很少改变</td></tr><tr><td><code>v-show</code></td><td>通过 CSS 的 <code>display</code> 属性控制显示与隐藏</td><td>简单地基于 CSS 切换，开销较小</td><td>需要频繁切换显示与隐藏</td></tr><tr><td><code>v-html</code></td><td>将 HTML 字符串渲染为 HTML 内容</td><td>设置元素的 <code>innerHTML</code> 属性</td><td>渲染 HTML 内容，注意 <code>XSS</code> 安全</td></tr></tbody></table><h4 id="补充说明" tabindex="-1">补充说明： <a class="header-anchor" href="#补充说明" aria-label="Permalink to &quot;补充说明：&quot;">​</a></h4><ul><li>在 Vue 3 中，<code>v-if</code> 和 <code>v-show</code> 的实现原理与 Vue 2 类似，但源码实现上有所不同。</li><li>在使用 <code>v-if</code> 和 <code>v-else-if</code>、<code>v-else</code> 构成条件判断时，要注意它们必须紧挨着。</li></ul>',11)]))}const u=d(a,[["render",l]]);export{_ as __pageData,u as default};
