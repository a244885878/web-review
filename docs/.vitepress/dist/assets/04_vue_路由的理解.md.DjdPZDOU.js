import{_ as i,c as t,o as l,ae as a}from"./chunks/framework.Cthp9TdA.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"04_vue/路由的理解.md","filePath":"04_vue/路由的理解.md"}'),o={name:"04_vue/路由的理解.md"};function d(s,e,h,c,r,n){return l(),t("div",null,e[0]||(e[0]=[a(`<h3 id="vue-路由模式对比与原理详解" tabindex="-1">Vue 路由模式对比与原理详解 <a class="header-anchor" href="#vue-路由模式对比与原理详解" aria-label="Permalink to &quot;Vue 路由模式对比与原理详解&quot;">​</a></h3><p>Vue Router 提供了两种主要的路由模式：<strong>hash</strong> 模式 和 <strong>history</strong> 模式。它们在 URL 结构、浏览器行为和实现原理上存在差异。</p><h4 id="_1-hash-模式" tabindex="-1">1. hash 模式 <a class="header-anchor" href="#_1-hash-模式" aria-label="Permalink to &quot;1. hash 模式&quot;">​</a></h4><ul><li>URL 结构: URL 中包含一个 <code>#</code> 符号，后面跟着一个字符串，如 <code>http://example.com/#/about</code>。<code>#</code> 及其后面的部分称作 <code>hash</code>。</li></ul><ul><li>浏览器行为: 改变 <code>hash</code> 部分不会导致页面刷新，而是会触发 <code>hashchange</code> 事件。</li><li>实现原理: <ul><li>Vue Router 监听 <code>hashchange</code> 事件。</li><li>当 <code>hash</code> 发生变化时，Vue Router 会根据新的 <code>hash</code> 值匹配对应的路由规则，更新视图。</li><li>浏览器虽然不会向服务器发送请求，但 <code>hash</code> 的变化会记录在浏览器历史中，用户可以前进后退。</li></ul></li><li>优点: <ul><li>兼容性好，几乎所有浏览器都支持。</li><li>对服务器没有特殊要求。</li></ul></li><li>缺点 <ul><li>URL 不美观，有 # 符号。</li><li>对于 SEO 不友好。</li></ul></li></ul><h4 id="_2-history-模式" tabindex="-1">2. history 模式 <a class="header-anchor" href="#_2-history-模式" aria-label="Permalink to &quot;2. history 模式&quot;">​</a></h4><ul><li>URL 结构: <code>URL</code> 看起来像正常的 <code>URL</code>，如 <code>http://example.com/about</code>。</li><li>浏览器行为: 改变 URL 不会立即向服务器发送请求，而是由前端路由来拦截。</li><li>实现原理: <ul><li>利用 HTML5 <code>History</code> Interface 提供的 <code>pushState</code> 和 <code>replaceState</code> 方法来操作浏览器历史记录。</li><li>当 <code>URL</code> 改变时，Vue Router 会捕获这个变化，并更新视图。</li><li>如果用户直接在地址栏输入 <code>URL</code> 并回车，浏览器会向服务器发送请求。</li></ul></li><li>优点: <ul><li><code>URL</code> 美观，更符合用户习惯。</li><li>对 <code>SEO</code> 友好。</li></ul></li><li>缺点: <ul><li>要求服务器配置。如果后端没有配置对应的路由，当用户直接访问某个 <code>URL</code> 时，会返回 <code>404</code> 错误。</li><li>兼容性相对 <code>hash</code> 模式稍差，不支持 <code>HTML5 History Interface</code> 的浏览器无法使用。</li></ul></li></ul><h4 id="两种模式的对比" tabindex="-1">两种模式的对比 <a class="header-anchor" href="#两种模式的对比" aria-label="Permalink to &quot;两种模式的对比&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特点</th><th>hash 模式</th><th>history 模式</th></tr></thead><tbody><tr><td>URL 结构</td><td>包含 #</td><td>不包含 #</td></tr><tr><td>浏览器行为</td><td>不会刷新页面</td><td>不会立即刷新页面</td></tr><tr><td>服务器要求</td><td>无</td><td>需要配置</td></tr><tr><td>SEO</td><td>不友好</td><td>友好</td></tr><tr><td>兼容性</td><td>好</td><td>相对较差</td></tr></tbody></table><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ul><li>选择哪种模式？ <ul><li>如果对 <code>SEO</code> 要求不高，或者后端不支持配置，可以选择 <code>hash</code> 模式。</li><li>如果对 <code>URL</code> 美观度和 <code>SEO</code> 有较高要求，并且后端已经配置好，可以选择 <code>history</code> 模式。</li></ul></li><li>如何配置？ <ul><li>在 <code>Vue Router</code> 的配置文件中，通过 <code>mode</code> 属性来设置路由模式：</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;history&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或 &#39;hash&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ul><li>后端配置 <ul><li>使用 <code>history</code> 模式时，需要在服务器端对所有可能出现的 <code>URL</code> 进行配置，返回同一个 <code>index.html</code> 页面。这样，前端路由就可以接管所有的 <code>URL</code>，并根据 <code>URL</code> 显示不同的内容。</li></ul></li></ul><h4 id="拓展" tabindex="-1">拓展 <a class="header-anchor" href="#拓展" aria-label="Permalink to &quot;拓展&quot;">​</a></h4><ul><li><code>SPA</code><strong>（单页应用）</strong>：Vue Router 是专门为 <code>SPA</code> 设计的路由管理器，它使得在单页面应用中实现导航变得非常简单。</li><li><strong>动态路由</strong>：Vue Router 支持动态路由，可以根据 URL 中的参数来匹配不同的组件。</li><li><strong>嵌套路由</strong>：Vue Router 支持嵌套路由，可以创建多层级的路由结构。</li></ul>`,15)]))}const k=i(o,[["render",d]]);export{p as __pageData,k as default};
