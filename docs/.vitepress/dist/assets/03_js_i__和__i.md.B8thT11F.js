import{_ as i,c as a,o as n,ae as h}from"./chunks/framework.Cthp9TdA.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"03_js/i++和++i.md","filePath":"03_js/i++和++i.md"}'),l={name:"03_js/i++和++i.md"};function k(t,s,p,e,E,d){return n(),a("div",null,s[0]||(s[0]=[h(`<p>在 JavaScript 中，<code>i++</code> 和 <code>++i</code> 都是自增运算符，用于将变量 i 的值递增 1。它们的主要区别在于它们在表达式中的返回值和执行时机：</p><p><code>i++</code> (后置递增)</p><ul><li>返回值： 返回 <code>i</code> 的原始值（递增之前的）。</li><li>执行时机： 在表达式中使用 <code>i</code> 的值之后，再将 <code>i</code> 的值递增 1。</li></ul><p><code>++i</code> (前置递增)</p><ul><li>返回值： 返回 <code>i</code> 的递增后的值。</li><li>执行时机： 在表达式中使用 <code>i</code> 的值之前，先将 <code>i</code> 的值递增 1。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a 的值为 5，i 的值为 6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：a: 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：i: 6</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b 的值为 6，j 的值为 6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：b: 6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;j:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, j); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：j: 6</span></span></code></pre></div><h5 id="更复杂的例子" tabindex="-1">更复杂的例子： <a class="header-anchor" href="#更复杂的例子" aria-label="Permalink to &quot;更复杂的例子：&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// y 的值为 6。计算过程：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. x++：返回 x 的原始值 2，然后 x 递增为 3。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. ++x：x 先递增为 4，然后返回递增后的值 4。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 2 + 4 = 6。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：x: 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;y:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：y: 6</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// n 的值为 6。计算过程：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. ++m：m 先递增为 3，然后返回递增后的值 3。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. m++：返回 m 的原始值 3，然后 m 递增为 4。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 3 + 3 = 6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;m:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, m); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：m: 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;n:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：n: 6</span></span></code></pre></div><h5 id="在循环中的应用" tabindex="-1">在循环中的应用： <a class="header-anchor" href="#在循环中的应用" aria-label="Permalink to &quot;在循环中的应用：&quot;">​</a></h5><p>在 <code>for</code> 循环中，通常使用 <code>i++</code> 来控制循环次数，因为在这种情况下，递增操作通常是循环体执行完毕后的一个独立步骤，返回值并不重要</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 0, 1, 2, 3, 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>虽然在简单的 <code>for</code> 循环中使用 <code>++i</code> 通常也能达到相同的效果，但在一些性能测试中，<code>++i</code> 可能会略微优于 <code>i++</code>，因为它不需要保存原始值。但这种性能差异通常非常小，可以忽略不计。因此，在 <code>for</code> 循环中，选择 <code>i++</code> 还是 <code>++i</code> 主要取决于个人偏好和代码的可读性。</p><h4 id="总结" tabindex="-1">总结： <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结：&quot;">​</a></h4><ul><li>如果只需要递增变量的值，而不需要在表达式中使用递增前或后的值，那么 i++ 和 ++i 的效果是一样的。</li><li>如果需要在表达式中使用递增后的值，则应该使用 <code>++i</code>。</li><li>如果需要在表达式中使用递增前的值，则应该使用 <code>i++</code>。</li></ul>`,14)]))}const o=i(l,[["render",k]]);export{g as __pageData,o as default};
