import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.Cthp9TdA.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"03_js/常见的位运算符有哪些？其计算规则是什么？.md","filePath":"03_js/常见的位运算符有哪些？其计算规则是什么？.md"}'),l={name:"03_js/常见的位运算符有哪些？其计算规则是什么？.md"};function e(p,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<blockquote><p>JavaScript 中常见的位运算符有以下 7 种：</p></blockquote><ul><li>按位与（AND） <code>&amp;</code></li><li>按位或（OR） <code>|</code></li><li>按位异或（XOR） <code>^</code></li><li>按位非（NOT） <code>~</code></li><li>左移（Left shift） <code>&lt;&lt;</code></li><li>有符号右移 <code>&gt;&gt;</code></li><li>无符号右移 <code>&gt;&gt;&gt;</code></li></ul><p>除了按位非（<code>~</code>）是一元运算符（只需要一个操作数），其他都是二元运算符（需要两个操作数）。</p><h4 id="下面分别介绍它们的计算规则" tabindex="-1">下面分别介绍它们的计算规则： <a class="header-anchor" href="#下面分别介绍它们的计算规则" aria-label="Permalink to &quot;下面分别介绍它们的计算规则：&quot;">​</a></h4><h5 id="_1-按位与-and" tabindex="-1">1. 按位与（AND） &amp; <a class="header-anchor" href="#_1-按位与-and" aria-label="Permalink to &quot;1. 按位与（AND） &amp;&quot;">​</a></h5><p>规则：如果两个操作数相应的二进制位都为 1，则结果的该位为 1，否则为 0。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5 的二进制表示：0101</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3 的二进制表示：0011</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果的二进制表示：0001 (只有最后一位都是 1)</span></span></code></pre></div><h5 id="_2-按位或-or" tabindex="-1">2. 按位或（OR） | <a class="header-anchor" href="#_2-按位或-or" aria-label="Permalink to &quot;2. 按位或（OR） |&quot;">​</a></h5><p>规则：如果两个操作数相应的二进制位中只要有一个为 1，则结果的该位为 1，否则为 0。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 7</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5 的二进制表示：0101</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3 的二进制表示：0011</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果的二进制表示：0111</span></span></code></pre></div><h5 id="_3-按位异或-xor" tabindex="-1">3. 按位异或（XOR） ^ <a class="header-anchor" href="#_3-按位异或-xor" aria-label="Permalink to &quot;3. 按位异或（XOR） ^&quot;">​</a></h5><p>规则：如果两个操作数相应的二进制位不同，则结果的该位为 1，否则为 0。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 6</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5 的二进制表示：0101</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3 的二进制表示：0011</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果的二进制表示：0110</span></span></code></pre></div><h5 id="_4-按位非-not" tabindex="-1">4. 按位非（NOT） ~ <a class="header-anchor" href="#_4-按位非-not" aria-label="Permalink to &quot;4. 按位非（NOT） ~&quot;">​</a></h5><p>规则：反转操作数的所有二进制位，即 0 变为 1，1 变为 0。需要注意的是，JavaScript 中使用 32 位有符号整数进行位运算，因此对一个数进行按位非运算，相当于对其取反再减 1。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -6</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5 的二进制表示：0000 0000 0000 0000 0000 0000 0000 0101</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 取反后的二进制表示：1111 1111 1111 1111 1111 1111 1111 1010</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由于是 32 位有符号整数，最高位是 1 表示负数，这个二进制表示的是 -6 的补码。</span></span></code></pre></div><h5 id="_5-左移-left-shift" tabindex="-1">5. 左移（Left shift） &lt;&lt; <a class="header-anchor" href="#_5-左移-left-shift" aria-label="Permalink to &quot;5. 左移（Left shift） &lt;&lt;&quot;">​</a></h5><p>规则：将操作数的二进制位向左移动指定的位数，高位被丢弃，低位补 0。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 20</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5 的二进制表示：0000 0000 0000 0000 0000 0000 0000 0101</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 左移 2 位后的二进制表示：0000 0000 0000 0000 0000 0000 0001 0100 (相当于 5 * 2^2 = 20)</span></span></code></pre></div><h5 id="_6-有符号右移" tabindex="-1">6. 有符号右移 &gt;&gt; <a class="header-anchor" href="#_6-有符号右移" aria-label="Permalink to &quot;6. 有符号右移 &gt;&gt;&quot;">​</a></h5><p>规则：将操作数的二进制位向右移动指定的位数，高位补符号位（正数补 0，负数补 1），低位被丢弃。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5 的二进制表示：0000 0000 0000 0000 0000 0000 0000 0101</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 右移 2 位后的二进制表示：0000 0000 0000 0000 0000 0000 0000 0001 (相当于 5 / 2^2 = 1.25，取整为 1)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -5 的二进制表示（补码）：1111 1111 1111 1111 1111 1111 1111 1011</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 右移 2 位后的二进制表示：1111 1111 1111 1111 1111 1111 1111 1110 (这是 -2 的补码)</span></span></code></pre></div><h5 id="_7-无符号右移" tabindex="-1">7. 无符号右移 &gt;&gt;&gt; <a class="header-anchor" href="#_7-无符号右移" aria-label="Permalink to &quot;7. 无符号右移 &gt;&gt;&gt;&quot;">​</a></h5><p>规则：将操作数的二进制位向右移动指定的位数，高位补 0，低位被丢弃。与有符号右移不同的是，无论操作数是正数还是负数，高位都补 0。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1073741822</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -5 的二进制表示（补码）：1111 1111 1111 1111 1111 1111 1111 1011</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 无符号右移 2 位后的二进制表示：0011 1111 1111 1111 1111 1111 1111 1110</span></span></code></pre></div><p>位运算符主要用于对整数进行位级别的操作，在某些特定的场景下可以提高性能，例如：</p><ul><li>状态标志管理： 使用不同的位来表示不同的状态，通过位运算来设置、清除或检查状态。</li><li>快速乘除 2 的幂： 左移相当于乘以 2 的幂，右移相当于除以 2 的幂。</li><li>哈希计算和校验： 位运算可以用于哈希函数的实现和数据校验。</li></ul><blockquote><p>虽然位运算在某些情况下很有用，但在日常开发中并不常用，除非你需要进行一些底层的位操作或者对性能有极致的追求。理解位运算的规则对于理解计算机底层原理也是有帮助的。</p></blockquote>`,28)]))}const g=i(l,[["render",e]]);export{o as __pageData,g as default};
