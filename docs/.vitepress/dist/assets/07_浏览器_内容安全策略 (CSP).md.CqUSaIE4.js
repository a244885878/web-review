import{_ as r,c as s,o as e,ae as o}from"./chunks/framework.Cthp9TdA.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"07_浏览器/内容安全策略 (CSP).md","filePath":"07_浏览器/内容安全策略 (CSP).md"}'),l={name:"07_浏览器/内容安全策略 (CSP).md"};function a(i,t,n,c,d,g){return e(),s("div",null,t[0]||(t[0]=[o('<blockquote><p>内容安全策略 (Content Security Policy，CSP) 是一种附加的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本（XSS）和数据注入攻击等。这些攻击被用于从数据盗窃到网站篡改，再到恶意软件分发等各种目的。</p></blockquote><h4 id="csp-的作用" tabindex="-1">CSP 的作用 <a class="header-anchor" href="#csp-的作用" aria-label="Permalink to &quot;CSP 的作用&quot;">​</a></h4><ul><li><strong>限制可加载资源</strong>: 通过指定哪些资源（如脚本、样式表、图片等）可以被加载，从而限制了攻击者注入恶意代码的范围。</li><li><strong>防止 XSS 攻击</strong>: XSS 攻击者通常会注入恶意脚本，CSP 可以阻止这些脚本的执行。</li><li><strong>提升网站安全性</strong>: 通过限制可信资源，CSP 可以有效地提升网站的安全性，减少各种类型的攻击。</li></ul><h4 id="csp-的工作原理" tabindex="-1">CSP 的工作原理 <a class="header-anchor" href="#csp-的工作原理" aria-label="Permalink to &quot;CSP 的工作原理&quot;">​</a></h4><p>CSP 是通过在 <code>HTTP</code> 头部添加 <code>Content-Security-Policy</code> 指令来实现的。这个指令包含了一系列的规则，用来定义哪些资源可以被加载。</p><h5 id="示例" tabindex="-1">示例: <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例:&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Content-Security-Policy: default-src &#39;self&#39;; script-src &#39;self&#39; https://cdn.example.com; img-src &#39;self&#39; data:;</span></span></code></pre></div><ul><li><code>default-src &#39;self&#39;</code>;: 默认情况下，只允许加载来自同一个域的资源。</li><li><code>script-src &#39;self&#39; https://cdn.example.com;</code>: 允许加载来自自身域名和 <code>https://cdn.example.com</code> 的脚本。</li><li><code>img-src &#39;self&#39; data;</code>: 允许加载来自自身域名的图片和 <code>data URI</code> 的图片。</li></ul><h4 id="csp-的主要指令" tabindex="-1">CSP 的主要指令 <a class="header-anchor" href="#csp-的主要指令" aria-label="Permalink to &quot;CSP 的主要指令&quot;">​</a></h4><ul><li><strong>default-src</strong>: 指定一个默认的源列表，用于覆盖其他指令未明确指定的资源类型。</li><li><strong>script-src</strong>: 指定允许加载脚本的源列表。</li><li><strong>style-src</strong>: 指定允许加载样式表的源列表。</li><li><strong>img-src</strong>: 指定允许加载图片的源列表。</li><li><strong>object-src</strong>: 指定允许加载插件的源列表。</li><li><strong>frame-ancestors</strong>: 指定哪些页面可以嵌入当前页面。</li><li><strong>base-uri</strong>: 指定允许使用的 base URI。</li><li><strong>form-action</strong>: 指定允许提交表单的目标。</li><li><strong>frame-src</strong>: 指定允许嵌入 iframe 的源列表。</li><li><strong>child-src</strong>: 指定允许嵌入 frame、iframe 或 nested browsing contexts 的源列表。</li><li><strong>connect-src</strong>: 指定允许连接的源列表。</li><li><strong>font-src</strong>: 指定允许加载字体的源列表。</li><li><strong>manifest-src</strong>: 指定允许加载 manifest 文件的源列表。</li><li><strong>media-src</strong>: 指定允许加载音频和视频的源列表。</li><li><strong>worker-src</strong>: 指定允许加载 Worker 的源列表。</li><li><strong>prefetch-src</strong>: 指定允许预加载资源的源列表。</li><li><strong>report-uri</strong>: 指定报告违反 CSP 规则的事件的 URL。</li></ul><h4 id="csp-的优势" tabindex="-1">CSP 的优势 <a class="header-anchor" href="#csp-的优势" aria-label="Permalink to &quot;CSP 的优势&quot;">​</a></h4><ul><li><strong>预防 XSS 攻击</strong>: CSP 是目前最有效的预防 XSS 攻击的手段之一。</li><li><strong>提升网站安全性</strong>: CSP 可以有效地提升网站的安全性，减少各种类型的攻击。</li><li><strong>灵活配置</strong>: CSP 提供了丰富的配置选项，可以根据不同的需求进行灵活配置。</li><li><strong>兼容性好</strong>: CSP 已经被现代浏览器广泛支持。</li></ul><h4 id="csp-的局限性" tabindex="-1">CSP 的局限性 <a class="header-anchor" href="#csp-的局限性" aria-label="Permalink to &quot;CSP 的局限性&quot;">​</a></h4><ul><li><strong>配置复杂</strong>: CSP 的配置比较复杂，需要仔细考虑各种安全需求。</li><li><strong>性能影响</strong>: 过多的 CSP 规则可能会影响页面加载性能。</li><li><strong>无法完全阻止所有攻击</strong>: CSP 虽然可以有效地预防 XSS 攻击，但不能完全阻止所有类型的攻击。</li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>CSP 是一种非常重要的安全机制，可以有效地提高 Web 应用的安全性。通过合理配置 CSP，可以大大降低 XSS 攻击的风险。</p><h4 id="建议" tabindex="-1">建议: <a class="header-anchor" href="#建议" aria-label="Permalink to &quot;建议:&quot;">​</a></h4><ul><li>尽早引入 CSP: 在开发初期就引入 CSP，可以更好地保障网站的安全性。</li><li>逐步完善 CSP 规则: CSP 规则的配置是一个逐步完善的过程，需要不断地测试和调整。</li><li>结合其他安全措施: CSP 只是安全防护体系的一部分，还需要结合其他安全措施，如输入验证、输出编码等。</li></ul>',18)]))}const p=r(l,[["render",a]]);export{h as __pageData,p as default};
