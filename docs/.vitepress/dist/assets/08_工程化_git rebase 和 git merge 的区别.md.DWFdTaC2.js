import{_ as e,c as a,o as r,ae as i}from"./chunks/framework.Cthp9TdA.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"08_工程化/git rebase 和 git merge 的区别.md","filePath":"08_工程化/git rebase 和 git merge 的区别.md"}'),d={name:"08_工程化/git rebase 和 git merge 的区别.md"};function l(o,t,s,_,h,n){return r(),a("div",null,t[0]||(t[0]=[i('<ul><li><code>git merge</code>：将一个分支的更改合并到另一个分支，会产生一个新的合并提交。</li><li><code>git rebase</code>：将一个分支的更改“移植”到另一个分支，不会产生新的合并提交，而是重写提交历史。</li></ul><h4 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h4><table tabindex="0"><thead><tr><th>特性</th><th>git merge</th><th>git rebase</th></tr></thead><tbody><tr><td>提交历史</td><td>保留所有原始提交，形成分支状的提交历史</td><td>将所有提交“拍平”，形成线性的提交历史</td></tr><tr><td>提交信息</td><td>保留原始提交信息</td><td>可以修改提交信息</td></tr><tr><td>使用场景</td><td>适用于需要保留完整提交历史的场景</td><td>适用于需要保持提交历史简洁的场景</td></tr><tr><td>风险</td><td>较低，不会修改已有的提交</td><td>较高，会修改已有的提交，可能导致代码丢失或冲突</td></tr></tbody></table><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ul><li>如果你希望保留完整的提交历史，并且不介意提交历史看起来像分支一样，那么可以使用 git merge。</li><li>如果你希望提交历史看起来更简洁，更易于阅读，并且不介意修改提交历史，那么可以使用 git rebase。</li></ul><h4 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h4><ul><li>不要在公共分支上使用 git rebase，这会修改其他人的提交历史，可能导致代码丢失或冲突。</li><li>在使用 git rebase 之前，最好先备份你的代码，以防发生意外。</li></ul><h4 id="补充说明" tabindex="-1">补充说明 <a class="header-anchor" href="#补充说明" aria-label="Permalink to &quot;补充说明&quot;">​</a></h4><ul><li>git rebase 还有一些高级用法，例如交互式 rebase，可以让你更灵活地修改提交历史。</li><li>git merge 和 git rebase 并不是互斥的，你可以根据不同的场景选择不同的工具。</li></ul>',9)]))}const c=e(d,[["render",l]]);export{b as __pageData,c as default};
