import{_ as e,c as d,o as l,ae as a}from"./chunks/framework.Cthp9TdA.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"06_http/即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？.md","filePath":"06_http/即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？.md"}'),r={name:"06_http/即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？.md"};function o(i,t,_,n,h,s){return l(),d("div",null,t[0]||(t[0]=[a('<h4 id="_1-短轮询-short-polling" tabindex="-1">1. 短轮询（Short Polling） <a class="header-anchor" href="#_1-短轮询-short-polling" aria-label="Permalink to &quot;1. 短轮询（Short Polling）&quot;">​</a></h4><ul><li>原理： 客户端定时（如每隔几秒）向服务器发送 HTTP 请求，询问是否有新的消息。</li><li>优点： 实现简单，服务器端无需特殊处理。</li><li>缺点： 实时性差，轮询间隔内有消息到达，客户端也无法立即得知；资源浪费，频繁发送请求，即使没有新消息也会产生大量无效请求。</li></ul><h4 id="_2-长轮询-long-polling" tabindex="-1">2. 长轮询（Long Polling） <a class="header-anchor" href="#_2-长轮询-long-polling" aria-label="Permalink to &quot;2. 长轮询（Long Polling）&quot;">​</a></h4><ul><li>原理： 客户端向服务器发送 HTTP 请求，服务器收到请求后不会立即返回响应，而是保持连接，直到有新消息到达或者超时才返回响应。客户端收到响应后，会立即再次发送请求，重复这个过程。</li><li>优点： 实时性比短轮询好，有新消息时可以立即通知客户端。</li><li>缺点： 服务器端需要维护大量长连接，资源消耗较大；客户端需要不断发送请求，如果网络不稳定，可能会导致连接中断。</li></ul><h4 id="_3-sse-server-sent-events" tabindex="-1">3. SSE（Server-Sent Events） <a class="header-anchor" href="#_3-sse-server-sent-events" aria-label="Permalink to &quot;3. SSE（Server-Sent Events）&quot;">​</a></h4><ul><li>原理： 服务器端主动向客户端推送消息，客户端通过 EventSource API 接收消息。SSE 基于 HTTP 协议，但使用了一种特殊的响应格式，允许服务器持续推送数据。</li><li>优点： 实现简单，服务器端推送消息方便；实时性较好，服务器有新消息可以立即推送给客户端。</li><li>缺点： 只能单向通信，即服务器推送消息给客户端，客户端无法主动向服务器发送消息；兼容性相对较差，部分旧版本浏览器不支持。</li></ul><h4 id="_4-websocket" tabindex="-1">4. WebSocket <a class="header-anchor" href="#_4-websocket" aria-label="Permalink to &quot;4. WebSocket&quot;">​</a></h4><ul><li>原理： 客户端和服务器之间建立持久的双向连接，双方可以随时通过连接发送数据。WebSocket 是一种新的协议，不基于 HTTP，但可以在 HTTP 握手阶段进行协议升级。</li><li>优点： 实时性最好，可以实现真正的双向通信；性能高，由于建立了持久连接，避免了频繁创建和断开连接的开销。</li><li>缺点： 实现相对复杂，服务器端需要支持 WebSocket 协议；需要考虑心跳机制，保持连接的稳定性。</li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><table tabindex="0"><thead><tr><th>功能特点</th><th>短轮询</th><th>长轮询</th><th>SSE</th><th>WebSocket</th></tr></thead><tbody><tr><td>通信方式</td><td>客户端轮询</td><td>客户端轮询</td><td>服务器推送</td><td>双向通信</td></tr><tr><td>实时性</td><td>差</td><td>较好</td><td>较好</td><td>最好</td></tr><tr><td>资源消耗</td><td>低</td><td>较高</td><td>较低</td><td>较高</td></tr><tr><td>实现难度</td><td>简单</td><td>较简单</td><td>简单</td><td>较复杂</td></tr><tr><td>适用场景</td><td>简单应用，实时性要求不高</td><td>实时性要求较高的应用</td><td>服务器推送消息的应用</td><td>实时性要求最高的应用</td></tr></tbody></table>',10)]))}const b=e(r,[["render",o]]);export{c as __pageData,b as default};
